
hmi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003eba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00800060  00003eba  00003f4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080012c  0080012c  0000401a  2**0
                  ALLOC
  3 .stab         000038d0  00000000  00000000  0000401c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001320  00000000  00000000  000078ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ab05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c7a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c900  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cb8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d35b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__vector_4>
      14:	0c 94 f5 1a 	jmp	0x35ea	; 0x35ea <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 29 1a 	jmp	0x3452	; 0x3452 <__vector_7>
      20:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__vector_8>
      24:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__vector_9>
      28:	0c 94 f6 19 	jmp	0x33ec	; 0x33ec <__vector_10>
      2c:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 32       	cpi	r26, 0x2C	; 44
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e2       	ldi	r26, 0x2C	; 44
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 34       	cpi	r26, 0x44	; 68
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0a 12 	call	0x2414	; 0x2414 <main>
      8a:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e1       	ldi	r26, 0x15	; 21
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fb 1e 	jmp	0x3df6	; 0x3df6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e1       	ldi	r24, 0x15	; 21
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fb 1e 	jmp	0x3df6	; 0x3df6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ef 1e 	jmp	0x3dde	; 0x3dde <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0b 1f 	jmp	0x3e16	; 0x3e16 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <timercounter>:
uint8 function_button;
uint8 verify;
uint8 Locked;


void timercounter(void){
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	timertick++;
    11ca:	80 91 43 01 	lds	r24, 0x0143
    11ce:	8f 5f       	subi	r24, 0xFF	; 255
    11d0:	80 93 43 01 	sts	0x0143, r24
}
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <timerfunction>:
void timerfunction(uint8 seconds){
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	2d 97       	sbiw	r28, 0x0d	; 13
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	88 87       	std	Y+8, r24	; 0x08
	Timer_ConfigType Timer_Configurations = {0, 0 , TIMER1 , F_CPU_64 , NORMAL};
    11f0:	ce 01       	movw	r24, r28
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	9a 87       	std	Y+10, r25	; 0x0a
    11f6:	89 87       	std	Y+9, r24	; 0x09
    11f8:	ed e1       	ldi	r30, 0x1D	; 29
    11fa:	f1 e0       	ldi	r31, 0x01	; 1
    11fc:	fc 87       	std	Y+12, r31	; 0x0c
    11fe:	eb 87       	std	Y+11, r30	; 0x0b
    1200:	f7 e0       	ldi	r31, 0x07	; 7
    1202:	fd 87       	std	Y+13, r31	; 0x0d
    1204:	eb 85       	ldd	r30, Y+11	; 0x0b
    1206:	fc 85       	ldd	r31, Y+12	; 0x0c
    1208:	00 80       	ld	r0, Z
    120a:	8b 85       	ldd	r24, Y+11	; 0x0b
    120c:	9c 85       	ldd	r25, Y+12	; 0x0c
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	9c 87       	std	Y+12, r25	; 0x0c
    1212:	8b 87       	std	Y+11, r24	; 0x0b
    1214:	e9 85       	ldd	r30, Y+9	; 0x09
    1216:	fa 85       	ldd	r31, Y+10	; 0x0a
    1218:	00 82       	st	Z, r0
    121a:	89 85       	ldd	r24, Y+9	; 0x09
    121c:	9a 85       	ldd	r25, Y+10	; 0x0a
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	9a 87       	std	Y+10, r25	; 0x0a
    1222:	89 87       	std	Y+9, r24	; 0x09
    1224:	9d 85       	ldd	r25, Y+13	; 0x0d
    1226:	91 50       	subi	r25, 0x01	; 1
    1228:	9d 87       	std	Y+13, r25	; 0x0d
    122a:	ed 85       	ldd	r30, Y+13	; 0x0d
    122c:	ee 23       	and	r30, r30
    122e:	51 f7       	brne	.-44     	; 0x1204 <timerfunction+0x2a>
	Timer_init(&Timer_Configurations);
    1230:	ce 01       	movw	r24, r28
    1232:	01 96       	adiw	r24, 0x01	; 1
    1234:	0e 94 28 1b 	call	0x3650	; 0x3650 <Timer_init>
	Timer_setCallBack(timercounter,TIMER1);
    1238:	81 ee       	ldi	r24, 0xE1	; 225
    123a:	98 e0       	ldi	r25, 0x08	; 8
    123c:	61 e0       	ldi	r22, 0x01	; 1
    123e:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <Timer_setCallBack>
	while ( timertick != (  (timerovf) * (seconds))){}
    1242:	80 91 43 01 	lds	r24, 0x0143
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	88 85       	ldd	r24, Y+8	; 0x08
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	28 17       	cp	r18, r24
    1256:	39 07       	cpc	r19, r25
    1258:	a1 f7       	brne	.-24     	; 0x1242 <timerfunction+0x68>
	Timer_deInit(TIMER1);
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	0e 94 b0 1c 	call	0x3960	; 0x3960 <Timer_deInit>

	/* Reset counters after delay */
	if (timertick >= timerovf) {
    1260:	80 91 43 01 	lds	r24, 0x0143
    1264:	82 30       	cpi	r24, 0x02	; 2
    1266:	28 f0       	brcs	.+10     	; 0x1272 <timerfunction+0x98>
		timertick = 0;
    1268:	10 92 43 01 	sts	0x0143, r1
		timerfinish = 1;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	80 93 39 01 	sts	0x0139, r24
	}
}
    1272:	2d 96       	adiw	r28, 0x0d	; 13
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <enterpassword1>:
uint8 enterpassword1(void) {
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	ac 97       	sbiw	r28, 0x2c	; 44
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
	if(error == 1){
    1298:	80 91 2c 01 	lds	r24, 0x012C
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	09 f0       	breq	.+2      	; 0x12a2 <enterpassword1+0x1e>
    12a0:	7b c0       	rjmp	.+246    	; 0x1398 <enterpassword1+0x114>
		LCD_clearScreen();
    12a2:	0e 94 b9 19 	call	0x3372	; 0x3372 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,5,"Unmatched");
    12a6:	20 e6       	ldi	r18, 0x60	; 96
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	65 e0       	ldi	r22, 0x05	; 5
    12ae:	a9 01       	movw	r20, r18
    12b0:	0e 94 7d 19 	call	0x32fa	; 0x32fa <LCD_displayStringRowColumn>
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	aa ef       	ldi	r26, 0xFA	; 250
    12ba:	b4 e4       	ldi	r27, 0x44	; 68
    12bc:	8f a3       	std	Y+39, r24	; 0x27
    12be:	98 a7       	std	Y+40, r25	; 0x28
    12c0:	a9 a7       	std	Y+41, r26	; 0x29
    12c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c4:	6f a1       	ldd	r22, Y+39	; 0x27
    12c6:	78 a5       	ldd	r23, Y+40	; 0x28
    12c8:	89 a5       	ldd	r24, Y+41	; 0x29
    12ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	4a ef       	ldi	r20, 0xFA	; 250
    12d2:	54 e4       	ldi	r21, 0x44	; 68
    12d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	8b a3       	std	Y+35, r24	; 0x23
    12de:	9c a3       	std	Y+36, r25	; 0x24
    12e0:	ad a3       	std	Y+37, r26	; 0x25
    12e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12e4:	6b a1       	ldd	r22, Y+35	; 0x23
    12e6:	7c a1       	ldd	r23, Y+36	; 0x24
    12e8:	8d a1       	ldd	r24, Y+37	; 0x25
    12ea:	9e a1       	ldd	r25, Y+38	; 0x26
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e8       	ldi	r20, 0x80	; 128
    12f2:	5f e3       	ldi	r21, 0x3F	; 63
    12f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12f8:	88 23       	and	r24, r24
    12fa:	2c f4       	brge	.+10     	; 0x1306 <enterpassword1+0x82>
		__ticks = 1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	9a a3       	std	Y+34, r25	; 0x22
    1302:	89 a3       	std	Y+33, r24	; 0x21
    1304:	3f c0       	rjmp	.+126    	; 0x1384 <enterpassword1+0x100>
	else if (__tmp > 65535)
    1306:	6b a1       	ldd	r22, Y+35	; 0x23
    1308:	7c a1       	ldd	r23, Y+36	; 0x24
    130a:	8d a1       	ldd	r24, Y+37	; 0x25
    130c:	9e a1       	ldd	r25, Y+38	; 0x26
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	3f ef       	ldi	r19, 0xFF	; 255
    1312:	4f e7       	ldi	r20, 0x7F	; 127
    1314:	57 e4       	ldi	r21, 0x47	; 71
    1316:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    131a:	18 16       	cp	r1, r24
    131c:	4c f5       	brge	.+82     	; 0x1370 <enterpassword1+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131e:	6f a1       	ldd	r22, Y+39	; 0x27
    1320:	78 a5       	ldd	r23, Y+40	; 0x28
    1322:	89 a5       	ldd	r24, Y+41	; 0x29
    1324:	9a a5       	ldd	r25, Y+42	; 0x2a
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e2       	ldi	r20, 0x20	; 32
    132c:	51 e4       	ldi	r21, 0x41	; 65
    132e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	bc 01       	movw	r22, r24
    1338:	cd 01       	movw	r24, r26
    133a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	9a a3       	std	Y+34, r25	; 0x22
    1344:	89 a3       	std	Y+33, r24	; 0x21
    1346:	0f c0       	rjmp	.+30     	; 0x1366 <enterpassword1+0xe2>
    1348:	88 ec       	ldi	r24, 0xC8	; 200
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	98 a3       	std	Y+32, r25	; 0x20
    134e:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1350:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1352:	98 a1       	ldd	r25, Y+32	; 0x20
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	f1 f7       	brne	.-4      	; 0x1354 <enterpassword1+0xd0>
    1358:	98 a3       	std	Y+32, r25	; 0x20
    135a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135c:	89 a1       	ldd	r24, Y+33	; 0x21
    135e:	9a a1       	ldd	r25, Y+34	; 0x22
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	9a a3       	std	Y+34, r25	; 0x22
    1364:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1366:	89 a1       	ldd	r24, Y+33	; 0x21
    1368:	9a a1       	ldd	r25, Y+34	; 0x22
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	69 f7       	brne	.-38     	; 0x1348 <enterpassword1+0xc4>
    136e:	14 c0       	rjmp	.+40     	; 0x1398 <enterpassword1+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1370:	6b a1       	ldd	r22, Y+35	; 0x23
    1372:	7c a1       	ldd	r23, Y+36	; 0x24
    1374:	8d a1       	ldd	r24, Y+37	; 0x25
    1376:	9e a1       	ldd	r25, Y+38	; 0x26
    1378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	9a a3       	std	Y+34, r25	; 0x22
    1382:	89 a3       	std	Y+33, r24	; 0x21
    1384:	89 a1       	ldd	r24, Y+33	; 0x21
    1386:	9a a1       	ldd	r25, Y+34	; 0x22
    1388:	9e 8f       	std	Y+30, r25	; 0x1e
    138a:	8d 8f       	std	Y+29, r24	; 0x1d
    138c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    138e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	f1 f7       	brne	.-4      	; 0x1390 <enterpassword1+0x10c>
    1394:	9e 8f       	std	Y+30, r25	; 0x1e
    1396:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2000);
	}
	uint8 button ;

	/* Prompt user to enter password */
	LCD_clearScreen();
    1398:	0e 94 b9 19 	call	0x3372	; 0x3372 <LCD_clearScreen>
	LCD_displayString("Plz enter pass:");
    139c:	8a e6       	ldi	r24, 0x6A	; 106
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 12 19 	call	0x3224	; 0x3224 <LCD_displayString>
	LCD_moveCursor(1,0);
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	0e 94 3b 19 	call	0x3276	; 0x3276 <LCD_moveCursor>

	/* Capture password using the keypad */
	for(uint8 j=0;j<=password_length;j++){
    13ac:	1b a6       	std	Y+43, r1	; 0x2b
    13ae:	01 c1       	rjmp	.+514    	; 0x15b2 <enterpassword1+0x32e>
		button=KEYPAD_getPressedKey();
    13b0:	0e 94 b3 12 	call	0x2566	; 0x2566 <KEYPAD_getPressedKey>
    13b4:	8c a7       	std	Y+44, r24	; 0x2c
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	aa e7       	ldi	r26, 0x7A	; 122
    13bc:	b3 e4       	ldi	r27, 0x43	; 67
    13be:	89 8f       	std	Y+25, r24	; 0x19
    13c0:	9a 8f       	std	Y+26, r25	; 0x1a
    13c2:	ab 8f       	std	Y+27, r26	; 0x1b
    13c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c6:	69 8d       	ldd	r22, Y+25	; 0x19
    13c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	4a ef       	ldi	r20, 0xFA	; 250
    13d4:	54 e4       	ldi	r21, 0x44	; 68
    13d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	8d 8b       	std	Y+21, r24	; 0x15
    13e0:	9e 8b       	std	Y+22, r25	; 0x16
    13e2:	af 8b       	std	Y+23, r26	; 0x17
    13e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13e6:	6d 89       	ldd	r22, Y+21	; 0x15
    13e8:	7e 89       	ldd	r23, Y+22	; 0x16
    13ea:	8f 89       	ldd	r24, Y+23	; 0x17
    13ec:	98 8d       	ldd	r25, Y+24	; 0x18
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	40 e8       	ldi	r20, 0x80	; 128
    13f4:	5f e3       	ldi	r21, 0x3F	; 63
    13f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13fa:	88 23       	and	r24, r24
    13fc:	2c f4       	brge	.+10     	; 0x1408 <enterpassword1+0x184>
		__ticks = 1;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	9c 8b       	std	Y+20, r25	; 0x14
    1404:	8b 8b       	std	Y+19, r24	; 0x13
    1406:	3f c0       	rjmp	.+126    	; 0x1486 <enterpassword1+0x202>
	else if (__tmp > 65535)
    1408:	6d 89       	ldd	r22, Y+21	; 0x15
    140a:	7e 89       	ldd	r23, Y+22	; 0x16
    140c:	8f 89       	ldd	r24, Y+23	; 0x17
    140e:	98 8d       	ldd	r25, Y+24	; 0x18
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	3f ef       	ldi	r19, 0xFF	; 255
    1414:	4f e7       	ldi	r20, 0x7F	; 127
    1416:	57 e4       	ldi	r21, 0x47	; 71
    1418:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    141c:	18 16       	cp	r1, r24
    141e:	4c f5       	brge	.+82     	; 0x1472 <enterpassword1+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1420:	69 8d       	ldd	r22, Y+25	; 0x19
    1422:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1424:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1426:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e2       	ldi	r20, 0x20	; 32
    142e:	51 e4       	ldi	r21, 0x41	; 65
    1430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	bc 01       	movw	r22, r24
    143a:	cd 01       	movw	r24, r26
    143c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	9c 8b       	std	Y+20, r25	; 0x14
    1446:	8b 8b       	std	Y+19, r24	; 0x13
    1448:	0f c0       	rjmp	.+30     	; 0x1468 <enterpassword1+0x1e4>
    144a:	88 ec       	ldi	r24, 0xC8	; 200
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	9a 8b       	std	Y+18, r25	; 0x12
    1450:	89 8b       	std	Y+17, r24	; 0x11
    1452:	89 89       	ldd	r24, Y+17	; 0x11
    1454:	9a 89       	ldd	r25, Y+18	; 0x12
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <enterpassword1+0x1d2>
    145a:	9a 8b       	std	Y+18, r25	; 0x12
    145c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145e:	8b 89       	ldd	r24, Y+19	; 0x13
    1460:	9c 89       	ldd	r25, Y+20	; 0x14
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	9c 8b       	std	Y+20, r25	; 0x14
    1466:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1468:	8b 89       	ldd	r24, Y+19	; 0x13
    146a:	9c 89       	ldd	r25, Y+20	; 0x14
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	69 f7       	brne	.-38     	; 0x144a <enterpassword1+0x1c6>
    1470:	14 c0       	rjmp	.+40     	; 0x149a <enterpassword1+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1472:	6d 89       	ldd	r22, Y+21	; 0x15
    1474:	7e 89       	ldd	r23, Y+22	; 0x16
    1476:	8f 89       	ldd	r24, Y+23	; 0x17
    1478:	98 8d       	ldd	r25, Y+24	; 0x18
    147a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	9c 8b       	std	Y+20, r25	; 0x14
    1484:	8b 8b       	std	Y+19, r24	; 0x13
    1486:	8b 89       	ldd	r24, Y+19	; 0x13
    1488:	9c 89       	ldd	r25, Y+20	; 0x14
    148a:	98 8b       	std	Y+16, r25	; 0x10
    148c:	8f 87       	std	Y+15, r24	; 0x0f
    148e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1490:	98 89       	ldd	r25, Y+16	; 0x10
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	f1 f7       	brne	.-4      	; 0x1492 <enterpassword1+0x20e>
    1496:	98 8b       	std	Y+16, r25	; 0x10
    1498:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		if(j==password_length){
    149a:	8b a5       	ldd	r24, Y+43	; 0x2b
    149c:	85 30       	cpi	r24, 0x05	; 5
    149e:	09 f0       	breq	.+2      	; 0x14a2 <enterpassword1+0x21e>
    14a0:	7a c0       	rjmp	.+244    	; 0x1596 <enterpassword1+0x312>
    14a2:	75 c0       	rjmp	.+234    	; 0x158e <enterpassword1+0x30a>
			while(button != '='){
				button=KEYPAD_getPressedKey();
    14a4:	0e 94 b3 12 	call	0x2566	; 0x2566 <KEYPAD_getPressedKey>
    14a8:	8c a7       	std	Y+44, r24	; 0x2c
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	aa e7       	ldi	r26, 0x7A	; 122
    14b0:	b3 e4       	ldi	r27, 0x43	; 67
    14b2:	8b 87       	std	Y+11, r24	; 0x0b
    14b4:	9c 87       	std	Y+12, r25	; 0x0c
    14b6:	ad 87       	std	Y+13, r26	; 0x0d
    14b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    14bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14be:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	4a ef       	ldi	r20, 0xFA	; 250
    14c8:	54 e4       	ldi	r21, 0x44	; 68
    14ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	8f 83       	std	Y+7, r24	; 0x07
    14d4:	98 87       	std	Y+8, r25	; 0x08
    14d6:	a9 87       	std	Y+9, r26	; 0x09
    14d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14da:	6f 81       	ldd	r22, Y+7	; 0x07
    14dc:	78 85       	ldd	r23, Y+8	; 0x08
    14de:	89 85       	ldd	r24, Y+9	; 0x09
    14e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e8       	ldi	r20, 0x80	; 128
    14e8:	5f e3       	ldi	r21, 0x3F	; 63
    14ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ee:	88 23       	and	r24, r24
    14f0:	2c f4       	brge	.+10     	; 0x14fc <enterpassword1+0x278>
		__ticks = 1;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	9e 83       	std	Y+6, r25	; 0x06
    14f8:	8d 83       	std	Y+5, r24	; 0x05
    14fa:	3f c0       	rjmp	.+126    	; 0x157a <enterpassword1+0x2f6>
	else if (__tmp > 65535)
    14fc:	6f 81       	ldd	r22, Y+7	; 0x07
    14fe:	78 85       	ldd	r23, Y+8	; 0x08
    1500:	89 85       	ldd	r24, Y+9	; 0x09
    1502:	9a 85       	ldd	r25, Y+10	; 0x0a
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	3f ef       	ldi	r19, 0xFF	; 255
    1508:	4f e7       	ldi	r20, 0x7F	; 127
    150a:	57 e4       	ldi	r21, 0x47	; 71
    150c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1510:	18 16       	cp	r1, r24
    1512:	4c f5       	brge	.+82     	; 0x1566 <enterpassword1+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1514:	6b 85       	ldd	r22, Y+11	; 0x0b
    1516:	7c 85       	ldd	r23, Y+12	; 0x0c
    1518:	8d 85       	ldd	r24, Y+13	; 0x0d
    151a:	9e 85       	ldd	r25, Y+14	; 0x0e
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e2       	ldi	r20, 0x20	; 32
    1522:	51 e4       	ldi	r21, 0x41	; 65
    1524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	bc 01       	movw	r22, r24
    152e:	cd 01       	movw	r24, r26
    1530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	9e 83       	std	Y+6, r25	; 0x06
    153a:	8d 83       	std	Y+5, r24	; 0x05
    153c:	0f c0       	rjmp	.+30     	; 0x155c <enterpassword1+0x2d8>
    153e:	88 ec       	ldi	r24, 0xC8	; 200
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	9c 83       	std	Y+4, r25	; 0x04
    1544:	8b 83       	std	Y+3, r24	; 0x03
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	9c 81       	ldd	r25, Y+4	; 0x04
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <enterpassword1+0x2c6>
    154e:	9c 83       	std	Y+4, r25	; 0x04
    1550:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1552:	8d 81       	ldd	r24, Y+5	; 0x05
    1554:	9e 81       	ldd	r25, Y+6	; 0x06
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	9e 83       	std	Y+6, r25	; 0x06
    155a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	9e 81       	ldd	r25, Y+6	; 0x06
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	69 f7       	brne	.-38     	; 0x153e <enterpassword1+0x2ba>
    1564:	14 c0       	rjmp	.+40     	; 0x158e <enterpassword1+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1566:	6f 81       	ldd	r22, Y+7	; 0x07
    1568:	78 85       	ldd	r23, Y+8	; 0x08
    156a:	89 85       	ldd	r24, Y+9	; 0x09
    156c:	9a 85       	ldd	r25, Y+10	; 0x0a
    156e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	9e 83       	std	Y+6, r25	; 0x06
    1578:	8d 83       	std	Y+5, r24	; 0x05
    157a:	8d 81       	ldd	r24, Y+5	; 0x05
    157c:	9e 81       	ldd	r25, Y+6	; 0x06
    157e:	9a 83       	std	Y+2, r25	; 0x02
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	9a 81       	ldd	r25, Y+2	; 0x02
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <enterpassword1+0x302>
    158a:	9a 83       	std	Y+2, r25	; 0x02
    158c:	89 83       	std	Y+1, r24	; 0x01
	/* Capture password using the keypad */
	for(uint8 j=0;j<=password_length;j++){
		button=KEYPAD_getPressedKey();
		_delay_ms(250);
		if(j==password_length){
			while(button != '='){
    158e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1590:	8d 33       	cpi	r24, 0x3D	; 61
    1592:	09 f0       	breq	.+2      	; 0x1596 <enterpassword1+0x312>
    1594:	87 cf       	rjmp	.-242    	; 0x14a4 <enterpassword1+0x220>
				button=KEYPAD_getPressedKey();
				_delay_ms(250);
			}
		}
		password[j] = button ;
    1596:	8b a5       	ldd	r24, Y+43	; 0x2b
    1598:	88 2f       	mov	r24, r24
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	fc 01       	movw	r30, r24
    159e:	ec 5c       	subi	r30, 0xCC	; 204
    15a0:	fe 4f       	sbci	r31, 0xFE	; 254
    15a2:	8c a5       	ldd	r24, Y+44	; 0x2c
    15a4:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    15a6:	8a e2       	ldi	r24, 0x2A	; 42
    15a8:	0e 94 23 17 	call	0x2e46	; 0x2e46 <LCD_displayCharacter>
	LCD_clearScreen();
	LCD_displayString("Plz enter pass:");
	LCD_moveCursor(1,0);

	/* Capture password using the keypad */
	for(uint8 j=0;j<=password_length;j++){
    15ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    15ae:	8f 5f       	subi	r24, 0xFF	; 255
    15b0:	8b a7       	std	Y+43, r24	; 0x2b
    15b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    15b4:	86 30       	cpi	r24, 0x06	; 6
    15b6:	08 f4       	brcc	.+2      	; 0x15ba <enterpassword1+0x336>
    15b8:	fb ce       	rjmp	.-522    	; 0x13b0 <enterpassword1+0x12c>
			}
		}
		password[j] = button ;
		LCD_displayCharacter('*');
	}
	return ConfirmPass;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
}
    15bc:	ac 96       	adiw	r28, 0x2c	; 44
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <checkmatch>:
uint8 checkmatch(void){
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <checkmatch+0x6>
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
	error = 0;
    15d8:	10 92 2c 01 	sts	0x012C, r1

	for(uint8 j=0;j<password_length;j++){
    15dc:	19 82       	std	Y+1, r1	; 0x01
    15de:	18 c0       	rjmp	.+48     	; 0x1610 <checkmatch+0x42>
		if(password2[j] != password[j]){
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	88 2f       	mov	r24, r24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	fc 01       	movw	r30, r24
    15e8:	e5 5c       	subi	r30, 0xC5	; 197
    15ea:	fe 4f       	sbci	r31, 0xFE	; 254
    15ec:	20 81       	ld	r18, Z
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	fc 01       	movw	r30, r24
    15f6:	ec 5c       	subi	r30, 0xCC	; 204
    15f8:	fe 4f       	sbci	r31, 0xFE	; 254
    15fa:	80 81       	ld	r24, Z
    15fc:	28 17       	cp	r18, r24
    15fe:	29 f0       	breq	.+10     	; 0x160a <checkmatch+0x3c>
			error=1;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	80 93 2c 01 	sts	0x012C, r24
			return EnterPass;
    1606:	1a 82       	std	Y+2, r1	; 0x02
    1608:	08 c0       	rjmp	.+16     	; 0x161a <checkmatch+0x4c>
	return ConfirmPass;
}
uint8 checkmatch(void){
	error = 0;

	for(uint8 j=0;j<password_length;j++){
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	8f 5f       	subi	r24, 0xFF	; 255
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	85 30       	cpi	r24, 0x05	; 5
    1614:	28 f3       	brcs	.-54     	; 0x15e0 <checkmatch+0x12>
		if(password2[j] != password[j]){
			error=1;
			return EnterPass;
		}
	}
	return SendToMC2;
    1616:	82 e0       	ldi	r24, 0x02	; 2
    1618:	8a 83       	std	Y+2, r24	; 0x02
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <enterpassword2>:

void enterpassword2(void) {
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	6e 97       	sbiw	r28, 0x1e	; 30
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
	uint8 button ;
	/* Prompt for password re-entry */
	LCD_clearScreen();
    163a:	0e 94 b9 19 	call	0x3372	; 0x3372 <LCD_clearScreen>
	LCD_displayString("Plz re-enter the");
    163e:	8a e7       	ldi	r24, 0x7A	; 122
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 94 12 19 	call	0x3224	; 0x3224 <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"same pass: ");
    1646:	2b e8       	ldi	r18, 0x8B	; 139
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	60 e0       	ldi	r22, 0x00	; 0
    164e:	a9 01       	movw	r20, r18
    1650:	0e 94 7d 19 	call	0x32fa	; 0x32fa <LCD_displayStringRowColumn>

	for(uint8 j=0;j<=password_length;j++){
    1654:	1d 8e       	std	Y+29, r1	; 0x1d
    1656:	01 c1       	rjmp	.+514    	; 0x185a <enterpassword2+0x234>
		button=KEYPAD_getPressedKey();
    1658:	0e 94 b3 12 	call	0x2566	; 0x2566 <KEYPAD_getPressedKey>
    165c:	8e 8f       	std	Y+30, r24	; 0x1e
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	aa e7       	ldi	r26, 0x7A	; 122
    1664:	b3 e4       	ldi	r27, 0x43	; 67
    1666:	89 8f       	std	Y+25, r24	; 0x19
    1668:	9a 8f       	std	Y+26, r25	; 0x1a
    166a:	ab 8f       	std	Y+27, r26	; 0x1b
    166c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166e:	69 8d       	ldd	r22, Y+25	; 0x19
    1670:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1672:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1674:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	4a ef       	ldi	r20, 0xFA	; 250
    167c:	54 e4       	ldi	r21, 0x44	; 68
    167e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	8d 8b       	std	Y+21, r24	; 0x15
    1688:	9e 8b       	std	Y+22, r25	; 0x16
    168a:	af 8b       	std	Y+23, r26	; 0x17
    168c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    168e:	6d 89       	ldd	r22, Y+21	; 0x15
    1690:	7e 89       	ldd	r23, Y+22	; 0x16
    1692:	8f 89       	ldd	r24, Y+23	; 0x17
    1694:	98 8d       	ldd	r25, Y+24	; 0x18
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e8       	ldi	r20, 0x80	; 128
    169c:	5f e3       	ldi	r21, 0x3F	; 63
    169e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16a2:	88 23       	and	r24, r24
    16a4:	2c f4       	brge	.+10     	; 0x16b0 <enterpassword2+0x8a>
		__ticks = 1;
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	9c 8b       	std	Y+20, r25	; 0x14
    16ac:	8b 8b       	std	Y+19, r24	; 0x13
    16ae:	3f c0       	rjmp	.+126    	; 0x172e <enterpassword2+0x108>
	else if (__tmp > 65535)
    16b0:	6d 89       	ldd	r22, Y+21	; 0x15
    16b2:	7e 89       	ldd	r23, Y+22	; 0x16
    16b4:	8f 89       	ldd	r24, Y+23	; 0x17
    16b6:	98 8d       	ldd	r25, Y+24	; 0x18
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	3f ef       	ldi	r19, 0xFF	; 255
    16bc:	4f e7       	ldi	r20, 0x7F	; 127
    16be:	57 e4       	ldi	r21, 0x47	; 71
    16c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16c4:	18 16       	cp	r1, r24
    16c6:	4c f5       	brge	.+82     	; 0x171a <enterpassword2+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c8:	69 8d       	ldd	r22, Y+25	; 0x19
    16ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	40 e2       	ldi	r20, 0x20	; 32
    16d6:	51 e4       	ldi	r21, 0x41	; 65
    16d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	bc 01       	movw	r22, r24
    16e2:	cd 01       	movw	r24, r26
    16e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	9c 8b       	std	Y+20, r25	; 0x14
    16ee:	8b 8b       	std	Y+19, r24	; 0x13
    16f0:	0f c0       	rjmp	.+30     	; 0x1710 <enterpassword2+0xea>
    16f2:	88 ec       	ldi	r24, 0xC8	; 200
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	9a 8b       	std	Y+18, r25	; 0x12
    16f8:	89 8b       	std	Y+17, r24	; 0x11
    16fa:	89 89       	ldd	r24, Y+17	; 0x11
    16fc:	9a 89       	ldd	r25, Y+18	; 0x12
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	f1 f7       	brne	.-4      	; 0x16fe <enterpassword2+0xd8>
    1702:	9a 8b       	std	Y+18, r25	; 0x12
    1704:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1706:	8b 89       	ldd	r24, Y+19	; 0x13
    1708:	9c 89       	ldd	r25, Y+20	; 0x14
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	9c 8b       	std	Y+20, r25	; 0x14
    170e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1710:	8b 89       	ldd	r24, Y+19	; 0x13
    1712:	9c 89       	ldd	r25, Y+20	; 0x14
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	69 f7       	brne	.-38     	; 0x16f2 <enterpassword2+0xcc>
    1718:	14 c0       	rjmp	.+40     	; 0x1742 <enterpassword2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    171a:	6d 89       	ldd	r22, Y+21	; 0x15
    171c:	7e 89       	ldd	r23, Y+22	; 0x16
    171e:	8f 89       	ldd	r24, Y+23	; 0x17
    1720:	98 8d       	ldd	r25, Y+24	; 0x18
    1722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	9c 8b       	std	Y+20, r25	; 0x14
    172c:	8b 8b       	std	Y+19, r24	; 0x13
    172e:	8b 89       	ldd	r24, Y+19	; 0x13
    1730:	9c 89       	ldd	r25, Y+20	; 0x14
    1732:	98 8b       	std	Y+16, r25	; 0x10
    1734:	8f 87       	std	Y+15, r24	; 0x0f
    1736:	8f 85       	ldd	r24, Y+15	; 0x0f
    1738:	98 89       	ldd	r25, Y+16	; 0x10
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	f1 f7       	brne	.-4      	; 0x173a <enterpassword2+0x114>
    173e:	98 8b       	std	Y+16, r25	; 0x10
    1740:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);

		if(j==password_length){
    1742:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1744:	85 30       	cpi	r24, 0x05	; 5
    1746:	09 f0       	breq	.+2      	; 0x174a <enterpassword2+0x124>
    1748:	7a c0       	rjmp	.+244    	; 0x183e <enterpassword2+0x218>
    174a:	75 c0       	rjmp	.+234    	; 0x1836 <enterpassword2+0x210>
			while(button != '='){
				button=KEYPAD_getPressedKey();
    174c:	0e 94 b3 12 	call	0x2566	; 0x2566 <KEYPAD_getPressedKey>
    1750:	8e 8f       	std	Y+30, r24	; 0x1e
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	aa e7       	ldi	r26, 0x7A	; 122
    1758:	b3 e4       	ldi	r27, 0x43	; 67
    175a:	8b 87       	std	Y+11, r24	; 0x0b
    175c:	9c 87       	std	Y+12, r25	; 0x0c
    175e:	ad 87       	std	Y+13, r26	; 0x0d
    1760:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1762:	6b 85       	ldd	r22, Y+11	; 0x0b
    1764:	7c 85       	ldd	r23, Y+12	; 0x0c
    1766:	8d 85       	ldd	r24, Y+13	; 0x0d
    1768:	9e 85       	ldd	r25, Y+14	; 0x0e
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	4a ef       	ldi	r20, 0xFA	; 250
    1770:	54 e4       	ldi	r21, 0x44	; 68
    1772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	8f 83       	std	Y+7, r24	; 0x07
    177c:	98 87       	std	Y+8, r25	; 0x08
    177e:	a9 87       	std	Y+9, r26	; 0x09
    1780:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1782:	6f 81       	ldd	r22, Y+7	; 0x07
    1784:	78 85       	ldd	r23, Y+8	; 0x08
    1786:	89 85       	ldd	r24, Y+9	; 0x09
    1788:	9a 85       	ldd	r25, Y+10	; 0x0a
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e8       	ldi	r20, 0x80	; 128
    1790:	5f e3       	ldi	r21, 0x3F	; 63
    1792:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1796:	88 23       	and	r24, r24
    1798:	2c f4       	brge	.+10     	; 0x17a4 <enterpassword2+0x17e>
		__ticks = 1;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	9e 83       	std	Y+6, r25	; 0x06
    17a0:	8d 83       	std	Y+5, r24	; 0x05
    17a2:	3f c0       	rjmp	.+126    	; 0x1822 <enterpassword2+0x1fc>
	else if (__tmp > 65535)
    17a4:	6f 81       	ldd	r22, Y+7	; 0x07
    17a6:	78 85       	ldd	r23, Y+8	; 0x08
    17a8:	89 85       	ldd	r24, Y+9	; 0x09
    17aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	3f ef       	ldi	r19, 0xFF	; 255
    17b0:	4f e7       	ldi	r20, 0x7F	; 127
    17b2:	57 e4       	ldi	r21, 0x47	; 71
    17b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17b8:	18 16       	cp	r1, r24
    17ba:	4c f5       	brge	.+82     	; 0x180e <enterpassword2+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17be:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e2       	ldi	r20, 0x20	; 32
    17ca:	51 e4       	ldi	r21, 0x41	; 65
    17cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	bc 01       	movw	r22, r24
    17d6:	cd 01       	movw	r24, r26
    17d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	9e 83       	std	Y+6, r25	; 0x06
    17e2:	8d 83       	std	Y+5, r24	; 0x05
    17e4:	0f c0       	rjmp	.+30     	; 0x1804 <enterpassword2+0x1de>
    17e6:	88 ec       	ldi	r24, 0xC8	; 200
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	9c 83       	std	Y+4, r25	; 0x04
    17ec:	8b 83       	std	Y+3, r24	; 0x03
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	f1 f7       	brne	.-4      	; 0x17f2 <enterpassword2+0x1cc>
    17f6:	9c 83       	std	Y+4, r25	; 0x04
    17f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fa:	8d 81       	ldd	r24, Y+5	; 0x05
    17fc:	9e 81       	ldd	r25, Y+6	; 0x06
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	9e 83       	std	Y+6, r25	; 0x06
    1802:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1804:	8d 81       	ldd	r24, Y+5	; 0x05
    1806:	9e 81       	ldd	r25, Y+6	; 0x06
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	69 f7       	brne	.-38     	; 0x17e6 <enterpassword2+0x1c0>
    180c:	14 c0       	rjmp	.+40     	; 0x1836 <enterpassword2+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180e:	6f 81       	ldd	r22, Y+7	; 0x07
    1810:	78 85       	ldd	r23, Y+8	; 0x08
    1812:	89 85       	ldd	r24, Y+9	; 0x09
    1814:	9a 85       	ldd	r25, Y+10	; 0x0a
    1816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	9e 83       	std	Y+6, r25	; 0x06
    1820:	8d 83       	std	Y+5, r24	; 0x05
    1822:	8d 81       	ldd	r24, Y+5	; 0x05
    1824:	9e 81       	ldd	r25, Y+6	; 0x06
    1826:	9a 83       	std	Y+2, r25	; 0x02
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	9a 81       	ldd	r25, Y+2	; 0x02
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <enterpassword2+0x208>
    1832:	9a 83       	std	Y+2, r25	; 0x02
    1834:	89 83       	std	Y+1, r24	; 0x01
	for(uint8 j=0;j<=password_length;j++){
		button=KEYPAD_getPressedKey();
		_delay_ms(250);

		if(j==password_length){
			while(button != '='){
    1836:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1838:	8d 33       	cpi	r24, 0x3D	; 61
    183a:	09 f0       	breq	.+2      	; 0x183e <enterpassword2+0x218>
    183c:	87 cf       	rjmp	.-242    	; 0x174c <enterpassword2+0x126>
				button=KEYPAD_getPressedKey();
				_delay_ms(250);
			}

		}
		password2[j] = button ;
    183e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1840:	88 2f       	mov	r24, r24
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	fc 01       	movw	r30, r24
    1846:	e5 5c       	subi	r30, 0xC5	; 197
    1848:	fe 4f       	sbci	r31, 0xFE	; 254
    184a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    184c:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    184e:	8a e2       	ldi	r24, 0x2A	; 42
    1850:	0e 94 23 17 	call	0x2e46	; 0x2e46 <LCD_displayCharacter>
	/* Prompt for password re-entry */
	LCD_clearScreen();
	LCD_displayString("Plz re-enter the");
	LCD_displayStringRowColumn(1,0,"same pass: ");

	for(uint8 j=0;j<=password_length;j++){
    1854:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1856:	8f 5f       	subi	r24, 0xFF	; 255
    1858:	8d 8f       	std	Y+29, r24	; 0x1d
    185a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    185c:	86 30       	cpi	r24, 0x06	; 6
    185e:	08 f4       	brcc	.+2      	; 0x1862 <enterpassword2+0x23c>
    1860:	fb ce       	rjmp	.-522    	; 0x1658 <enterpassword2+0x32>

		}
		password2[j] = button ;
		LCD_displayCharacter('*');
	}
}
    1862:	6e 96       	adiw	r28, 0x1e	; 30
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	08 95       	ret

00001874 <sendbyuart>:

void sendbyuart(void){
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	2f 97       	sbiw	r28, 0x0f	; 15
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
//	UART_sendByte('50');
//	_delay_ms(200);

	for (uint8 j = 0; j < password_length; j++) {
    1888:	1f 86       	std	Y+15, r1	; 0x0f
    188a:	7e c0       	rjmp	.+252    	; 0x1988 <sendbyuart+0x114>
		UART_sendByte(password[j]);
    188c:	8f 85       	ldd	r24, Y+15	; 0x0f
    188e:	88 2f       	mov	r24, r24
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	fc 01       	movw	r30, r24
    1894:	ec 5c       	subi	r30, 0xCC	; 204
    1896:	fe 4f       	sbci	r31, 0xFE	; 254
    1898:	80 81       	ld	r24, Z
    189a:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <UART_sendByte>
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	aa e7       	ldi	r26, 0x7A	; 122
    18a4:	b3 e4       	ldi	r27, 0x43	; 67
    18a6:	8b 87       	std	Y+11, r24	; 0x0b
    18a8:	9c 87       	std	Y+12, r25	; 0x0c
    18aa:	ad 87       	std	Y+13, r26	; 0x0d
    18ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	4a ef       	ldi	r20, 0xFA	; 250
    18bc:	54 e4       	ldi	r21, 0x44	; 68
    18be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	8f 83       	std	Y+7, r24	; 0x07
    18c8:	98 87       	std	Y+8, r25	; 0x08
    18ca:	a9 87       	std	Y+9, r26	; 0x09
    18cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18ce:	6f 81       	ldd	r22, Y+7	; 0x07
    18d0:	78 85       	ldd	r23, Y+8	; 0x08
    18d2:	89 85       	ldd	r24, Y+9	; 0x09
    18d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e8       	ldi	r20, 0x80	; 128
    18dc:	5f e3       	ldi	r21, 0x3F	; 63
    18de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18e2:	88 23       	and	r24, r24
    18e4:	2c f4       	brge	.+10     	; 0x18f0 <sendbyuart+0x7c>
		__ticks = 1;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9e 83       	std	Y+6, r25	; 0x06
    18ec:	8d 83       	std	Y+5, r24	; 0x05
    18ee:	3f c0       	rjmp	.+126    	; 0x196e <sendbyuart+0xfa>
	else if (__tmp > 65535)
    18f0:	6f 81       	ldd	r22, Y+7	; 0x07
    18f2:	78 85       	ldd	r23, Y+8	; 0x08
    18f4:	89 85       	ldd	r24, Y+9	; 0x09
    18f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	3f ef       	ldi	r19, 0xFF	; 255
    18fc:	4f e7       	ldi	r20, 0x7F	; 127
    18fe:	57 e4       	ldi	r21, 0x47	; 71
    1900:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1904:	18 16       	cp	r1, r24
    1906:	4c f5       	brge	.+82     	; 0x195a <sendbyuart+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1908:	6b 85       	ldd	r22, Y+11	; 0x0b
    190a:	7c 85       	ldd	r23, Y+12	; 0x0c
    190c:	8d 85       	ldd	r24, Y+13	; 0x0d
    190e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e2       	ldi	r20, 0x20	; 32
    1916:	51 e4       	ldi	r21, 0x41	; 65
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	bc 01       	movw	r22, r24
    1922:	cd 01       	movw	r24, r26
    1924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9e 83       	std	Y+6, r25	; 0x06
    192e:	8d 83       	std	Y+5, r24	; 0x05
    1930:	0f c0       	rjmp	.+30     	; 0x1950 <sendbyuart+0xdc>
    1932:	88 ec       	ldi	r24, 0xC8	; 200
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9c 83       	std	Y+4, r25	; 0x04
    1938:	8b 83       	std	Y+3, r24	; 0x03
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	9c 81       	ldd	r25, Y+4	; 0x04
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	f1 f7       	brne	.-4      	; 0x193e <sendbyuart+0xca>
    1942:	9c 83       	std	Y+4, r25	; 0x04
    1944:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1946:	8d 81       	ldd	r24, Y+5	; 0x05
    1948:	9e 81       	ldd	r25, Y+6	; 0x06
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	9e 83       	std	Y+6, r25	; 0x06
    194e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1950:	8d 81       	ldd	r24, Y+5	; 0x05
    1952:	9e 81       	ldd	r25, Y+6	; 0x06
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	69 f7       	brne	.-38     	; 0x1932 <sendbyuart+0xbe>
    1958:	14 c0       	rjmp	.+40     	; 0x1982 <sendbyuart+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195a:	6f 81       	ldd	r22, Y+7	; 0x07
    195c:	78 85       	ldd	r23, Y+8	; 0x08
    195e:	89 85       	ldd	r24, Y+9	; 0x09
    1960:	9a 85       	ldd	r25, Y+10	; 0x0a
    1962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	9e 83       	std	Y+6, r25	; 0x06
    196c:	8d 83       	std	Y+5, r24	; 0x05
    196e:	8d 81       	ldd	r24, Y+5	; 0x05
    1970:	9e 81       	ldd	r25, Y+6	; 0x06
    1972:	9a 83       	std	Y+2, r25	; 0x02
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	9a 81       	ldd	r25, Y+2	; 0x02
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <sendbyuart+0x106>
    197e:	9a 83       	std	Y+2, r25	; 0x02
    1980:	89 83       	std	Y+1, r24	; 0x01

void sendbyuart(void){
//	UART_sendByte('50');
//	_delay_ms(200);

	for (uint8 j = 0; j < password_length; j++) {
    1982:	8f 85       	ldd	r24, Y+15	; 0x0f
    1984:	8f 5f       	subi	r24, 0xFF	; 255
    1986:	8f 87       	std	Y+15, r24	; 0x0f
    1988:	8f 85       	ldd	r24, Y+15	; 0x0f
    198a:	85 30       	cpi	r24, 0x05	; 5
    198c:	08 f4       	brcc	.+2      	; 0x1990 <sendbyuart+0x11c>
    198e:	7e cf       	rjmp	.-260    	; 0x188c <sendbyuart+0x18>
		UART_sendByte(password[j]);
		_delay_ms(250);
	}
}
    1990:	2f 96       	adiw	r28, 0x0f	; 15
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <DisplayHome>:

void DisplayHome(void){
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	2e 97       	sbiw	r28, 0x0e	; 14
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    19b6:	0e 94 b9 19 	call	0x3372	; 0x3372 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+ : Open Door");
    19ba:	27 e9       	ldi	r18, 0x97	; 151
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	a9 01       	movw	r20, r18
    19c4:	0e 94 7d 19 	call	0x32fa	; 0x32fa <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"- : Change Pass");
    19c8:	25 ea       	ldi	r18, 0xA5	; 165
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	a9 01       	movw	r20, r18
    19d2:	0e 94 7d 19 	call	0x32fa	; 0x32fa <LCD_displayStringRowColumn>

	function_button= KEYPAD_getPressedKey();
    19d6:	0e 94 b3 12 	call	0x2566	; 0x2566 <KEYPAD_getPressedKey>
    19da:	80 93 3a 01 	sts	0x013A, r24
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	aa e7       	ldi	r26, 0x7A	; 122
    19e4:	b3 e4       	ldi	r27, 0x43	; 67
    19e6:	8b 87       	std	Y+11, r24	; 0x0b
    19e8:	9c 87       	std	Y+12, r25	; 0x0c
    19ea:	ad 87       	std	Y+13, r26	; 0x0d
    19ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	4a ef       	ldi	r20, 0xFA	; 250
    19fc:	54 e4       	ldi	r21, 0x44	; 68
    19fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	8f 83       	std	Y+7, r24	; 0x07
    1a08:	98 87       	std	Y+8, r25	; 0x08
    1a0a:	a9 87       	std	Y+9, r26	; 0x09
    1a0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a10:	78 85       	ldd	r23, Y+8	; 0x08
    1a12:	89 85       	ldd	r24, Y+9	; 0x09
    1a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e8       	ldi	r20, 0x80	; 128
    1a1c:	5f e3       	ldi	r21, 0x3F	; 63
    1a1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a22:	88 23       	and	r24, r24
    1a24:	2c f4       	brge	.+10     	; 0x1a30 <DisplayHome+0x8e>
		__ticks = 1;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	9e 83       	std	Y+6, r25	; 0x06
    1a2c:	8d 83       	std	Y+5, r24	; 0x05
    1a2e:	3f c0       	rjmp	.+126    	; 0x1aae <DisplayHome+0x10c>
	else if (__tmp > 65535)
    1a30:	6f 81       	ldd	r22, Y+7	; 0x07
    1a32:	78 85       	ldd	r23, Y+8	; 0x08
    1a34:	89 85       	ldd	r24, Y+9	; 0x09
    1a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	3f ef       	ldi	r19, 0xFF	; 255
    1a3c:	4f e7       	ldi	r20, 0x7F	; 127
    1a3e:	57 e4       	ldi	r21, 0x47	; 71
    1a40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a44:	18 16       	cp	r1, r24
    1a46:	4c f5       	brge	.+82     	; 0x1a9a <DisplayHome+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	40 e2       	ldi	r20, 0x20	; 32
    1a56:	51 e4       	ldi	r21, 0x41	; 65
    1a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	bc 01       	movw	r22, r24
    1a62:	cd 01       	movw	r24, r26
    1a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	9e 83       	std	Y+6, r25	; 0x06
    1a6e:	8d 83       	std	Y+5, r24	; 0x05
    1a70:	0f c0       	rjmp	.+30     	; 0x1a90 <DisplayHome+0xee>
    1a72:	88 ec       	ldi	r24, 0xC8	; 200
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	9c 83       	std	Y+4, r25	; 0x04
    1a78:	8b 83       	std	Y+3, r24	; 0x03
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <DisplayHome+0xdc>
    1a82:	9c 83       	std	Y+4, r25	; 0x04
    1a84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a86:	8d 81       	ldd	r24, Y+5	; 0x05
    1a88:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	9e 83       	std	Y+6, r25	; 0x06
    1a8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a90:	8d 81       	ldd	r24, Y+5	; 0x05
    1a92:	9e 81       	ldd	r25, Y+6	; 0x06
    1a94:	00 97       	sbiw	r24, 0x00	; 0
    1a96:	69 f7       	brne	.-38     	; 0x1a72 <DisplayHome+0xd0>
    1a98:	14 c0       	rjmp	.+40     	; 0x1ac2 <DisplayHome+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9c:	78 85       	ldd	r23, Y+8	; 0x08
    1a9e:	89 85       	ldd	r24, Y+9	; 0x09
    1aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	9e 83       	std	Y+6, r25	; 0x06
    1aac:	8d 83       	std	Y+5, r24	; 0x05
    1aae:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab2:	9a 83       	std	Y+2, r25	; 0x02
    1ab4:	89 83       	std	Y+1, r24	; 0x01
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <DisplayHome+0x118>
    1abe:	9a 83       	std	Y+2, r25	; 0x02
    1ac0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);

	if(function_button=='+' || function_button=='-' ){
    1ac2:	80 91 3a 01 	lds	r24, 0x013A
    1ac6:	8b 32       	cpi	r24, 0x2B	; 43
    1ac8:	21 f0       	breq	.+8      	; 0x1ad2 <DisplayHome+0x130>
    1aca:	80 91 3a 01 	lds	r24, 0x013A
    1ace:	8d 32       	cpi	r24, 0x2D	; 45
    1ad0:	21 f4       	brne	.+8      	; 0x1ada <DisplayHome+0x138>
		step= ConfirmWithMC2;
    1ad2:	84 e0       	ldi	r24, 0x04	; 4
    1ad4:	80 93 2d 01 	sts	0x012D, r24
    1ad8:	03 c0       	rjmp	.+6      	; 0x1ae0 <DisplayHome+0x13e>
	}
	else step=Home;
    1ada:	83 e0       	ldi	r24, 0x03	; 3
    1adc:	80 93 2d 01 	sts	0x012D, r24
}
    1ae0:	2e 96       	adiw	r28, 0x0e	; 14
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <Error_Handler>:
//	for (uint8 j = 0; j < password_length; j++) {
//		UART_sendByte(password2[j]);
//		_delay_ms(250);
//	}
//}
uint8 Error_Handler(void) {
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	0f 92       	push	r0
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
	attempt++;
    1afc:	80 91 40 01 	lds	r24, 0x0140
    1b00:	8f 5f       	subi	r24, 0xFF	; 255
    1b02:	80 93 40 01 	sts	0x0140, r24
	if (attempt >= 3) {
    1b06:	80 91 40 01 	lds	r24, 0x0140
    1b0a:	83 30       	cpi	r24, 0x03	; 3
    1b0c:	40 f0       	brcs	.+16     	; 0x1b1e <Error_Handler+0x2c>
		Locked = 1;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	80 93 42 01 	sts	0x0142, r24
		attempt=0;
    1b14:	10 92 40 01 	sts	0x0140, r1
		return wrongpass;
    1b18:	87 e0       	ldi	r24, 0x07	; 7
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <Error_Handler+0x30>
	}
	return 5;
    1b1e:	85 e0       	ldi	r24, 0x05	; 5
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b24:	0f 90       	pop	r0
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <checkpassword>:

uint8 checkpassword(void){
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	6d 97       	sbiw	r28, 0x1d	; 29
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
	if (verify == 0) {
    1b40:	80 91 41 01 	lds	r24, 0x0141
    1b44:	88 23       	and	r24, r24
    1b46:	09 f0       	breq	.+2      	; 0x1b4a <checkpassword+0x1e>
    1b48:	7f c0       	rjmp	.+254    	; 0x1c48 <checkpassword+0x11c>
		LCD_clearScreen();
    1b4a:	0e 94 b9 19 	call	0x3372	; 0x3372 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,5,"Unmatched");
    1b4e:	20 e6       	ldi	r18, 0x60	; 96
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	65 e0       	ldi	r22, 0x05	; 5
    1b56:	a9 01       	movw	r20, r18
    1b58:	0e 94 7d 19 	call	0x32fa	; 0x32fa <LCD_displayStringRowColumn>
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	aa e7       	ldi	r26, 0x7A	; 122
    1b62:	b4 e4       	ldi	r27, 0x44	; 68
    1b64:	89 8f       	std	Y+25, r24	; 0x19
    1b66:	9a 8f       	std	Y+26, r25	; 0x1a
    1b68:	ab 8f       	std	Y+27, r26	; 0x1b
    1b6a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	4a ef       	ldi	r20, 0xFA	; 250
    1b7a:	54 e4       	ldi	r21, 0x44	; 68
    1b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	8d 8b       	std	Y+21, r24	; 0x15
    1b86:	9e 8b       	std	Y+22, r25	; 0x16
    1b88:	af 8b       	std	Y+23, r26	; 0x17
    1b8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b90:	8f 89       	ldd	r24, Y+23	; 0x17
    1b92:	98 8d       	ldd	r25, Y+24	; 0x18
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e8       	ldi	r20, 0x80	; 128
    1b9a:	5f e3       	ldi	r21, 0x3F	; 63
    1b9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba0:	88 23       	and	r24, r24
    1ba2:	2c f4       	brge	.+10     	; 0x1bae <checkpassword+0x82>
		__ticks = 1;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	9c 8b       	std	Y+20, r25	; 0x14
    1baa:	8b 8b       	std	Y+19, r24	; 0x13
    1bac:	3f c0       	rjmp	.+126    	; 0x1c2c <checkpassword+0x100>
	else if (__tmp > 65535)
    1bae:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	3f ef       	ldi	r19, 0xFF	; 255
    1bba:	4f e7       	ldi	r20, 0x7F	; 127
    1bbc:	57 e4       	ldi	r21, 0x47	; 71
    1bbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bc2:	18 16       	cp	r1, r24
    1bc4:	4c f5       	brge	.+82     	; 0x1c18 <checkpassword+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc6:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e2       	ldi	r20, 0x20	; 32
    1bd4:	51 e4       	ldi	r21, 0x41	; 65
    1bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	bc 01       	movw	r22, r24
    1be0:	cd 01       	movw	r24, r26
    1be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	9c 8b       	std	Y+20, r25	; 0x14
    1bec:	8b 8b       	std	Y+19, r24	; 0x13
    1bee:	0f c0       	rjmp	.+30     	; 0x1c0e <checkpassword+0xe2>
    1bf0:	88 ec       	ldi	r24, 0xC8	; 200
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9a 8b       	std	Y+18, r25	; 0x12
    1bf6:	89 8b       	std	Y+17, r24	; 0x11
    1bf8:	89 89       	ldd	r24, Y+17	; 0x11
    1bfa:	9a 89       	ldd	r25, Y+18	; 0x12
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <checkpassword+0xd0>
    1c00:	9a 8b       	std	Y+18, r25	; 0x12
    1c02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c04:	8b 89       	ldd	r24, Y+19	; 0x13
    1c06:	9c 89       	ldd	r25, Y+20	; 0x14
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	9c 8b       	std	Y+20, r25	; 0x14
    1c0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c10:	9c 89       	ldd	r25, Y+20	; 0x14
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	69 f7       	brne	.-38     	; 0x1bf0 <checkpassword+0xc4>
    1c16:	14 c0       	rjmp	.+40     	; 0x1c40 <checkpassword+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c18:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	9c 8b       	std	Y+20, r25	; 0x14
    1c2a:	8b 8b       	std	Y+19, r24	; 0x13
    1c2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c30:	98 8b       	std	Y+16, r25	; 0x10
    1c32:	8f 87       	std	Y+15, r24	; 0x0f
    1c34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c36:	98 89       	ldd	r25, Y+16	; 0x10
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	f1 f7       	brne	.-4      	; 0x1c38 <checkpassword+0x10c>
    1c3c:	98 8b       	std	Y+16, r25	; 0x10
    1c3e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		return Error_Handler();
    1c40:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <Error_Handler>
    1c44:	8d 8f       	std	Y+29, r24	; 0x1d
    1c46:	8e c0       	rjmp	.+284    	; 0x1d64 <checkpassword+0x238>
	} else if (verify == 1) {
    1c48:	80 91 41 01 	lds	r24, 0x0141
    1c4c:	81 30       	cpi	r24, 0x01	; 1
    1c4e:	09 f0       	breq	.+2      	; 0x1c52 <checkpassword+0x126>
    1c50:	88 c0       	rjmp	.+272    	; 0x1d62 <checkpassword+0x236>
		LCD_clearScreen();
    1c52:	0e 94 b9 19 	call	0x3372	; 0x3372 <LCD_clearScreen>
		LCD_displayString("matched");
    1c56:	85 eb       	ldi	r24, 0xB5	; 181
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	0e 94 12 19 	call	0x3224	; 0x3224 <LCD_displayString>
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	aa e7       	ldi	r26, 0x7A	; 122
    1c64:	b4 e4       	ldi	r27, 0x44	; 68
    1c66:	8b 87       	std	Y+11, r24	; 0x0b
    1c68:	9c 87       	std	Y+12, r25	; 0x0c
    1c6a:	ad 87       	std	Y+13, r26	; 0x0d
    1c6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	4a ef       	ldi	r20, 0xFA	; 250
    1c7c:	54 e4       	ldi	r21, 0x44	; 68
    1c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	8f 83       	std	Y+7, r24	; 0x07
    1c88:	98 87       	std	Y+8, r25	; 0x08
    1c8a:	a9 87       	std	Y+9, r26	; 0x09
    1c8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c90:	78 85       	ldd	r23, Y+8	; 0x08
    1c92:	89 85       	ldd	r24, Y+9	; 0x09
    1c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e8       	ldi	r20, 0x80	; 128
    1c9c:	5f e3       	ldi	r21, 0x3F	; 63
    1c9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ca2:	88 23       	and	r24, r24
    1ca4:	2c f4       	brge	.+10     	; 0x1cb0 <checkpassword+0x184>
		__ticks = 1;
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	9e 83       	std	Y+6, r25	; 0x06
    1cac:	8d 83       	std	Y+5, r24	; 0x05
    1cae:	3f c0       	rjmp	.+126    	; 0x1d2e <checkpassword+0x202>
	else if (__tmp > 65535)
    1cb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb2:	78 85       	ldd	r23, Y+8	; 0x08
    1cb4:	89 85       	ldd	r24, Y+9	; 0x09
    1cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	3f ef       	ldi	r19, 0xFF	; 255
    1cbc:	4f e7       	ldi	r20, 0x7F	; 127
    1cbe:	57 e4       	ldi	r21, 0x47	; 71
    1cc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cc4:	18 16       	cp	r1, r24
    1cc6:	4c f5       	brge	.+82     	; 0x1d1a <checkpassword+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ccc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	40 e2       	ldi	r20, 0x20	; 32
    1cd6:	51 e4       	ldi	r21, 0x41	; 65
    1cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	bc 01       	movw	r22, r24
    1ce2:	cd 01       	movw	r24, r26
    1ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	9e 83       	std	Y+6, r25	; 0x06
    1cee:	8d 83       	std	Y+5, r24	; 0x05
    1cf0:	0f c0       	rjmp	.+30     	; 0x1d10 <checkpassword+0x1e4>
    1cf2:	88 ec       	ldi	r24, 0xC8	; 200
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9c 83       	std	Y+4, r25	; 0x04
    1cf8:	8b 83       	std	Y+3, r24	; 0x03
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <checkpassword+0x1d2>
    1d02:	9c 83       	std	Y+4, r25	; 0x04
    1d04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d06:	8d 81       	ldd	r24, Y+5	; 0x05
    1d08:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	9e 83       	std	Y+6, r25	; 0x06
    1d0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	9e 81       	ldd	r25, Y+6	; 0x06
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	69 f7       	brne	.-38     	; 0x1cf2 <checkpassword+0x1c6>
    1d18:	14 c0       	rjmp	.+40     	; 0x1d42 <checkpassword+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1c:	78 85       	ldd	r23, Y+8	; 0x08
    1d1e:	89 85       	ldd	r24, Y+9	; 0x09
    1d20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
    1d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d30:	9e 81       	ldd	r25, Y+6	; 0x06
    1d32:	9a 83       	std	Y+2, r25	; 0x02
    1d34:	89 83       	std	Y+1, r24	; 0x01
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <checkpassword+0x20e>
    1d3e:	9a 83       	std	Y+2, r25	; 0x02
    1d40:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		attempt=0;
    1d42:	10 92 40 01 	sts	0x0140, r1
		if(function_button=='+') return opendoor;
    1d46:	80 91 3a 01 	lds	r24, 0x013A
    1d4a:	8b 32       	cpi	r24, 0x2B	; 43
    1d4c:	19 f4       	brne	.+6      	; 0x1d54 <checkpassword+0x228>
    1d4e:	85 e0       	ldi	r24, 0x05	; 5
    1d50:	8d 8f       	std	Y+29, r24	; 0x1d
    1d52:	08 c0       	rjmp	.+16     	; 0x1d64 <checkpassword+0x238>
		else if(function_button=='-') return ChangePassword;
    1d54:	80 91 3a 01 	lds	r24, 0x013A
    1d58:	8d 32       	cpi	r24, 0x2D	; 45
    1d5a:	19 f4       	brne	.+6      	; 0x1d62 <checkpassword+0x236>
    1d5c:	86 e0       	ldi	r24, 0x06	; 6
    1d5e:	8d 8f       	std	Y+29, r24	; 0x1d
    1d60:	01 c0       	rjmp	.+2      	; 0x1d64 <checkpassword+0x238>
	}
	return 0;
    1d62:	1d 8e       	std	Y+29, r1	; 0x1d
    1d64:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1d66:	6d 96       	adiw	r28, 0x1d	; 29
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	08 95       	ret

00001d78 <systemlock>:
uint8 systemlock(void){
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	6c 97       	sbiw	r28, 0x1c	; 28
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	de bf       	out	0x3e, r29	; 62
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(8);
    1d8c:	88 e0       	ldi	r24, 0x08	; 8
    1d8e:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <UART_sendByte>
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	a8 e4       	ldi	r26, 0x48	; 72
    1d98:	b3 e4       	ldi	r27, 0x43	; 67
    1d9a:	89 8f       	std	Y+25, r24	; 0x19
    1d9c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d9e:	ab 8f       	std	Y+27, r26	; 0x1b
    1da0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da2:	69 8d       	ldd	r22, Y+25	; 0x19
    1da4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	4a ef       	ldi	r20, 0xFA	; 250
    1db0:	54 e4       	ldi	r21, 0x44	; 68
    1db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	8d 8b       	std	Y+21, r24	; 0x15
    1dbc:	9e 8b       	std	Y+22, r25	; 0x16
    1dbe:	af 8b       	std	Y+23, r26	; 0x17
    1dc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e8       	ldi	r20, 0x80	; 128
    1dd0:	5f e3       	ldi	r21, 0x3F	; 63
    1dd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dd6:	88 23       	and	r24, r24
    1dd8:	2c f4       	brge	.+10     	; 0x1de4 <systemlock+0x6c>
		__ticks = 1;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9c 8b       	std	Y+20, r25	; 0x14
    1de0:	8b 8b       	std	Y+19, r24	; 0x13
    1de2:	3f c0       	rjmp	.+126    	; 0x1e62 <systemlock+0xea>
	else if (__tmp > 65535)
    1de4:	6d 89       	ldd	r22, Y+21	; 0x15
    1de6:	7e 89       	ldd	r23, Y+22	; 0x16
    1de8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dea:	98 8d       	ldd	r25, Y+24	; 0x18
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	3f ef       	ldi	r19, 0xFF	; 255
    1df0:	4f e7       	ldi	r20, 0x7F	; 127
    1df2:	57 e4       	ldi	r21, 0x47	; 71
    1df4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1df8:	18 16       	cp	r1, r24
    1dfa:	4c f5       	brge	.+82     	; 0x1e4e <systemlock+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfc:	69 8d       	ldd	r22, Y+25	; 0x19
    1dfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e2       	ldi	r20, 0x20	; 32
    1e0a:	51 e4       	ldi	r21, 0x41	; 65
    1e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	bc 01       	movw	r22, r24
    1e16:	cd 01       	movw	r24, r26
    1e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9c 8b       	std	Y+20, r25	; 0x14
    1e22:	8b 8b       	std	Y+19, r24	; 0x13
    1e24:	0f c0       	rjmp	.+30     	; 0x1e44 <systemlock+0xcc>
    1e26:	88 ec       	ldi	r24, 0xC8	; 200
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	9a 8b       	std	Y+18, r25	; 0x12
    1e2c:	89 8b       	std	Y+17, r24	; 0x11
    1e2e:	89 89       	ldd	r24, Y+17	; 0x11
    1e30:	9a 89       	ldd	r25, Y+18	; 0x12
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <systemlock+0xba>
    1e36:	9a 8b       	std	Y+18, r25	; 0x12
    1e38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	9c 8b       	std	Y+20, r25	; 0x14
    1e42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e44:	8b 89       	ldd	r24, Y+19	; 0x13
    1e46:	9c 89       	ldd	r25, Y+20	; 0x14
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	69 f7       	brne	.-38     	; 0x1e26 <systemlock+0xae>
    1e4c:	14 c0       	rjmp	.+40     	; 0x1e76 <systemlock+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e50:	7e 89       	ldd	r23, Y+22	; 0x16
    1e52:	8f 89       	ldd	r24, Y+23	; 0x17
    1e54:	98 8d       	ldd	r25, Y+24	; 0x18
    1e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	9c 8b       	std	Y+20, r25	; 0x14
    1e60:	8b 8b       	std	Y+19, r24	; 0x13
    1e62:	8b 89       	ldd	r24, Y+19	; 0x13
    1e64:	9c 89       	ldd	r25, Y+20	; 0x14
    1e66:	98 8b       	std	Y+16, r25	; 0x10
    1e68:	8f 87       	std	Y+15, r24	; 0x0f
    1e6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e6c:	98 89       	ldd	r25, Y+16	; 0x10
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <systemlock+0xf6>
    1e72:	98 8b       	std	Y+16, r25	; 0x10
    1e74:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);

	LCD_clearScreen();
    1e76:	0e 94 b9 19 	call	0x3372	; 0x3372 <LCD_clearScreen>
	LCD_displayString("System Locked ");
    1e7a:	8d eb       	ldi	r24, 0xBD	; 189
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	0e 94 12 19 	call	0x3224	; 0x3224 <LCD_displayString>
	timerfunction(15);
    1e82:	8f e0       	ldi	r24, 0x0F	; 15
    1e84:	0e 94 ed 08 	call	0x11da	; 0x11da <timerfunction>

	Locked = 0;
    1e88:	10 92 42 01 	sts	0x0142, r1
	LCD_clearScreen();
    1e8c:	0e 94 b9 19 	call	0x3372	; 0x3372 <LCD_clearScreen>
	LCD_displayString("System on ");
    1e90:	8c ec       	ldi	r24, 0xCC	; 204
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	0e 94 12 19 	call	0x3224	; 0x3224 <LCD_displayString>
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	aa e7       	ldi	r26, 0x7A	; 122
    1e9e:	b4 e4       	ldi	r27, 0x44	; 68
    1ea0:	8b 87       	std	Y+11, r24	; 0x0b
    1ea2:	9c 87       	std	Y+12, r25	; 0x0c
    1ea4:	ad 87       	std	Y+13, r26	; 0x0d
    1ea6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	4a ef       	ldi	r20, 0xFA	; 250
    1eb6:	54 e4       	ldi	r21, 0x44	; 68
    1eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	8f 83       	std	Y+7, r24	; 0x07
    1ec2:	98 87       	std	Y+8, r25	; 0x08
    1ec4:	a9 87       	std	Y+9, r26	; 0x09
    1ec6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eca:	78 85       	ldd	r23, Y+8	; 0x08
    1ecc:	89 85       	ldd	r24, Y+9	; 0x09
    1ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e8       	ldi	r20, 0x80	; 128
    1ed6:	5f e3       	ldi	r21, 0x3F	; 63
    1ed8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1edc:	88 23       	and	r24, r24
    1ede:	2c f4       	brge	.+10     	; 0x1eea <systemlock+0x172>
		__ticks = 1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9e 83       	std	Y+6, r25	; 0x06
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
    1ee8:	3f c0       	rjmp	.+126    	; 0x1f68 <systemlock+0x1f0>
	else if (__tmp > 65535)
    1eea:	6f 81       	ldd	r22, Y+7	; 0x07
    1eec:	78 85       	ldd	r23, Y+8	; 0x08
    1eee:	89 85       	ldd	r24, Y+9	; 0x09
    1ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	3f ef       	ldi	r19, 0xFF	; 255
    1ef6:	4f e7       	ldi	r20, 0x7F	; 127
    1ef8:	57 e4       	ldi	r21, 0x47	; 71
    1efa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1efe:	18 16       	cp	r1, r24
    1f00:	4c f5       	brge	.+82     	; 0x1f54 <systemlock+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e2       	ldi	r20, 0x20	; 32
    1f10:	51 e4       	ldi	r21, 0x41	; 65
    1f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	9e 83       	std	Y+6, r25	; 0x06
    1f28:	8d 83       	std	Y+5, r24	; 0x05
    1f2a:	0f c0       	rjmp	.+30     	; 0x1f4a <systemlock+0x1d2>
    1f2c:	88 ec       	ldi	r24, 0xC8	; 200
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9c 83       	std	Y+4, r25	; 0x04
    1f32:	8b 83       	std	Y+3, r24	; 0x03
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <systemlock+0x1c0>
    1f3c:	9c 83       	std	Y+4, r25	; 0x04
    1f3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f40:	8d 81       	ldd	r24, Y+5	; 0x05
    1f42:	9e 81       	ldd	r25, Y+6	; 0x06
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	9e 83       	std	Y+6, r25	; 0x06
    1f48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	69 f7       	brne	.-38     	; 0x1f2c <systemlock+0x1b4>
    1f52:	14 c0       	rjmp	.+40     	; 0x1f7c <systemlock+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f54:	6f 81       	ldd	r22, Y+7	; 0x07
    1f56:	78 85       	ldd	r23, Y+8	; 0x08
    1f58:	89 85       	ldd	r24, Y+9	; 0x09
    1f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	9e 83       	std	Y+6, r25	; 0x06
    1f66:	8d 83       	std	Y+5, r24	; 0x05
    1f68:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6c:	9a 83       	std	Y+2, r25	; 0x02
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	9a 81       	ldd	r25, Y+2	; 0x02
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <systemlock+0x1fc>
    1f78:	9a 83       	std	Y+2, r25	; 0x02
    1f7a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

	return Home;
    1f7c:	83 e0       	ldi	r24, 0x03	; 3
}
    1f7e:	6c 96       	adiw	r28, 0x1c	; 28
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	cd bf       	out	0x3d, r28	; 61
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <OpeningDoor>:
uint8 OpeningDoor(void){
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	2e 97       	sbiw	r28, 0x0e	; 14
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1fa4:	0e 94 b9 19 	call	0x3372	; 0x3372 <LCD_clearScreen>
	LCD_displayString("Wait for people ");
    1fa8:	87 ed       	ldi	r24, 0xD7	; 215
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	0e 94 12 19 	call	0x3224	; 0x3224 <LCD_displayString>
	LCD_displayStringRowColumn(1,3,"To enter");
    1fb0:	28 ee       	ldi	r18, 0xE8	; 232
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	63 e0       	ldi	r22, 0x03	; 3
    1fb8:	a9 01       	movw	r20, r18
    1fba:	0e 94 7d 19 	call	0x32fa	; 0x32fa <LCD_displayStringRowColumn>

	UART_sendByte(0);
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <UART_sendByte>
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	a8 e4       	ldi	r26, 0x48	; 72
    1fca:	b3 e4       	ldi	r27, 0x43	; 67
    1fcc:	8b 87       	std	Y+11, r24	; 0x0b
    1fce:	9c 87       	std	Y+12, r25	; 0x0c
    1fd0:	ad 87       	std	Y+13, r26	; 0x0d
    1fd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	4a ef       	ldi	r20, 0xFA	; 250
    1fe2:	54 e4       	ldi	r21, 0x44	; 68
    1fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	8f 83       	std	Y+7, r24	; 0x07
    1fee:	98 87       	std	Y+8, r25	; 0x08
    1ff0:	a9 87       	std	Y+9, r26	; 0x09
    1ff2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff6:	78 85       	ldd	r23, Y+8	; 0x08
    1ff8:	89 85       	ldd	r24, Y+9	; 0x09
    1ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e8       	ldi	r20, 0x80	; 128
    2002:	5f e3       	ldi	r21, 0x3F	; 63
    2004:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2008:	88 23       	and	r24, r24
    200a:	2c f4       	brge	.+10     	; 0x2016 <OpeningDoor+0x86>
		__ticks = 1;
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	9e 83       	std	Y+6, r25	; 0x06
    2012:	8d 83       	std	Y+5, r24	; 0x05
    2014:	3f c0       	rjmp	.+126    	; 0x2094 <OpeningDoor+0x104>
	else if (__tmp > 65535)
    2016:	6f 81       	ldd	r22, Y+7	; 0x07
    2018:	78 85       	ldd	r23, Y+8	; 0x08
    201a:	89 85       	ldd	r24, Y+9	; 0x09
    201c:	9a 85       	ldd	r25, Y+10	; 0x0a
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	3f ef       	ldi	r19, 0xFF	; 255
    2022:	4f e7       	ldi	r20, 0x7F	; 127
    2024:	57 e4       	ldi	r21, 0x47	; 71
    2026:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    202a:	18 16       	cp	r1, r24
    202c:	4c f5       	brge	.+82     	; 0x2080 <OpeningDoor+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2030:	7c 85       	ldd	r23, Y+12	; 0x0c
    2032:	8d 85       	ldd	r24, Y+13	; 0x0d
    2034:	9e 85       	ldd	r25, Y+14	; 0x0e
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e2       	ldi	r20, 0x20	; 32
    203c:	51 e4       	ldi	r21, 0x41	; 65
    203e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	bc 01       	movw	r22, r24
    2048:	cd 01       	movw	r24, r26
    204a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	9e 83       	std	Y+6, r25	; 0x06
    2054:	8d 83       	std	Y+5, r24	; 0x05
    2056:	0f c0       	rjmp	.+30     	; 0x2076 <OpeningDoor+0xe6>
    2058:	88 ec       	ldi	r24, 0xC8	; 200
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	9c 83       	std	Y+4, r25	; 0x04
    205e:	8b 83       	std	Y+3, r24	; 0x03
    2060:	8b 81       	ldd	r24, Y+3	; 0x03
    2062:	9c 81       	ldd	r25, Y+4	; 0x04
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	f1 f7       	brne	.-4      	; 0x2064 <OpeningDoor+0xd4>
    2068:	9c 83       	std	Y+4, r25	; 0x04
    206a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206c:	8d 81       	ldd	r24, Y+5	; 0x05
    206e:	9e 81       	ldd	r25, Y+6	; 0x06
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	9e 83       	std	Y+6, r25	; 0x06
    2074:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2076:	8d 81       	ldd	r24, Y+5	; 0x05
    2078:	9e 81       	ldd	r25, Y+6	; 0x06
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	69 f7       	brne	.-38     	; 0x2058 <OpeningDoor+0xc8>
    207e:	14 c0       	rjmp	.+40     	; 0x20a8 <OpeningDoor+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2080:	6f 81       	ldd	r22, Y+7	; 0x07
    2082:	78 85       	ldd	r23, Y+8	; 0x08
    2084:	89 85       	ldd	r24, Y+9	; 0x09
    2086:	9a 85       	ldd	r25, Y+10	; 0x0a
    2088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	9e 83       	std	Y+6, r25	; 0x06
    2092:	8d 83       	std	Y+5, r24	; 0x05
    2094:	8d 81       	ldd	r24, Y+5	; 0x05
    2096:	9e 81       	ldd	r25, Y+6	; 0x06
    2098:	9a 83       	std	Y+2, r25	; 0x02
    209a:	89 83       	std	Y+1, r24	; 0x01
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	9a 81       	ldd	r25, Y+2	; 0x02
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	f1 f7       	brne	.-4      	; 0x20a0 <OpeningDoor+0x110>
    20a4:	9a 83       	std	Y+2, r25	; 0x02
    20a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);

	while(UART_recieveByte() != 1);
    20a8:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <UART_recieveByte>
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	e1 f7       	brne	.-8      	; 0x20a8 <OpeningDoor+0x118>

	LCD_clearScreen();
    20b0:	0e 94 b9 19 	call	0x3372	; 0x3372 <LCD_clearScreen>
	LCD_displayString("Door is locking ");
    20b4:	81 ef       	ldi	r24, 0xF1	; 241
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	0e 94 12 19 	call	0x3224	; 0x3224 <LCD_displayString>
	timerfunction(15);
    20bc:	8f e0       	ldi	r24, 0x0F	; 15
    20be:	0e 94 ed 08 	call	0x11da	; 0x11da <timerfunction>

	return Home;
    20c2:	83 e0       	ldi	r24, 0x03	; 3
}
    20c4:	2e 96       	adiw	r28, 0x0e	; 14
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <enterandsendpass>:
void enterandsendpass(void){
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	ad 97       	sbiw	r28, 0x2d	; 45
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
	uint8 pressed_Key;
	for (uint8 j= 0; j <= password_length; j++) {
    20ea:	1c a6       	std	Y+44, r1	; 0x2c
    20ec:	02 c1       	rjmp	.+516    	; 0x22f2 <enterandsendpass+0x21c>
		pressed_Key = KEYPAD_getPressedKey();
    20ee:	0e 94 b3 12 	call	0x2566	; 0x2566 <KEYPAD_getPressedKey>
    20f2:	8d a7       	std	Y+45, r24	; 0x2d
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	aa e7       	ldi	r26, 0x7A	; 122
    20fa:	b3 e4       	ldi	r27, 0x43	; 67
    20fc:	8f a3       	std	Y+39, r24	; 0x27
    20fe:	98 a7       	std	Y+40, r25	; 0x28
    2100:	a9 a7       	std	Y+41, r26	; 0x29
    2102:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2104:	6f a1       	ldd	r22, Y+39	; 0x27
    2106:	78 a5       	ldd	r23, Y+40	; 0x28
    2108:	89 a5       	ldd	r24, Y+41	; 0x29
    210a:	9a a5       	ldd	r25, Y+42	; 0x2a
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	4a ef       	ldi	r20, 0xFA	; 250
    2112:	54 e4       	ldi	r21, 0x44	; 68
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	8b a3       	std	Y+35, r24	; 0x23
    211e:	9c a3       	std	Y+36, r25	; 0x24
    2120:	ad a3       	std	Y+37, r26	; 0x25
    2122:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2124:	6b a1       	ldd	r22, Y+35	; 0x23
    2126:	7c a1       	ldd	r23, Y+36	; 0x24
    2128:	8d a1       	ldd	r24, Y+37	; 0x25
    212a:	9e a1       	ldd	r25, Y+38	; 0x26
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e8       	ldi	r20, 0x80	; 128
    2132:	5f e3       	ldi	r21, 0x3F	; 63
    2134:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2138:	88 23       	and	r24, r24
    213a:	2c f4       	brge	.+10     	; 0x2146 <enterandsendpass+0x70>
		__ticks = 1;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	9a a3       	std	Y+34, r25	; 0x22
    2142:	89 a3       	std	Y+33, r24	; 0x21
    2144:	3f c0       	rjmp	.+126    	; 0x21c4 <enterandsendpass+0xee>
	else if (__tmp > 65535)
    2146:	6b a1       	ldd	r22, Y+35	; 0x23
    2148:	7c a1       	ldd	r23, Y+36	; 0x24
    214a:	8d a1       	ldd	r24, Y+37	; 0x25
    214c:	9e a1       	ldd	r25, Y+38	; 0x26
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	3f ef       	ldi	r19, 0xFF	; 255
    2152:	4f e7       	ldi	r20, 0x7F	; 127
    2154:	57 e4       	ldi	r21, 0x47	; 71
    2156:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    215a:	18 16       	cp	r1, r24
    215c:	4c f5       	brge	.+82     	; 0x21b0 <enterandsendpass+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215e:	6f a1       	ldd	r22, Y+39	; 0x27
    2160:	78 a5       	ldd	r23, Y+40	; 0x28
    2162:	89 a5       	ldd	r24, Y+41	; 0x29
    2164:	9a a5       	ldd	r25, Y+42	; 0x2a
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e2       	ldi	r20, 0x20	; 32
    216c:	51 e4       	ldi	r21, 0x41	; 65
    216e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9a a3       	std	Y+34, r25	; 0x22
    2184:	89 a3       	std	Y+33, r24	; 0x21
    2186:	0f c0       	rjmp	.+30     	; 0x21a6 <enterandsendpass+0xd0>
    2188:	88 ec       	ldi	r24, 0xC8	; 200
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	98 a3       	std	Y+32, r25	; 0x20
    218e:	8f 8f       	std	Y+31, r24	; 0x1f
    2190:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2192:	98 a1       	ldd	r25, Y+32	; 0x20
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <enterandsendpass+0xbe>
    2198:	98 a3       	std	Y+32, r25	; 0x20
    219a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219c:	89 a1       	ldd	r24, Y+33	; 0x21
    219e:	9a a1       	ldd	r25, Y+34	; 0x22
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	9a a3       	std	Y+34, r25	; 0x22
    21a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a6:	89 a1       	ldd	r24, Y+33	; 0x21
    21a8:	9a a1       	ldd	r25, Y+34	; 0x22
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	69 f7       	brne	.-38     	; 0x2188 <enterandsendpass+0xb2>
    21ae:	14 c0       	rjmp	.+40     	; 0x21d8 <enterandsendpass+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b0:	6b a1       	ldd	r22, Y+35	; 0x23
    21b2:	7c a1       	ldd	r23, Y+36	; 0x24
    21b4:	8d a1       	ldd	r24, Y+37	; 0x25
    21b6:	9e a1       	ldd	r25, Y+38	; 0x26
    21b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9a a3       	std	Y+34, r25	; 0x22
    21c2:	89 a3       	std	Y+33, r24	; 0x21
    21c4:	89 a1       	ldd	r24, Y+33	; 0x21
    21c6:	9a a1       	ldd	r25, Y+34	; 0x22
    21c8:	9e 8f       	std	Y+30, r25	; 0x1e
    21ca:	8d 8f       	std	Y+29, r24	; 0x1d
    21cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <enterandsendpass+0xfa>
    21d4:	9e 8f       	std	Y+30, r25	; 0x1e
    21d6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(250);
		if(j==password_length){
    21d8:	8c a5       	ldd	r24, Y+44	; 0x2c
    21da:	85 30       	cpi	r24, 0x05	; 5
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <enterandsendpass+0x10a>
    21de:	7b c0       	rjmp	.+246    	; 0x22d6 <enterandsendpass+0x200>
    21e0:	75 c0       	rjmp	.+234    	; 0x22cc <enterandsendpass+0x1f6>
			while(pressed_Key != '='){
				pressed_Key=KEYPAD_getPressedKey();
    21e2:	0e 94 b3 12 	call	0x2566	; 0x2566 <KEYPAD_getPressedKey>
    21e6:	8d a7       	std	Y+45, r24	; 0x2d
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	aa e7       	ldi	r26, 0x7A	; 122
    21ee:	b3 e4       	ldi	r27, 0x43	; 67
    21f0:	89 8f       	std	Y+25, r24	; 0x19
    21f2:	9a 8f       	std	Y+26, r25	; 0x1a
    21f4:	ab 8f       	std	Y+27, r26	; 0x1b
    21f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f8:	69 8d       	ldd	r22, Y+25	; 0x19
    21fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	4a ef       	ldi	r20, 0xFA	; 250
    2206:	54 e4       	ldi	r21, 0x44	; 68
    2208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	8d 8b       	std	Y+21, r24	; 0x15
    2212:	9e 8b       	std	Y+22, r25	; 0x16
    2214:	af 8b       	std	Y+23, r26	; 0x17
    2216:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2218:	6d 89       	ldd	r22, Y+21	; 0x15
    221a:	7e 89       	ldd	r23, Y+22	; 0x16
    221c:	8f 89       	ldd	r24, Y+23	; 0x17
    221e:	98 8d       	ldd	r25, Y+24	; 0x18
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e8       	ldi	r20, 0x80	; 128
    2226:	5f e3       	ldi	r21, 0x3F	; 63
    2228:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    222c:	88 23       	and	r24, r24
    222e:	2c f4       	brge	.+10     	; 0x223a <enterandsendpass+0x164>
		__ticks = 1;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9c 8b       	std	Y+20, r25	; 0x14
    2236:	8b 8b       	std	Y+19, r24	; 0x13
    2238:	3f c0       	rjmp	.+126    	; 0x22b8 <enterandsendpass+0x1e2>
	else if (__tmp > 65535)
    223a:	6d 89       	ldd	r22, Y+21	; 0x15
    223c:	7e 89       	ldd	r23, Y+22	; 0x16
    223e:	8f 89       	ldd	r24, Y+23	; 0x17
    2240:	98 8d       	ldd	r25, Y+24	; 0x18
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	3f ef       	ldi	r19, 0xFF	; 255
    2246:	4f e7       	ldi	r20, 0x7F	; 127
    2248:	57 e4       	ldi	r21, 0x47	; 71
    224a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    224e:	18 16       	cp	r1, r24
    2250:	4c f5       	brge	.+82     	; 0x22a4 <enterandsendpass+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2252:	69 8d       	ldd	r22, Y+25	; 0x19
    2254:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2256:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2258:	9c 8d       	ldd	r25, Y+28	; 0x1c
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e2       	ldi	r20, 0x20	; 32
    2260:	51 e4       	ldi	r21, 0x41	; 65
    2262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	bc 01       	movw	r22, r24
    226c:	cd 01       	movw	r24, r26
    226e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	9c 8b       	std	Y+20, r25	; 0x14
    2278:	8b 8b       	std	Y+19, r24	; 0x13
    227a:	0f c0       	rjmp	.+30     	; 0x229a <enterandsendpass+0x1c4>
    227c:	88 ec       	ldi	r24, 0xC8	; 200
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	9a 8b       	std	Y+18, r25	; 0x12
    2282:	89 8b       	std	Y+17, r24	; 0x11
    2284:	89 89       	ldd	r24, Y+17	; 0x11
    2286:	9a 89       	ldd	r25, Y+18	; 0x12
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <enterandsendpass+0x1b2>
    228c:	9a 8b       	std	Y+18, r25	; 0x12
    228e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2290:	8b 89       	ldd	r24, Y+19	; 0x13
    2292:	9c 89       	ldd	r25, Y+20	; 0x14
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	9c 8b       	std	Y+20, r25	; 0x14
    2298:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229a:	8b 89       	ldd	r24, Y+19	; 0x13
    229c:	9c 89       	ldd	r25, Y+20	; 0x14
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	69 f7       	brne	.-38     	; 0x227c <enterandsendpass+0x1a6>
    22a2:	14 c0       	rjmp	.+40     	; 0x22cc <enterandsendpass+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a4:	6d 89       	ldd	r22, Y+21	; 0x15
    22a6:	7e 89       	ldd	r23, Y+22	; 0x16
    22a8:	8f 89       	ldd	r24, Y+23	; 0x17
    22aa:	98 8d       	ldd	r25, Y+24	; 0x18
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	9c 8b       	std	Y+20, r25	; 0x14
    22b6:	8b 8b       	std	Y+19, r24	; 0x13
    22b8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ba:	9c 89       	ldd	r25, Y+20	; 0x14
    22bc:	98 8b       	std	Y+16, r25	; 0x10
    22be:	8f 87       	std	Y+15, r24	; 0x0f
    22c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c2:	98 89       	ldd	r25, Y+16	; 0x10
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <enterandsendpass+0x1ee>
    22c8:	98 8b       	std	Y+16, r25	; 0x10
    22ca:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 pressed_Key;
	for (uint8 j= 0; j <= password_length; j++) {
		pressed_Key = KEYPAD_getPressedKey();
		_delay_ms(250);
		if(j==password_length){
			while(pressed_Key != '='){
    22cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    22ce:	8d 33       	cpi	r24, 0x3D	; 61
    22d0:	09 f0       	breq	.+2      	; 0x22d4 <enterandsendpass+0x1fe>
    22d2:	87 cf       	rjmp	.-242    	; 0x21e2 <enterandsendpass+0x10c>
    22d4:	12 c0       	rjmp	.+36     	; 0x22fa <enterandsendpass+0x224>
				pressed_Key=KEYPAD_getPressedKey();
				_delay_ms(250);
			}
			break;
		}
		password2[j] = pressed_Key ;
    22d6:	8c a5       	ldd	r24, Y+44	; 0x2c
    22d8:	88 2f       	mov	r24, r24
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	fc 01       	movw	r30, r24
    22de:	e5 5c       	subi	r30, 0xC5	; 197
    22e0:	fe 4f       	sbci	r31, 0xFE	; 254
    22e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    22e4:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    22e6:	8a e2       	ldi	r24, 0x2A	; 42
    22e8:	0e 94 23 17 	call	0x2e46	; 0x2e46 <LCD_displayCharacter>

	return Home;
}
void enterandsendpass(void){
	uint8 pressed_Key;
	for (uint8 j= 0; j <= password_length; j++) {
    22ec:	8c a5       	ldd	r24, Y+44	; 0x2c
    22ee:	8f 5f       	subi	r24, 0xFF	; 255
    22f0:	8c a7       	std	Y+44, r24	; 0x2c
    22f2:	8c a5       	ldd	r24, Y+44	; 0x2c
    22f4:	86 30       	cpi	r24, 0x06	; 6
    22f6:	08 f4       	brcc	.+2      	; 0x22fa <enterandsendpass+0x224>
    22f8:	fa ce       	rjmp	.-524    	; 0x20ee <enterandsendpass+0x18>
		}
		password2[j] = pressed_Key ;
		LCD_displayCharacter('*');
	}

	for (uint8 j = 0; j < password_length; j++) {
    22fa:	1b a6       	std	Y+43, r1	; 0x2b
    22fc:	7e c0       	rjmp	.+252    	; 0x23fa <enterandsendpass+0x324>
		UART_sendByte(password2[j]);
    22fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2300:	88 2f       	mov	r24, r24
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	fc 01       	movw	r30, r24
    2306:	e5 5c       	subi	r30, 0xC5	; 197
    2308:	fe 4f       	sbci	r31, 0xFE	; 254
    230a:	80 81       	ld	r24, Z
    230c:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <UART_sendByte>
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	a8 e4       	ldi	r26, 0x48	; 72
    2316:	b3 e4       	ldi	r27, 0x43	; 67
    2318:	8b 87       	std	Y+11, r24	; 0x0b
    231a:	9c 87       	std	Y+12, r25	; 0x0c
    231c:	ad 87       	std	Y+13, r26	; 0x0d
    231e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2320:	6b 85       	ldd	r22, Y+11	; 0x0b
    2322:	7c 85       	ldd	r23, Y+12	; 0x0c
    2324:	8d 85       	ldd	r24, Y+13	; 0x0d
    2326:	9e 85       	ldd	r25, Y+14	; 0x0e
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	4a ef       	ldi	r20, 0xFA	; 250
    232e:	54 e4       	ldi	r21, 0x44	; 68
    2330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	8f 83       	std	Y+7, r24	; 0x07
    233a:	98 87       	std	Y+8, r25	; 0x08
    233c:	a9 87       	std	Y+9, r26	; 0x09
    233e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2340:	6f 81       	ldd	r22, Y+7	; 0x07
    2342:	78 85       	ldd	r23, Y+8	; 0x08
    2344:	89 85       	ldd	r24, Y+9	; 0x09
    2346:	9a 85       	ldd	r25, Y+10	; 0x0a
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e8       	ldi	r20, 0x80	; 128
    234e:	5f e3       	ldi	r21, 0x3F	; 63
    2350:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2354:	88 23       	and	r24, r24
    2356:	2c f4       	brge	.+10     	; 0x2362 <enterandsendpass+0x28c>
		__ticks = 1;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	9e 83       	std	Y+6, r25	; 0x06
    235e:	8d 83       	std	Y+5, r24	; 0x05
    2360:	3f c0       	rjmp	.+126    	; 0x23e0 <enterandsendpass+0x30a>
	else if (__tmp > 65535)
    2362:	6f 81       	ldd	r22, Y+7	; 0x07
    2364:	78 85       	ldd	r23, Y+8	; 0x08
    2366:	89 85       	ldd	r24, Y+9	; 0x09
    2368:	9a 85       	ldd	r25, Y+10	; 0x0a
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	3f ef       	ldi	r19, 0xFF	; 255
    236e:	4f e7       	ldi	r20, 0x7F	; 127
    2370:	57 e4       	ldi	r21, 0x47	; 71
    2372:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2376:	18 16       	cp	r1, r24
    2378:	4c f5       	brge	.+82     	; 0x23cc <enterandsendpass+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237a:	6b 85       	ldd	r22, Y+11	; 0x0b
    237c:	7c 85       	ldd	r23, Y+12	; 0x0c
    237e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2380:	9e 85       	ldd	r25, Y+14	; 0x0e
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e2       	ldi	r20, 0x20	; 32
    2388:	51 e4       	ldi	r21, 0x41	; 65
    238a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	bc 01       	movw	r22, r24
    2394:	cd 01       	movw	r24, r26
    2396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	9e 83       	std	Y+6, r25	; 0x06
    23a0:	8d 83       	std	Y+5, r24	; 0x05
    23a2:	0f c0       	rjmp	.+30     	; 0x23c2 <enterandsendpass+0x2ec>
    23a4:	88 ec       	ldi	r24, 0xC8	; 200
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	9c 83       	std	Y+4, r25	; 0x04
    23aa:	8b 83       	std	Y+3, r24	; 0x03
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	9c 81       	ldd	r25, Y+4	; 0x04
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	f1 f7       	brne	.-4      	; 0x23b0 <enterandsendpass+0x2da>
    23b4:	9c 83       	std	Y+4, r25	; 0x04
    23b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	9e 81       	ldd	r25, Y+6	; 0x06
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	9e 83       	std	Y+6, r25	; 0x06
    23c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c2:	8d 81       	ldd	r24, Y+5	; 0x05
    23c4:	9e 81       	ldd	r25, Y+6	; 0x06
    23c6:	00 97       	sbiw	r24, 0x00	; 0
    23c8:	69 f7       	brne	.-38     	; 0x23a4 <enterandsendpass+0x2ce>
    23ca:	14 c0       	rjmp	.+40     	; 0x23f4 <enterandsendpass+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23cc:	6f 81       	ldd	r22, Y+7	; 0x07
    23ce:	78 85       	ldd	r23, Y+8	; 0x08
    23d0:	89 85       	ldd	r24, Y+9	; 0x09
    23d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9e 83       	std	Y+6, r25	; 0x06
    23de:	8d 83       	std	Y+5, r24	; 0x05
    23e0:	8d 81       	ldd	r24, Y+5	; 0x05
    23e2:	9e 81       	ldd	r25, Y+6	; 0x06
    23e4:	9a 83       	std	Y+2, r25	; 0x02
    23e6:	89 83       	std	Y+1, r24	; 0x01
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	9a 81       	ldd	r25, Y+2	; 0x02
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <enterandsendpass+0x316>
    23f0:	9a 83       	std	Y+2, r25	; 0x02
    23f2:	89 83       	std	Y+1, r24	; 0x01
		}
		password2[j] = pressed_Key ;
		LCD_displayCharacter('*');
	}

	for (uint8 j = 0; j < password_length; j++) {
    23f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    23f6:	8f 5f       	subi	r24, 0xFF	; 255
    23f8:	8b a7       	std	Y+43, r24	; 0x2b
    23fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    23fc:	85 30       	cpi	r24, 0x05	; 5
    23fe:	08 f4       	brcc	.+2      	; 0x2402 <enterandsendpass+0x32c>
    2400:	7e cf       	rjmp	.-260    	; 0x22fe <enterandsendpass+0x228>
		UART_sendByte(password2[j]);
		_delay_ms(200);
	}


}
    2402:	ad 96       	adiw	r28, 0x2d	; 45
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	cf 91       	pop	r28
    2410:	df 91       	pop	r29
    2412:	08 95       	ret

00002414 <main>:

int main(void){
    2414:	df 93       	push	r29
    2416:	cf 93       	push	r28
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
    241c:	2e 97       	sbiw	r28, 0x0e	; 14
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	f8 94       	cli
    2422:	de bf       	out	0x3e, r29	; 62
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7);
    2428:	af e5       	ldi	r26, 0x5F	; 95
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	ef e5       	ldi	r30, 0x5F	; 95
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	80 68       	ori	r24, 0x80	; 128
    2434:	8c 93       	st	X, r24
	UART_ConfigType uartconfig = {BITS_8,DISABLED , BITS_1 , 9600};
    2436:	9e 01       	movw	r18, r28
    2438:	2f 5f       	subi	r18, 0xFF	; 255
    243a:	3f 4f       	sbci	r19, 0xFF	; 255
    243c:	3b 87       	std	Y+11, r19	; 0x0b
    243e:	2a 87       	std	Y+10, r18	; 0x0a
    2440:	84 e2       	ldi	r24, 0x24	; 36
    2442:	91 e0       	ldi	r25, 0x01	; 1
    2444:	9d 87       	std	Y+13, r25	; 0x0d
    2446:	8c 87       	std	Y+12, r24	; 0x0c
    2448:	97 e0       	ldi	r25, 0x07	; 7
    244a:	9e 87       	std	Y+14, r25	; 0x0e
    244c:	ec 85       	ldd	r30, Y+12	; 0x0c
    244e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2450:	00 80       	ld	r0, Z
    2452:	2c 85       	ldd	r18, Y+12	; 0x0c
    2454:	3d 85       	ldd	r19, Y+13	; 0x0d
    2456:	2f 5f       	subi	r18, 0xFF	; 255
    2458:	3f 4f       	sbci	r19, 0xFF	; 255
    245a:	3d 87       	std	Y+13, r19	; 0x0d
    245c:	2c 87       	std	Y+12, r18	; 0x0c
    245e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2460:	fb 85       	ldd	r31, Y+11	; 0x0b
    2462:	00 82       	st	Z, r0
    2464:	2a 85       	ldd	r18, Y+10	; 0x0a
    2466:	3b 85       	ldd	r19, Y+11	; 0x0b
    2468:	2f 5f       	subi	r18, 0xFF	; 255
    246a:	3f 4f       	sbci	r19, 0xFF	; 255
    246c:	3b 87       	std	Y+11, r19	; 0x0b
    246e:	2a 87       	std	Y+10, r18	; 0x0a
    2470:	3e 85       	ldd	r19, Y+14	; 0x0e
    2472:	31 50       	subi	r19, 0x01	; 1
    2474:	3e 87       	std	Y+14, r19	; 0x0e
    2476:	8e 85       	ldd	r24, Y+14	; 0x0e
    2478:	88 23       	and	r24, r24
    247a:	41 f7       	brne	.-48     	; 0x244c <main+0x38>
	LCD_init();
    247c:	0e 94 98 14 	call	0x2930	; 0x2930 <LCD_init>
	UART_init(&uartconfig);
    2480:	ce 01       	movw	r24, r28
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <UART_init>
	while(1){
		switch(step){
    2488:	80 91 2d 01 	lds	r24, 0x012D
    248c:	e8 2f       	mov	r30, r24
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	f9 87       	std	Y+9, r31	; 0x09
    2492:	e8 87       	std	Y+8, r30	; 0x08
    2494:	28 85       	ldd	r18, Y+8	; 0x08
    2496:	39 85       	ldd	r19, Y+9	; 0x09
    2498:	23 30       	cpi	r18, 0x03	; 3
    249a:	31 05       	cpc	r19, r1
    249c:	e1 f1       	breq	.+120    	; 0x2516 <main+0x102>
    249e:	88 85       	ldd	r24, Y+8	; 0x08
    24a0:	99 85       	ldd	r25, Y+9	; 0x09
    24a2:	84 30       	cpi	r24, 0x04	; 4
    24a4:	91 05       	cpc	r25, r1
    24a6:	7c f4       	brge	.+30     	; 0x24c6 <main+0xb2>
    24a8:	e8 85       	ldd	r30, Y+8	; 0x08
    24aa:	f9 85       	ldd	r31, Y+9	; 0x09
    24ac:	e1 30       	cpi	r30, 0x01	; 1
    24ae:	f1 05       	cpc	r31, r1
    24b0:	29 f1       	breq	.+74     	; 0x24fc <main+0xe8>
    24b2:	28 85       	ldd	r18, Y+8	; 0x08
    24b4:	39 85       	ldd	r19, Y+9	; 0x09
    24b6:	22 30       	cpi	r18, 0x02	; 2
    24b8:	31 05       	cpc	r19, r1
    24ba:	3c f5       	brge	.+78     	; 0x250a <main+0xf6>
    24bc:	88 85       	ldd	r24, Y+8	; 0x08
    24be:	99 85       	ldd	r25, Y+9	; 0x09
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	b9 f0       	breq	.+46     	; 0x24f2 <main+0xde>
    24c4:	e1 cf       	rjmp	.-62     	; 0x2488 <main+0x74>
    24c6:	e8 85       	ldd	r30, Y+8	; 0x08
    24c8:	f9 85       	ldd	r31, Y+9	; 0x09
    24ca:	e5 30       	cpi	r30, 0x05	; 5
    24cc:	f1 05       	cpc	r31, r1
    24ce:	09 f4       	brne	.+2      	; 0x24d2 <main+0xbe>
    24d0:	3d c0       	rjmp	.+122    	; 0x254c <main+0x138>
    24d2:	28 85       	ldd	r18, Y+8	; 0x08
    24d4:	39 85       	ldd	r19, Y+9	; 0x09
    24d6:	25 30       	cpi	r18, 0x05	; 5
    24d8:	31 05       	cpc	r19, r1
    24da:	04 f1       	brlt	.+64     	; 0x251c <main+0x108>
    24dc:	88 85       	ldd	r24, Y+8	; 0x08
    24de:	99 85       	ldd	r25, Y+9	; 0x09
    24e0:	86 30       	cpi	r24, 0x06	; 6
    24e2:	91 05       	cpc	r25, r1
    24e4:	c1 f1       	breq	.+112    	; 0x2556 <main+0x142>
    24e6:	e8 85       	ldd	r30, Y+8	; 0x08
    24e8:	f9 85       	ldd	r31, Y+9	; 0x09
    24ea:	e7 30       	cpi	r30, 0x07	; 7
    24ec:	f1 05       	cpc	r31, r1
    24ee:	b1 f1       	breq	.+108    	; 0x255c <main+0x148>
    24f0:	cb cf       	rjmp	.-106    	; 0x2488 <main+0x74>
		case EnterPass:
			step=enterpassword1();
    24f2:	0e 94 42 09 	call	0x1284	; 0x1284 <enterpassword1>
    24f6:	80 93 2d 01 	sts	0x012D, r24
    24fa:	c6 cf       	rjmp	.-116    	; 0x2488 <main+0x74>
			break;
		case ConfirmPass:
			enterpassword2();
    24fc:	0e 94 13 0b 	call	0x1626	; 0x1626 <enterpassword2>
			step=checkmatch();
    2500:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <checkmatch>
    2504:	80 93 2d 01 	sts	0x012D, r24
    2508:	bf cf       	rjmp	.-130    	; 0x2488 <main+0x74>
			break;
		case SendToMC2:
			sendbyuart();
    250a:	0e 94 3a 0c 	call	0x1874	; 0x1874 <sendbyuart>
			step=Home;
    250e:	83 e0       	ldi	r24, 0x03	; 3
    2510:	80 93 2d 01 	sts	0x012D, r24
    2514:	b9 cf       	rjmp	.-142    	; 0x2488 <main+0x74>
			break;
		case Home:
			DisplayHome();
    2516:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DisplayHome>
    251a:	b6 cf       	rjmp	.-148    	; 0x2488 <main+0x74>
			break;
		case ConfirmWithMC2:
			LCD_clearScreen();
    251c:	0e 94 b9 19 	call	0x3372	; 0x3372 <LCD_clearScreen>
			LCD_displayString("Plz enter ur");
    2520:	82 e0       	ldi	r24, 0x02	; 2
    2522:	91 e0       	ldi	r25, 0x01	; 1
    2524:	0e 94 12 19 	call	0x3224	; 0x3224 <LCD_displayString>
			LCD_displayStringRowColumn(1,0,"pass:");
    2528:	2f e0       	ldi	r18, 0x0F	; 15
    252a:	31 e0       	ldi	r19, 0x01	; 1
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	a9 01       	movw	r20, r18
    2532:	0e 94 7d 19 	call	0x32fa	; 0x32fa <LCD_displayStringRowColumn>
			//			Enter_pass();
			//			Send_pass();
			enterandsendpass();
    2536:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <enterandsendpass>
//			while(UART_recieveByte() != 180);
			verify = UART_recieveByte();
    253a:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <UART_recieveByte>
    253e:	80 93 41 01 	sts	0x0141, r24
			step=checkpassword();
    2542:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <checkpassword>
    2546:	80 93 2d 01 	sts	0x012D, r24
    254a:	9e cf       	rjmp	.-196    	; 0x2488 <main+0x74>
			break;
		case opendoor:
			step=OpeningDoor();
    254c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <OpeningDoor>
    2550:	80 93 2d 01 	sts	0x012D, r24
    2554:	99 cf       	rjmp	.-206    	; 0x2488 <main+0x74>
			break;
		case ChangePassword:
			step=0;
    2556:	10 92 2d 01 	sts	0x012D, r1
    255a:	96 cf       	rjmp	.-212    	; 0x2488 <main+0x74>
			break;
		case wrongpass:
			step=systemlock();
    255c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <systemlock>
    2560:	80 93 2d 01 	sts	0x012D, r24
    2564:	91 cf       	rjmp	.-222    	; 0x2488 <main+0x74>

00002566 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2566:	df 93       	push	r29
    2568:	cf 93       	push	r28
    256a:	cd b7       	in	r28, 0x3d	; 61
    256c:	de b7       	in	r29, 0x3e	; 62
    256e:	6e 97       	sbiw	r28, 0x1e	; 30
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	f8 94       	cli
    2574:	de bf       	out	0x3e, r29	; 62
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	cd bf       	out	0x3d, r28	; 61
    uint8 col, row;

    while (1)
    {
        for (row = 0; row < KEYPAD_NUM_ROWS; row++) /* loop for rows */
    257a:	1d 8e       	std	Y+29, r1	; 0x1d
    257c:	2d c1       	rjmp	.+602    	; 0x27d8 <KEYPAD_getPressedKey+0x272>
        {
            /* Set current row as output and others as input */
            GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2582:	41 e0       	ldi	r20, 0x01	; 1
    2584:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
            GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, KEYPAD_BUTTON_PRESSED);
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

            /* Check columns for pressed key */
            for (col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    2592:	1e 8e       	std	Y+30, r1	; 0x1e
    2594:	9e c0       	rjmp	.+316    	; 0x26d2 <KEYPAD_getPressedKey+0x16c>
            {
                if (GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + col) == KEYPAD_BUTTON_PRESSED)
    2596:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2598:	98 2f       	mov	r25, r24
    259a:	9c 5f       	subi	r25, 0xFC	; 252
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	69 2f       	mov	r22, r25
    25a0:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    25a4:	88 23       	and	r24, r24
    25a6:	09 f0       	breq	.+2      	; 0x25aa <KEYPAD_getPressedKey+0x44>
    25a8:	91 c0       	rjmp	.+290    	; 0x26cc <KEYPAD_getPressedKey+0x166>
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	a0 ea       	ldi	r26, 0xA0	; 160
    25b0:	b1 e4       	ldi	r27, 0x41	; 65
    25b2:	89 8f       	std	Y+25, r24	; 0x19
    25b4:	9a 8f       	std	Y+26, r25	; 0x1a
    25b6:	ab 8f       	std	Y+27, r26	; 0x1b
    25b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ba:	69 8d       	ldd	r22, Y+25	; 0x19
    25bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	4a ef       	ldi	r20, 0xFA	; 250
    25c8:	54 e4       	ldi	r21, 0x44	; 68
    25ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	8d 8b       	std	Y+21, r24	; 0x15
    25d4:	9e 8b       	std	Y+22, r25	; 0x16
    25d6:	af 8b       	std	Y+23, r26	; 0x17
    25d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25da:	6d 89       	ldd	r22, Y+21	; 0x15
    25dc:	7e 89       	ldd	r23, Y+22	; 0x16
    25de:	8f 89       	ldd	r24, Y+23	; 0x17
    25e0:	98 8d       	ldd	r25, Y+24	; 0x18
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e8       	ldi	r20, 0x80	; 128
    25e8:	5f e3       	ldi	r21, 0x3F	; 63
    25ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ee:	88 23       	and	r24, r24
    25f0:	2c f4       	brge	.+10     	; 0x25fc <KEYPAD_getPressedKey+0x96>
		__ticks = 1;
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	9c 8b       	std	Y+20, r25	; 0x14
    25f8:	8b 8b       	std	Y+19, r24	; 0x13
    25fa:	3f c0       	rjmp	.+126    	; 0x267a <KEYPAD_getPressedKey+0x114>
	else if (__tmp > 65535)
    25fc:	6d 89       	ldd	r22, Y+21	; 0x15
    25fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2600:	8f 89       	ldd	r24, Y+23	; 0x17
    2602:	98 8d       	ldd	r25, Y+24	; 0x18
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	3f ef       	ldi	r19, 0xFF	; 255
    2608:	4f e7       	ldi	r20, 0x7F	; 127
    260a:	57 e4       	ldi	r21, 0x47	; 71
    260c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2610:	18 16       	cp	r1, r24
    2612:	4c f5       	brge	.+82     	; 0x2666 <KEYPAD_getPressedKey+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2614:	69 8d       	ldd	r22, Y+25	; 0x19
    2616:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2618:	8b 8d       	ldd	r24, Y+27	; 0x1b
    261a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	40 e2       	ldi	r20, 0x20	; 32
    2622:	51 e4       	ldi	r21, 0x41	; 65
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	bc 01       	movw	r22, r24
    262e:	cd 01       	movw	r24, r26
    2630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	9c 8b       	std	Y+20, r25	; 0x14
    263a:	8b 8b       	std	Y+19, r24	; 0x13
    263c:	0f c0       	rjmp	.+30     	; 0x265c <KEYPAD_getPressedKey+0xf6>
    263e:	88 ec       	ldi	r24, 0xC8	; 200
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	9a 8b       	std	Y+18, r25	; 0x12
    2644:	89 8b       	std	Y+17, r24	; 0x11
    2646:	89 89       	ldd	r24, Y+17	; 0x11
    2648:	9a 89       	ldd	r25, Y+18	; 0x12
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	f1 f7       	brne	.-4      	; 0x264a <KEYPAD_getPressedKey+0xe4>
    264e:	9a 8b       	std	Y+18, r25	; 0x12
    2650:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2652:	8b 89       	ldd	r24, Y+19	; 0x13
    2654:	9c 89       	ldd	r25, Y+20	; 0x14
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	9c 8b       	std	Y+20, r25	; 0x14
    265a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    265c:	8b 89       	ldd	r24, Y+19	; 0x13
    265e:	9c 89       	ldd	r25, Y+20	; 0x14
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	69 f7       	brne	.-38     	; 0x263e <KEYPAD_getPressedKey+0xd8>
    2664:	14 c0       	rjmp	.+40     	; 0x268e <KEYPAD_getPressedKey+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2666:	6d 89       	ldd	r22, Y+21	; 0x15
    2668:	7e 89       	ldd	r23, Y+22	; 0x16
    266a:	8f 89       	ldd	r24, Y+23	; 0x17
    266c:	98 8d       	ldd	r25, Y+24	; 0x18
    266e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	9c 8b       	std	Y+20, r25	; 0x14
    2678:	8b 8b       	std	Y+19, r24	; 0x13
    267a:	8b 89       	ldd	r24, Y+19	; 0x13
    267c:	9c 89       	ldd	r25, Y+20	; 0x14
    267e:	98 8b       	std	Y+16, r25	; 0x10
    2680:	8f 87       	std	Y+15, r24	; 0x0f
    2682:	8f 85       	ldd	r24, Y+15	; 0x0f
    2684:	98 89       	ldd	r25, Y+16	; 0x10
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <KEYPAD_getPressedKey+0x120>
    268a:	98 8b       	std	Y+16, r25	; 0x10
    268c:	8f 87       	std	Y+15, r24	; 0x0f
                {
                    _delay_ms(20); /* Debounce delay */

                    /* Wait until key is released */
                    while (GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + col) == KEYPAD_BUTTON_PRESSED);
    268e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2690:	98 2f       	mov	r25, r24
    2692:	9c 5f       	subi	r25, 0xFC	; 252
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	69 2f       	mov	r22, r25
    2698:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    269c:	88 23       	and	r24, r24
    269e:	b9 f3       	breq	.-18     	; 0x268e <KEYPAD_getPressedKey+0x128>
                        #endif
                    #elif (KEYPAD_NUM_COLS == 4)
                        #ifdef STANDARD_KEYPAD
                            return ((row * KEYPAD_NUM_COLS) + col + 1);
                        #else
                            return KEYPAD_4x4_adjustKeyNumber((row * KEYPAD_NUM_COLS) + col + 1);
    26a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26a2:	88 2f       	mov	r24, r24
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	88 0f       	add	r24, r24
    26a8:	99 1f       	adc	r25, r25
    26aa:	88 0f       	add	r24, r24
    26ac:	99 1f       	adc	r25, r25
    26ae:	98 2f       	mov	r25, r24
    26b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26b2:	89 0f       	add	r24, r25
    26b4:	8f 5f       	subi	r24, 0xFF	; 255
    26b6:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <KEYPAD_4x4_adjustKeyNumber>
            GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
            GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, !KEYPAD_BUTTON_PRESSED); // reset row
            _delay_ms(5); /* Add small delay to fix CPU load issue in Proteus */
        }
    }
}
    26ba:	6e 96       	adiw	r28, 0x1e	; 30
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	08 95       	ret
            /* Set current row as output and others as input */
            GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);
            GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, KEYPAD_BUTTON_PRESSED);

            /* Check columns for pressed key */
            for (col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    26cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26ce:	8f 5f       	subi	r24, 0xFF	; 255
    26d0:	8e 8f       	std	Y+30, r24	; 0x1e
    26d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26d4:	84 30       	cpi	r24, 0x04	; 4
    26d6:	08 f4       	brcc	.+2      	; 0x26da <KEYPAD_getPressedKey+0x174>
    26d8:	5e cf       	rjmp	.-324    	; 0x2596 <KEYPAD_getPressedKey+0x30>
                    #endif
                }
            }

            /* Reset the row back to input after checking */
            GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    26de:	40 e0       	ldi	r20, 0x00	; 0
    26e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
            GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, !KEYPAD_BUTTON_PRESSED); // reset row
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    26e8:	41 e0       	ldi	r20, 0x01	; 1
    26ea:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	a0 ea       	ldi	r26, 0xA0	; 160
    26f4:	b0 e4       	ldi	r27, 0x40	; 64
    26f6:	8b 87       	std	Y+11, r24	; 0x0b
    26f8:	9c 87       	std	Y+12, r25	; 0x0c
    26fa:	ad 87       	std	Y+13, r26	; 0x0d
    26fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2700:	7c 85       	ldd	r23, Y+12	; 0x0c
    2702:	8d 85       	ldd	r24, Y+13	; 0x0d
    2704:	9e 85       	ldd	r25, Y+14	; 0x0e
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	4a ef       	ldi	r20, 0xFA	; 250
    270c:	54 e4       	ldi	r21, 0x44	; 68
    270e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	8f 83       	std	Y+7, r24	; 0x07
    2718:	98 87       	std	Y+8, r25	; 0x08
    271a:	a9 87       	std	Y+9, r26	; 0x09
    271c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    271e:	6f 81       	ldd	r22, Y+7	; 0x07
    2720:	78 85       	ldd	r23, Y+8	; 0x08
    2722:	89 85       	ldd	r24, Y+9	; 0x09
    2724:	9a 85       	ldd	r25, Y+10	; 0x0a
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e8       	ldi	r20, 0x80	; 128
    272c:	5f e3       	ldi	r21, 0x3F	; 63
    272e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2732:	88 23       	and	r24, r24
    2734:	2c f4       	brge	.+10     	; 0x2740 <KEYPAD_getPressedKey+0x1da>
		__ticks = 1;
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
    273e:	3f c0       	rjmp	.+126    	; 0x27be <KEYPAD_getPressedKey+0x258>
	else if (__tmp > 65535)
    2740:	6f 81       	ldd	r22, Y+7	; 0x07
    2742:	78 85       	ldd	r23, Y+8	; 0x08
    2744:	89 85       	ldd	r24, Y+9	; 0x09
    2746:	9a 85       	ldd	r25, Y+10	; 0x0a
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	3f ef       	ldi	r19, 0xFF	; 255
    274c:	4f e7       	ldi	r20, 0x7F	; 127
    274e:	57 e4       	ldi	r21, 0x47	; 71
    2750:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2754:	18 16       	cp	r1, r24
    2756:	4c f5       	brge	.+82     	; 0x27aa <KEYPAD_getPressedKey+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2758:	6b 85       	ldd	r22, Y+11	; 0x0b
    275a:	7c 85       	ldd	r23, Y+12	; 0x0c
    275c:	8d 85       	ldd	r24, Y+13	; 0x0d
    275e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e2       	ldi	r20, 0x20	; 32
    2766:	51 e4       	ldi	r21, 0x41	; 65
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
    2780:	0f c0       	rjmp	.+30     	; 0x27a0 <KEYPAD_getPressedKey+0x23a>
    2782:	88 ec       	ldi	r24, 0xC8	; 200
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	9c 83       	std	Y+4, r25	; 0x04
    2788:	8b 83       	std	Y+3, r24	; 0x03
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	9c 81       	ldd	r25, Y+4	; 0x04
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <KEYPAD_getPressedKey+0x228>
    2792:	9c 83       	std	Y+4, r25	; 0x04
    2794:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	9e 83       	std	Y+6, r25	; 0x06
    279e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a0:	8d 81       	ldd	r24, Y+5	; 0x05
    27a2:	9e 81       	ldd	r25, Y+6	; 0x06
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	69 f7       	brne	.-38     	; 0x2782 <KEYPAD_getPressedKey+0x21c>
    27a8:	14 c0       	rjmp	.+40     	; 0x27d2 <KEYPAD_getPressedKey+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27aa:	6f 81       	ldd	r22, Y+7	; 0x07
    27ac:	78 85       	ldd	r23, Y+8	; 0x08
    27ae:	89 85       	ldd	r24, Y+9	; 0x09
    27b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	9e 83       	std	Y+6, r25	; 0x06
    27bc:	8d 83       	std	Y+5, r24	; 0x05
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	9a 83       	std	Y+2, r25	; 0x02
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <KEYPAD_getPressedKey+0x264>
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	89 83       	std	Y+1, r24	; 0x01
{
    uint8 col, row;

    while (1)
    {
        for (row = 0; row < KEYPAD_NUM_ROWS; row++) /* loop for rows */
    27d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27d4:	8f 5f       	subi	r24, 0xFF	; 255
    27d6:	8d 8f       	std	Y+29, r24	; 0x1d
    27d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27da:	84 30       	cpi	r24, 0x04	; 4
    27dc:	08 f4       	brcc	.+2      	; 0x27e0 <KEYPAD_getPressedKey+0x27a>
    27de:	cf ce       	rjmp	.-610    	; 0x257e <KEYPAD_getPressedKey+0x18>
    27e0:	cc ce       	rjmp	.-616    	; 0x257a <KEYPAD_getPressedKey+0x14>

000027e2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    27e8:	00 d0       	rcall	.+0      	; 0x27ea <KEYPAD_4x4_adjustKeyNumber+0x8>
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
    27ee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    27f0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    27f2:	8a 81       	ldd	r24, Y+2	; 0x02
    27f4:	28 2f       	mov	r18, r24
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	3c 83       	std	Y+4, r19	; 0x04
    27fa:	2b 83       	std	Y+3, r18	; 0x03
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2800:	88 30       	cpi	r24, 0x08	; 8
    2802:	91 05       	cpc	r25, r1
    2804:	09 f4       	brne	.+2      	; 0x2808 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2806:	70 c0       	rjmp	.+224    	; 0x28e8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2808:	2b 81       	ldd	r18, Y+3	; 0x03
    280a:	3c 81       	ldd	r19, Y+4	; 0x04
    280c:	29 30       	cpi	r18, 0x09	; 9
    280e:	31 05       	cpc	r19, r1
    2810:	5c f5       	brge	.+86     	; 0x2868 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	9c 81       	ldd	r25, Y+4	; 0x04
    2816:	84 30       	cpi	r24, 0x04	; 4
    2818:	91 05       	cpc	r25, r1
    281a:	09 f4       	brne	.+2      	; 0x281e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    281c:	59 c0       	rjmp	.+178    	; 0x28d0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    281e:	2b 81       	ldd	r18, Y+3	; 0x03
    2820:	3c 81       	ldd	r19, Y+4	; 0x04
    2822:	25 30       	cpi	r18, 0x05	; 5
    2824:	31 05       	cpc	r19, r1
    2826:	9c f4       	brge	.+38     	; 0x284e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2828:	8b 81       	ldd	r24, Y+3	; 0x03
    282a:	9c 81       	ldd	r25, Y+4	; 0x04
    282c:	82 30       	cpi	r24, 0x02	; 2
    282e:	91 05       	cpc	r25, r1
    2830:	09 f4       	brne	.+2      	; 0x2834 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2832:	48 c0       	rjmp	.+144    	; 0x28c4 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2834:	2b 81       	ldd	r18, Y+3	; 0x03
    2836:	3c 81       	ldd	r19, Y+4	; 0x04
    2838:	23 30       	cpi	r18, 0x03	; 3
    283a:	31 05       	cpc	r19, r1
    283c:	0c f0       	brlt	.+2      	; 0x2840 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    283e:	45 c0       	rjmp	.+138    	; 0x28ca <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2840:	8b 81       	ldd	r24, Y+3	; 0x03
    2842:	9c 81       	ldd	r25, Y+4	; 0x04
    2844:	81 30       	cpi	r24, 0x01	; 1
    2846:	91 05       	cpc	r25, r1
    2848:	09 f4       	brne	.+2      	; 0x284c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    284a:	39 c0       	rjmp	.+114    	; 0x28be <KEYPAD_4x4_adjustKeyNumber+0xdc>
    284c:	67 c0       	rjmp	.+206    	; 0x291c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    284e:	2b 81       	ldd	r18, Y+3	; 0x03
    2850:	3c 81       	ldd	r19, Y+4	; 0x04
    2852:	26 30       	cpi	r18, 0x06	; 6
    2854:	31 05       	cpc	r19, r1
    2856:	09 f4       	brne	.+2      	; 0x285a <KEYPAD_4x4_adjustKeyNumber+0x78>
    2858:	41 c0       	rjmp	.+130    	; 0x28dc <KEYPAD_4x4_adjustKeyNumber+0xfa>
    285a:	8b 81       	ldd	r24, Y+3	; 0x03
    285c:	9c 81       	ldd	r25, Y+4	; 0x04
    285e:	87 30       	cpi	r24, 0x07	; 7
    2860:	91 05       	cpc	r25, r1
    2862:	0c f0       	brlt	.+2      	; 0x2866 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2864:	3e c0       	rjmp	.+124    	; 0x28e2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2866:	37 c0       	rjmp	.+110    	; 0x28d6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2868:	2b 81       	ldd	r18, Y+3	; 0x03
    286a:	3c 81       	ldd	r19, Y+4	; 0x04
    286c:	2c 30       	cpi	r18, 0x0C	; 12
    286e:	31 05       	cpc	r19, r1
    2870:	09 f4       	brne	.+2      	; 0x2874 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2872:	46 c0       	rjmp	.+140    	; 0x2900 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2874:	8b 81       	ldd	r24, Y+3	; 0x03
    2876:	9c 81       	ldd	r25, Y+4	; 0x04
    2878:	8d 30       	cpi	r24, 0x0D	; 13
    287a:	91 05       	cpc	r25, r1
    287c:	5c f4       	brge	.+22     	; 0x2894 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    287e:	2b 81       	ldd	r18, Y+3	; 0x03
    2880:	3c 81       	ldd	r19, Y+4	; 0x04
    2882:	2a 30       	cpi	r18, 0x0A	; 10
    2884:	31 05       	cpc	r19, r1
    2886:	b1 f1       	breq	.+108    	; 0x28f4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2888:	8b 81       	ldd	r24, Y+3	; 0x03
    288a:	9c 81       	ldd	r25, Y+4	; 0x04
    288c:	8b 30       	cpi	r24, 0x0B	; 11
    288e:	91 05       	cpc	r25, r1
    2890:	a4 f5       	brge	.+104    	; 0x28fa <KEYPAD_4x4_adjustKeyNumber+0x118>
    2892:	2d c0       	rjmp	.+90     	; 0x28ee <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2894:	2b 81       	ldd	r18, Y+3	; 0x03
    2896:	3c 81       	ldd	r19, Y+4	; 0x04
    2898:	2e 30       	cpi	r18, 0x0E	; 14
    289a:	31 05       	cpc	r19, r1
    289c:	b9 f1       	breq	.+110    	; 0x290c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    289e:	8b 81       	ldd	r24, Y+3	; 0x03
    28a0:	9c 81       	ldd	r25, Y+4	; 0x04
    28a2:	8e 30       	cpi	r24, 0x0E	; 14
    28a4:	91 05       	cpc	r25, r1
    28a6:	7c f1       	brlt	.+94     	; 0x2906 <KEYPAD_4x4_adjustKeyNumber+0x124>
    28a8:	2b 81       	ldd	r18, Y+3	; 0x03
    28aa:	3c 81       	ldd	r19, Y+4	; 0x04
    28ac:	2f 30       	cpi	r18, 0x0F	; 15
    28ae:	31 05       	cpc	r19, r1
    28b0:	79 f1       	breq	.+94     	; 0x2910 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	9c 81       	ldd	r25, Y+4	; 0x04
    28b6:	80 31       	cpi	r24, 0x10	; 16
    28b8:	91 05       	cpc	r25, r1
    28ba:	69 f1       	breq	.+90     	; 0x2916 <KEYPAD_4x4_adjustKeyNumber+0x134>
    28bc:	2f c0       	rjmp	.+94     	; 0x291c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    28be:	87 e0       	ldi	r24, 0x07	; 7
    28c0:	89 83       	std	Y+1, r24	; 0x01
    28c2:	2e c0       	rjmp	.+92     	; 0x2920 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    28c4:	88 e0       	ldi	r24, 0x08	; 8
    28c6:	89 83       	std	Y+1, r24	; 0x01
    28c8:	2b c0       	rjmp	.+86     	; 0x2920 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    28ca:	89 e0       	ldi	r24, 0x09	; 9
    28cc:	89 83       	std	Y+1, r24	; 0x01
    28ce:	28 c0       	rjmp	.+80     	; 0x2920 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    28d0:	85 e2       	ldi	r24, 0x25	; 37
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	25 c0       	rjmp	.+74     	; 0x2920 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    28d6:	84 e0       	ldi	r24, 0x04	; 4
    28d8:	89 83       	std	Y+1, r24	; 0x01
    28da:	22 c0       	rjmp	.+68     	; 0x2920 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    28dc:	85 e0       	ldi	r24, 0x05	; 5
    28de:	89 83       	std	Y+1, r24	; 0x01
    28e0:	1f c0       	rjmp	.+62     	; 0x2920 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    28e2:	86 e0       	ldi	r24, 0x06	; 6
    28e4:	89 83       	std	Y+1, r24	; 0x01
    28e6:	1c c0       	rjmp	.+56     	; 0x2920 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    28e8:	8a e2       	ldi	r24, 0x2A	; 42
    28ea:	89 83       	std	Y+1, r24	; 0x01
    28ec:	19 c0       	rjmp	.+50     	; 0x2920 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	89 83       	std	Y+1, r24	; 0x01
    28f2:	16 c0       	rjmp	.+44     	; 0x2920 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    28f4:	82 e0       	ldi	r24, 0x02	; 2
    28f6:	89 83       	std	Y+1, r24	; 0x01
    28f8:	13 c0       	rjmp	.+38     	; 0x2920 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    28fa:	83 e0       	ldi	r24, 0x03	; 3
    28fc:	89 83       	std	Y+1, r24	; 0x01
    28fe:	10 c0       	rjmp	.+32     	; 0x2920 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2900:	8d e2       	ldi	r24, 0x2D	; 45
    2902:	89 83       	std	Y+1, r24	; 0x01
    2904:	0d c0       	rjmp	.+26     	; 0x2920 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2906:	8d e0       	ldi	r24, 0x0D	; 13
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	0a c0       	rjmp	.+20     	; 0x2920 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    290c:	19 82       	std	Y+1, r1	; 0x01
    290e:	08 c0       	rjmp	.+16     	; 0x2920 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '=';
    2910:	8d e3       	ldi	r24, 0x3D	; 61
    2912:	89 83       	std	Y+1, r24	; 0x01
    2914:	05 c0       	rjmp	.+10     	; 0x2920 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2916:	8b e2       	ldi	r24, 0x2B	; 43
    2918:	89 83       	std	Y+1, r24	; 0x01
    291a:	02 c0       	rjmp	.+4      	; 0x2920 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    291c:	8a 81       	ldd	r24, Y+2	; 0x02
    291e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2920:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	2e 97       	sbiw	r28, 0x0e	; 14
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	de bf       	out	0x3e, r29	; 62
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2944:	82 e0       	ldi	r24, 0x02	; 2
    2946:	60 e0       	ldi	r22, 0x00	; 0
    2948:	41 e0       	ldi	r20, 0x01	; 1
    294a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    294e:	82 e0       	ldi	r24, 0x02	; 2
    2950:	61 e0       	ldi	r22, 0x01	; 1
    2952:	41 e0       	ldi	r20, 0x01	; 1
    2954:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	a0 ea       	ldi	r26, 0xA0	; 160
    295e:	b1 e4       	ldi	r27, 0x41	; 65
    2960:	8b 87       	std	Y+11, r24	; 0x0b
    2962:	9c 87       	std	Y+12, r25	; 0x0c
    2964:	ad 87       	std	Y+13, r26	; 0x0d
    2966:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2968:	6b 85       	ldd	r22, Y+11	; 0x0b
    296a:	7c 85       	ldd	r23, Y+12	; 0x0c
    296c:	8d 85       	ldd	r24, Y+13	; 0x0d
    296e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	4a ef       	ldi	r20, 0xFA	; 250
    2976:	54 e4       	ldi	r21, 0x44	; 68
    2978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	8f 83       	std	Y+7, r24	; 0x07
    2982:	98 87       	std	Y+8, r25	; 0x08
    2984:	a9 87       	std	Y+9, r26	; 0x09
    2986:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2988:	6f 81       	ldd	r22, Y+7	; 0x07
    298a:	78 85       	ldd	r23, Y+8	; 0x08
    298c:	89 85       	ldd	r24, Y+9	; 0x09
    298e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e8       	ldi	r20, 0x80	; 128
    2996:	5f e3       	ldi	r21, 0x3F	; 63
    2998:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    299c:	88 23       	and	r24, r24
    299e:	2c f4       	brge	.+10     	; 0x29aa <LCD_init+0x7a>
		__ticks = 1;
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	9e 83       	std	Y+6, r25	; 0x06
    29a6:	8d 83       	std	Y+5, r24	; 0x05
    29a8:	3f c0       	rjmp	.+126    	; 0x2a28 <LCD_init+0xf8>
	else if (__tmp > 65535)
    29aa:	6f 81       	ldd	r22, Y+7	; 0x07
    29ac:	78 85       	ldd	r23, Y+8	; 0x08
    29ae:	89 85       	ldd	r24, Y+9	; 0x09
    29b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	3f ef       	ldi	r19, 0xFF	; 255
    29b6:	4f e7       	ldi	r20, 0x7F	; 127
    29b8:	57 e4       	ldi	r21, 0x47	; 71
    29ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29be:	18 16       	cp	r1, r24
    29c0:	4c f5       	brge	.+82     	; 0x2a14 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e2       	ldi	r20, 0x20	; 32
    29d0:	51 e4       	ldi	r21, 0x41	; 65
    29d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	bc 01       	movw	r22, r24
    29dc:	cd 01       	movw	r24, r26
    29de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	9e 83       	std	Y+6, r25	; 0x06
    29e8:	8d 83       	std	Y+5, r24	; 0x05
    29ea:	0f c0       	rjmp	.+30     	; 0x2a0a <LCD_init+0xda>
    29ec:	88 ec       	ldi	r24, 0xC8	; 200
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	9c 83       	std	Y+4, r25	; 0x04
    29f2:	8b 83       	std	Y+3, r24	; 0x03
    29f4:	8b 81       	ldd	r24, Y+3	; 0x03
    29f6:	9c 81       	ldd	r25, Y+4	; 0x04
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	f1 f7       	brne	.-4      	; 0x29f8 <LCD_init+0xc8>
    29fc:	9c 83       	std	Y+4, r25	; 0x04
    29fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a00:	8d 81       	ldd	r24, Y+5	; 0x05
    2a02:	9e 81       	ldd	r25, Y+6	; 0x06
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	9e 83       	std	Y+6, r25	; 0x06
    2a08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0e:	00 97       	sbiw	r24, 0x00	; 0
    2a10:	69 f7       	brne	.-38     	; 0x29ec <LCD_init+0xbc>
    2a12:	14 c0       	rjmp	.+40     	; 0x2a3c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a14:	6f 81       	ldd	r22, Y+7	; 0x07
    2a16:	78 85       	ldd	r23, Y+8	; 0x08
    2a18:	89 85       	ldd	r24, Y+9	; 0x09
    2a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	9e 83       	std	Y+6, r25	; 0x06
    2a26:	8d 83       	std	Y+5, r24	; 0x05
    2a28:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2c:	9a 83       	std	Y+2, r25	; 0x02
    2a2e:	89 83       	std	Y+1, r24	; 0x01
    2a30:	89 81       	ldd	r24, Y+1	; 0x01
    2a32:	9a 81       	ldd	r25, Y+2	; 0x02
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <LCD_init+0x104>
    2a38:	9a 83       	std	Y+2, r25	; 0x02
    2a3a:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	6f ef       	ldi	r22, 0xFF	; 255
    2a40:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2a44:	88 e3       	ldi	r24, 0x38	; 56
    2a46:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2a4a:	8c e0       	ldi	r24, 0x0C	; 12
    2a4c:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_sendCommand>
}
    2a56:	2e 96       	adiw	r28, 0x0e	; 14
    2a58:	0f b6       	in	r0, 0x3f	; 63
    2a5a:	f8 94       	cli
    2a5c:	de bf       	out	0x3e, r29	; 62
    2a5e:	0f be       	out	0x3f, r0	; 63
    2a60:	cd bf       	out	0x3d, r28	; 61
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	08 95       	ret

00002a68 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
    2a70:	e9 97       	sbiw	r28, 0x39	; 57
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	f8 94       	cli
    2a76:	de bf       	out	0x3e, r29	; 62
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2a7e:	82 e0       	ldi	r24, 0x02	; 2
    2a80:	60 e0       	ldi	r22, 0x00	; 0
    2a82:	40 e0       	ldi	r20, 0x00	; 0
    2a84:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	a0 e8       	ldi	r26, 0x80	; 128
    2a8e:	bf e3       	ldi	r27, 0x3F	; 63
    2a90:	8d ab       	std	Y+53, r24	; 0x35
    2a92:	9e ab       	std	Y+54, r25	; 0x36
    2a94:	af ab       	std	Y+55, r26	; 0x37
    2a96:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a98:	6d a9       	ldd	r22, Y+53	; 0x35
    2a9a:	7e a9       	ldd	r23, Y+54	; 0x36
    2a9c:	8f a9       	ldd	r24, Y+55	; 0x37
    2a9e:	98 ad       	ldd	r25, Y+56	; 0x38
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	4a ef       	ldi	r20, 0xFA	; 250
    2aa6:	54 e4       	ldi	r21, 0x44	; 68
    2aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	89 ab       	std	Y+49, r24	; 0x31
    2ab2:	9a ab       	std	Y+50, r25	; 0x32
    2ab4:	ab ab       	std	Y+51, r26	; 0x33
    2ab6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ab8:	69 a9       	ldd	r22, Y+49	; 0x31
    2aba:	7a a9       	ldd	r23, Y+50	; 0x32
    2abc:	8b a9       	ldd	r24, Y+51	; 0x33
    2abe:	9c a9       	ldd	r25, Y+52	; 0x34
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e8       	ldi	r20, 0x80	; 128
    2ac6:	5f e3       	ldi	r21, 0x3F	; 63
    2ac8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2acc:	88 23       	and	r24, r24
    2ace:	2c f4       	brge	.+10     	; 0x2ada <LCD_sendCommand+0x72>
		__ticks = 1;
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	98 ab       	std	Y+48, r25	; 0x30
    2ad6:	8f a7       	std	Y+47, r24	; 0x2f
    2ad8:	3f c0       	rjmp	.+126    	; 0x2b58 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2ada:	69 a9       	ldd	r22, Y+49	; 0x31
    2adc:	7a a9       	ldd	r23, Y+50	; 0x32
    2ade:	8b a9       	ldd	r24, Y+51	; 0x33
    2ae0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	3f ef       	ldi	r19, 0xFF	; 255
    2ae6:	4f e7       	ldi	r20, 0x7F	; 127
    2ae8:	57 e4       	ldi	r21, 0x47	; 71
    2aea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aee:	18 16       	cp	r1, r24
    2af0:	4c f5       	brge	.+82     	; 0x2b44 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af2:	6d a9       	ldd	r22, Y+53	; 0x35
    2af4:	7e a9       	ldd	r23, Y+54	; 0x36
    2af6:	8f a9       	ldd	r24, Y+55	; 0x37
    2af8:	98 ad       	ldd	r25, Y+56	; 0x38
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	40 e2       	ldi	r20, 0x20	; 32
    2b00:	51 e4       	ldi	r21, 0x41	; 65
    2b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	98 ab       	std	Y+48, r25	; 0x30
    2b18:	8f a7       	std	Y+47, r24	; 0x2f
    2b1a:	0f c0       	rjmp	.+30     	; 0x2b3a <LCD_sendCommand+0xd2>
    2b1c:	88 ec       	ldi	r24, 0xC8	; 200
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	9e a7       	std	Y+46, r25	; 0x2e
    2b22:	8d a7       	std	Y+45, r24	; 0x2d
    2b24:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b26:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b28:	01 97       	sbiw	r24, 0x01	; 1
    2b2a:	f1 f7       	brne	.-4      	; 0x2b28 <LCD_sendCommand+0xc0>
    2b2c:	9e a7       	std	Y+46, r25	; 0x2e
    2b2e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b30:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b32:	98 a9       	ldd	r25, Y+48	; 0x30
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	98 ab       	std	Y+48, r25	; 0x30
    2b38:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b3e:	00 97       	sbiw	r24, 0x00	; 0
    2b40:	69 f7       	brne	.-38     	; 0x2b1c <LCD_sendCommand+0xb4>
    2b42:	14 c0       	rjmp	.+40     	; 0x2b6c <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b44:	69 a9       	ldd	r22, Y+49	; 0x31
    2b46:	7a a9       	ldd	r23, Y+50	; 0x32
    2b48:	8b a9       	ldd	r24, Y+51	; 0x33
    2b4a:	9c a9       	ldd	r25, Y+52	; 0x34
    2b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	98 ab       	std	Y+48, r25	; 0x30
    2b56:	8f a7       	std	Y+47, r24	; 0x2f
    2b58:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b5a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b5c:	9c a7       	std	Y+44, r25	; 0x2c
    2b5e:	8b a7       	std	Y+43, r24	; 0x2b
    2b60:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b62:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <LCD_sendCommand+0xfc>
    2b68:	9c a7       	std	Y+44, r25	; 0x2c
    2b6a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2b6c:	82 e0       	ldi	r24, 0x02	; 2
    2b6e:	61 e0       	ldi	r22, 0x01	; 1
    2b70:	41 e0       	ldi	r20, 0x01	; 1
    2b72:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	a0 e8       	ldi	r26, 0x80	; 128
    2b7c:	bf e3       	ldi	r27, 0x3F	; 63
    2b7e:	8f a3       	std	Y+39, r24	; 0x27
    2b80:	98 a7       	std	Y+40, r25	; 0x28
    2b82:	a9 a7       	std	Y+41, r26	; 0x29
    2b84:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b86:	6f a1       	ldd	r22, Y+39	; 0x27
    2b88:	78 a5       	ldd	r23, Y+40	; 0x28
    2b8a:	89 a5       	ldd	r24, Y+41	; 0x29
    2b8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	4a ef       	ldi	r20, 0xFA	; 250
    2b94:	54 e4       	ldi	r21, 0x44	; 68
    2b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	8b a3       	std	Y+35, r24	; 0x23
    2ba0:	9c a3       	std	Y+36, r25	; 0x24
    2ba2:	ad a3       	std	Y+37, r26	; 0x25
    2ba4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ba6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba8:	7c a1       	ldd	r23, Y+36	; 0x24
    2baa:	8d a1       	ldd	r24, Y+37	; 0x25
    2bac:	9e a1       	ldd	r25, Y+38	; 0x26
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	40 e8       	ldi	r20, 0x80	; 128
    2bb4:	5f e3       	ldi	r21, 0x3F	; 63
    2bb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bba:	88 23       	and	r24, r24
    2bbc:	2c f4       	brge	.+10     	; 0x2bc8 <LCD_sendCommand+0x160>
		__ticks = 1;
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	9a a3       	std	Y+34, r25	; 0x22
    2bc4:	89 a3       	std	Y+33, r24	; 0x21
    2bc6:	3f c0       	rjmp	.+126    	; 0x2c46 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2bc8:	6b a1       	ldd	r22, Y+35	; 0x23
    2bca:	7c a1       	ldd	r23, Y+36	; 0x24
    2bcc:	8d a1       	ldd	r24, Y+37	; 0x25
    2bce:	9e a1       	ldd	r25, Y+38	; 0x26
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	3f ef       	ldi	r19, 0xFF	; 255
    2bd4:	4f e7       	ldi	r20, 0x7F	; 127
    2bd6:	57 e4       	ldi	r21, 0x47	; 71
    2bd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bdc:	18 16       	cp	r1, r24
    2bde:	4c f5       	brge	.+82     	; 0x2c32 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be0:	6f a1       	ldd	r22, Y+39	; 0x27
    2be2:	78 a5       	ldd	r23, Y+40	; 0x28
    2be4:	89 a5       	ldd	r24, Y+41	; 0x29
    2be6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	40 e2       	ldi	r20, 0x20	; 32
    2bee:	51 e4       	ldi	r21, 0x41	; 65
    2bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	bc 01       	movw	r22, r24
    2bfa:	cd 01       	movw	r24, r26
    2bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	9a a3       	std	Y+34, r25	; 0x22
    2c06:	89 a3       	std	Y+33, r24	; 0x21
    2c08:	0f c0       	rjmp	.+30     	; 0x2c28 <LCD_sendCommand+0x1c0>
    2c0a:	88 ec       	ldi	r24, 0xC8	; 200
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	98 a3       	std	Y+32, r25	; 0x20
    2c10:	8f 8f       	std	Y+31, r24	; 0x1f
    2c12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c14:	98 a1       	ldd	r25, Y+32	; 0x20
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <LCD_sendCommand+0x1ae>
    2c1a:	98 a3       	std	Y+32, r25	; 0x20
    2c1c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c20:	9a a1       	ldd	r25, Y+34	; 0x22
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	9a a3       	std	Y+34, r25	; 0x22
    2c26:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c28:	89 a1       	ldd	r24, Y+33	; 0x21
    2c2a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c2c:	00 97       	sbiw	r24, 0x00	; 0
    2c2e:	69 f7       	brne	.-38     	; 0x2c0a <LCD_sendCommand+0x1a2>
    2c30:	14 c0       	rjmp	.+40     	; 0x2c5a <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c32:	6b a1       	ldd	r22, Y+35	; 0x23
    2c34:	7c a1       	ldd	r23, Y+36	; 0x24
    2c36:	8d a1       	ldd	r24, Y+37	; 0x25
    2c38:	9e a1       	ldd	r25, Y+38	; 0x26
    2c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	9a a3       	std	Y+34, r25	; 0x22
    2c44:	89 a3       	std	Y+33, r24	; 0x21
    2c46:	89 a1       	ldd	r24, Y+33	; 0x21
    2c48:	9a a1       	ldd	r25, Y+34	; 0x22
    2c4a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c4c:	8d 8f       	std	Y+29, r24	; 0x1d
    2c4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c50:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	f1 f7       	brne	.-4      	; 0x2c52 <LCD_sendCommand+0x1ea>
    2c56:	9e 8f       	std	Y+30, r25	; 0x1e
    2c58:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	69 ad       	ldd	r22, Y+57	; 0x39
    2c5e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	a0 e8       	ldi	r26, 0x80	; 128
    2c68:	bf e3       	ldi	r27, 0x3F	; 63
    2c6a:	89 8f       	std	Y+25, r24	; 0x19
    2c6c:	9a 8f       	std	Y+26, r25	; 0x1a
    2c6e:	ab 8f       	std	Y+27, r26	; 0x1b
    2c70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c72:	69 8d       	ldd	r22, Y+25	; 0x19
    2c74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	4a ef       	ldi	r20, 0xFA	; 250
    2c80:	54 e4       	ldi	r21, 0x44	; 68
    2c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	8d 8b       	std	Y+21, r24	; 0x15
    2c8c:	9e 8b       	std	Y+22, r25	; 0x16
    2c8e:	af 8b       	std	Y+23, r26	; 0x17
    2c90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c92:	6d 89       	ldd	r22, Y+21	; 0x15
    2c94:	7e 89       	ldd	r23, Y+22	; 0x16
    2c96:	8f 89       	ldd	r24, Y+23	; 0x17
    2c98:	98 8d       	ldd	r25, Y+24	; 0x18
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e8       	ldi	r20, 0x80	; 128
    2ca0:	5f e3       	ldi	r21, 0x3F	; 63
    2ca2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ca6:	88 23       	and	r24, r24
    2ca8:	2c f4       	brge	.+10     	; 0x2cb4 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	9c 8b       	std	Y+20, r25	; 0x14
    2cb0:	8b 8b       	std	Y+19, r24	; 0x13
    2cb2:	3f c0       	rjmp	.+126    	; 0x2d32 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2cb4:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb6:	7e 89       	ldd	r23, Y+22	; 0x16
    2cb8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cba:	98 8d       	ldd	r25, Y+24	; 0x18
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	3f ef       	ldi	r19, 0xFF	; 255
    2cc0:	4f e7       	ldi	r20, 0x7F	; 127
    2cc2:	57 e4       	ldi	r21, 0x47	; 71
    2cc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cc8:	18 16       	cp	r1, r24
    2cca:	4c f5       	brge	.+82     	; 0x2d1e <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ccc:	69 8d       	ldd	r22, Y+25	; 0x19
    2cce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	40 e2       	ldi	r20, 0x20	; 32
    2cda:	51 e4       	ldi	r21, 0x41	; 65
    2cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	bc 01       	movw	r22, r24
    2ce6:	cd 01       	movw	r24, r26
    2ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	9c 8b       	std	Y+20, r25	; 0x14
    2cf2:	8b 8b       	std	Y+19, r24	; 0x13
    2cf4:	0f c0       	rjmp	.+30     	; 0x2d14 <LCD_sendCommand+0x2ac>
    2cf6:	88 ec       	ldi	r24, 0xC8	; 200
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	9a 8b       	std	Y+18, r25	; 0x12
    2cfc:	89 8b       	std	Y+17, r24	; 0x11
    2cfe:	89 89       	ldd	r24, Y+17	; 0x11
    2d00:	9a 89       	ldd	r25, Y+18	; 0x12
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	f1 f7       	brne	.-4      	; 0x2d02 <LCD_sendCommand+0x29a>
    2d06:	9a 8b       	std	Y+18, r25	; 0x12
    2d08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	9c 8b       	std	Y+20, r25	; 0x14
    2d12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d14:	8b 89       	ldd	r24, Y+19	; 0x13
    2d16:	9c 89       	ldd	r25, Y+20	; 0x14
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	69 f7       	brne	.-38     	; 0x2cf6 <LCD_sendCommand+0x28e>
    2d1c:	14 c0       	rjmp	.+40     	; 0x2d46 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d20:	7e 89       	ldd	r23, Y+22	; 0x16
    2d22:	8f 89       	ldd	r24, Y+23	; 0x17
    2d24:	98 8d       	ldd	r25, Y+24	; 0x18
    2d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	9c 8b       	std	Y+20, r25	; 0x14
    2d30:	8b 8b       	std	Y+19, r24	; 0x13
    2d32:	8b 89       	ldd	r24, Y+19	; 0x13
    2d34:	9c 89       	ldd	r25, Y+20	; 0x14
    2d36:	98 8b       	std	Y+16, r25	; 0x10
    2d38:	8f 87       	std	Y+15, r24	; 0x0f
    2d3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d3c:	98 89       	ldd	r25, Y+16	; 0x10
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <LCD_sendCommand+0x2d6>
    2d42:	98 8b       	std	Y+16, r25	; 0x10
    2d44:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d46:	82 e0       	ldi	r24, 0x02	; 2
    2d48:	61 e0       	ldi	r22, 0x01	; 1
    2d4a:	40 e0       	ldi	r20, 0x00	; 0
    2d4c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	a0 e8       	ldi	r26, 0x80	; 128
    2d56:	bf e3       	ldi	r27, 0x3F	; 63
    2d58:	8b 87       	std	Y+11, r24	; 0x0b
    2d5a:	9c 87       	std	Y+12, r25	; 0x0c
    2d5c:	ad 87       	std	Y+13, r26	; 0x0d
    2d5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d60:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d62:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	4a ef       	ldi	r20, 0xFA	; 250
    2d6e:	54 e4       	ldi	r21, 0x44	; 68
    2d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	8f 83       	std	Y+7, r24	; 0x07
    2d7a:	98 87       	std	Y+8, r25	; 0x08
    2d7c:	a9 87       	std	Y+9, r26	; 0x09
    2d7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d80:	6f 81       	ldd	r22, Y+7	; 0x07
    2d82:	78 85       	ldd	r23, Y+8	; 0x08
    2d84:	89 85       	ldd	r24, Y+9	; 0x09
    2d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	40 e8       	ldi	r20, 0x80	; 128
    2d8e:	5f e3       	ldi	r21, 0x3F	; 63
    2d90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d94:	88 23       	and	r24, r24
    2d96:	2c f4       	brge	.+10     	; 0x2da2 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	9e 83       	std	Y+6, r25	; 0x06
    2d9e:	8d 83       	std	Y+5, r24	; 0x05
    2da0:	3f c0       	rjmp	.+126    	; 0x2e20 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2da2:	6f 81       	ldd	r22, Y+7	; 0x07
    2da4:	78 85       	ldd	r23, Y+8	; 0x08
    2da6:	89 85       	ldd	r24, Y+9	; 0x09
    2da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	3f ef       	ldi	r19, 0xFF	; 255
    2dae:	4f e7       	ldi	r20, 0x7F	; 127
    2db0:	57 e4       	ldi	r21, 0x47	; 71
    2db2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2db6:	18 16       	cp	r1, r24
    2db8:	4c f5       	brge	.+82     	; 0x2e0c <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	40 e2       	ldi	r20, 0x20	; 32
    2dc8:	51 e4       	ldi	r21, 0x41	; 65
    2dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	bc 01       	movw	r22, r24
    2dd4:	cd 01       	movw	r24, r26
    2dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	9e 83       	std	Y+6, r25	; 0x06
    2de0:	8d 83       	std	Y+5, r24	; 0x05
    2de2:	0f c0       	rjmp	.+30     	; 0x2e02 <LCD_sendCommand+0x39a>
    2de4:	88 ec       	ldi	r24, 0xC8	; 200
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	9c 83       	std	Y+4, r25	; 0x04
    2dea:	8b 83       	std	Y+3, r24	; 0x03
    2dec:	8b 81       	ldd	r24, Y+3	; 0x03
    2dee:	9c 81       	ldd	r25, Y+4	; 0x04
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	f1 f7       	brne	.-4      	; 0x2df0 <LCD_sendCommand+0x388>
    2df4:	9c 83       	std	Y+4, r25	; 0x04
    2df6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfc:	01 97       	sbiw	r24, 0x01	; 1
    2dfe:	9e 83       	std	Y+6, r25	; 0x06
    2e00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e02:	8d 81       	ldd	r24, Y+5	; 0x05
    2e04:	9e 81       	ldd	r25, Y+6	; 0x06
    2e06:	00 97       	sbiw	r24, 0x00	; 0
    2e08:	69 f7       	brne	.-38     	; 0x2de4 <LCD_sendCommand+0x37c>
    2e0a:	14 c0       	rjmp	.+40     	; 0x2e34 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0e:	78 85       	ldd	r23, Y+8	; 0x08
    2e10:	89 85       	ldd	r24, Y+9	; 0x09
    2e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	9e 83       	std	Y+6, r25	; 0x06
    2e1e:	8d 83       	std	Y+5, r24	; 0x05
    2e20:	8d 81       	ldd	r24, Y+5	; 0x05
    2e22:	9e 81       	ldd	r25, Y+6	; 0x06
    2e24:	9a 83       	std	Y+2, r25	; 0x02
    2e26:	89 83       	std	Y+1, r24	; 0x01
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2c:	01 97       	sbiw	r24, 0x01	; 1
    2e2e:	f1 f7       	brne	.-4      	; 0x2e2c <LCD_sendCommand+0x3c4>
    2e30:	9a 83       	std	Y+2, r25	; 0x02
    2e32:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2e34:	e9 96       	adiw	r28, 0x39	; 57
    2e36:	0f b6       	in	r0, 0x3f	; 63
    2e38:	f8 94       	cli
    2e3a:	de bf       	out	0x3e, r29	; 62
    2e3c:	0f be       	out	0x3f, r0	; 63
    2e3e:	cd bf       	out	0x3d, r28	; 61
    2e40:	cf 91       	pop	r28
    2e42:	df 91       	pop	r29
    2e44:	08 95       	ret

00002e46 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2e46:	df 93       	push	r29
    2e48:	cf 93       	push	r28
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	e9 97       	sbiw	r28, 0x39	; 57
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2e5c:	82 e0       	ldi	r24, 0x02	; 2
    2e5e:	60 e0       	ldi	r22, 0x00	; 0
    2e60:	41 e0       	ldi	r20, 0x01	; 1
    2e62:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	a0 e8       	ldi	r26, 0x80	; 128
    2e6c:	bf e3       	ldi	r27, 0x3F	; 63
    2e6e:	8d ab       	std	Y+53, r24	; 0x35
    2e70:	9e ab       	std	Y+54, r25	; 0x36
    2e72:	af ab       	std	Y+55, r26	; 0x37
    2e74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e76:	6d a9       	ldd	r22, Y+53	; 0x35
    2e78:	7e a9       	ldd	r23, Y+54	; 0x36
    2e7a:	8f a9       	ldd	r24, Y+55	; 0x37
    2e7c:	98 ad       	ldd	r25, Y+56	; 0x38
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	4a ef       	ldi	r20, 0xFA	; 250
    2e84:	54 e4       	ldi	r21, 0x44	; 68
    2e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	89 ab       	std	Y+49, r24	; 0x31
    2e90:	9a ab       	std	Y+50, r25	; 0x32
    2e92:	ab ab       	std	Y+51, r26	; 0x33
    2e94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e96:	69 a9       	ldd	r22, Y+49	; 0x31
    2e98:	7a a9       	ldd	r23, Y+50	; 0x32
    2e9a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e9c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e8       	ldi	r20, 0x80	; 128
    2ea4:	5f e3       	ldi	r21, 0x3F	; 63
    2ea6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eaa:	88 23       	and	r24, r24
    2eac:	2c f4       	brge	.+10     	; 0x2eb8 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	98 ab       	std	Y+48, r25	; 0x30
    2eb4:	8f a7       	std	Y+47, r24	; 0x2f
    2eb6:	3f c0       	rjmp	.+126    	; 0x2f36 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2eb8:	69 a9       	ldd	r22, Y+49	; 0x31
    2eba:	7a a9       	ldd	r23, Y+50	; 0x32
    2ebc:	8b a9       	ldd	r24, Y+51	; 0x33
    2ebe:	9c a9       	ldd	r25, Y+52	; 0x34
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	3f ef       	ldi	r19, 0xFF	; 255
    2ec4:	4f e7       	ldi	r20, 0x7F	; 127
    2ec6:	57 e4       	ldi	r21, 0x47	; 71
    2ec8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ecc:	18 16       	cp	r1, r24
    2ece:	4c f5       	brge	.+82     	; 0x2f22 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed0:	6d a9       	ldd	r22, Y+53	; 0x35
    2ed2:	7e a9       	ldd	r23, Y+54	; 0x36
    2ed4:	8f a9       	ldd	r24, Y+55	; 0x37
    2ed6:	98 ad       	ldd	r25, Y+56	; 0x38
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	40 e2       	ldi	r20, 0x20	; 32
    2ede:	51 e4       	ldi	r21, 0x41	; 65
    2ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	bc 01       	movw	r22, r24
    2eea:	cd 01       	movw	r24, r26
    2eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	98 ab       	std	Y+48, r25	; 0x30
    2ef6:	8f a7       	std	Y+47, r24	; 0x2f
    2ef8:	0f c0       	rjmp	.+30     	; 0x2f18 <LCD_displayCharacter+0xd2>
    2efa:	88 ec       	ldi	r24, 0xC8	; 200
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	9e a7       	std	Y+46, r25	; 0x2e
    2f00:	8d a7       	std	Y+45, r24	; 0x2d
    2f02:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f04:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	f1 f7       	brne	.-4      	; 0x2f06 <LCD_displayCharacter+0xc0>
    2f0a:	9e a7       	std	Y+46, r25	; 0x2e
    2f0c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f10:	98 a9       	ldd	r25, Y+48	; 0x30
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	98 ab       	std	Y+48, r25	; 0x30
    2f16:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f18:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f1a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f1c:	00 97       	sbiw	r24, 0x00	; 0
    2f1e:	69 f7       	brne	.-38     	; 0x2efa <LCD_displayCharacter+0xb4>
    2f20:	14 c0       	rjmp	.+40     	; 0x2f4a <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f22:	69 a9       	ldd	r22, Y+49	; 0x31
    2f24:	7a a9       	ldd	r23, Y+50	; 0x32
    2f26:	8b a9       	ldd	r24, Y+51	; 0x33
    2f28:	9c a9       	ldd	r25, Y+52	; 0x34
    2f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	98 ab       	std	Y+48, r25	; 0x30
    2f34:	8f a7       	std	Y+47, r24	; 0x2f
    2f36:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f38:	98 a9       	ldd	r25, Y+48	; 0x30
    2f3a:	9c a7       	std	Y+44, r25	; 0x2c
    2f3c:	8b a7       	std	Y+43, r24	; 0x2b
    2f3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f40:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f42:	01 97       	sbiw	r24, 0x01	; 1
    2f44:	f1 f7       	brne	.-4      	; 0x2f42 <LCD_displayCharacter+0xfc>
    2f46:	9c a7       	std	Y+44, r25	; 0x2c
    2f48:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2f4a:	82 e0       	ldi	r24, 0x02	; 2
    2f4c:	61 e0       	ldi	r22, 0x01	; 1
    2f4e:	41 e0       	ldi	r20, 0x01	; 1
    2f50:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2f54:	80 e0       	ldi	r24, 0x00	; 0
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	a0 e8       	ldi	r26, 0x80	; 128
    2f5a:	bf e3       	ldi	r27, 0x3F	; 63
    2f5c:	8f a3       	std	Y+39, r24	; 0x27
    2f5e:	98 a7       	std	Y+40, r25	; 0x28
    2f60:	a9 a7       	std	Y+41, r26	; 0x29
    2f62:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f64:	6f a1       	ldd	r22, Y+39	; 0x27
    2f66:	78 a5       	ldd	r23, Y+40	; 0x28
    2f68:	89 a5       	ldd	r24, Y+41	; 0x29
    2f6a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	4a ef       	ldi	r20, 0xFA	; 250
    2f72:	54 e4       	ldi	r21, 0x44	; 68
    2f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	8b a3       	std	Y+35, r24	; 0x23
    2f7e:	9c a3       	std	Y+36, r25	; 0x24
    2f80:	ad a3       	std	Y+37, r26	; 0x25
    2f82:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f84:	6b a1       	ldd	r22, Y+35	; 0x23
    2f86:	7c a1       	ldd	r23, Y+36	; 0x24
    2f88:	8d a1       	ldd	r24, Y+37	; 0x25
    2f8a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	40 e8       	ldi	r20, 0x80	; 128
    2f92:	5f e3       	ldi	r21, 0x3F	; 63
    2f94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f98:	88 23       	and	r24, r24
    2f9a:	2c f4       	brge	.+10     	; 0x2fa6 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	9a a3       	std	Y+34, r25	; 0x22
    2fa2:	89 a3       	std	Y+33, r24	; 0x21
    2fa4:	3f c0       	rjmp	.+126    	; 0x3024 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2fa6:	6b a1       	ldd	r22, Y+35	; 0x23
    2fa8:	7c a1       	ldd	r23, Y+36	; 0x24
    2faa:	8d a1       	ldd	r24, Y+37	; 0x25
    2fac:	9e a1       	ldd	r25, Y+38	; 0x26
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	3f ef       	ldi	r19, 0xFF	; 255
    2fb2:	4f e7       	ldi	r20, 0x7F	; 127
    2fb4:	57 e4       	ldi	r21, 0x47	; 71
    2fb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fba:	18 16       	cp	r1, r24
    2fbc:	4c f5       	brge	.+82     	; 0x3010 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbe:	6f a1       	ldd	r22, Y+39	; 0x27
    2fc0:	78 a5       	ldd	r23, Y+40	; 0x28
    2fc2:	89 a5       	ldd	r24, Y+41	; 0x29
    2fc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	40 e2       	ldi	r20, 0x20	; 32
    2fcc:	51 e4       	ldi	r21, 0x41	; 65
    2fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	bc 01       	movw	r22, r24
    2fd8:	cd 01       	movw	r24, r26
    2fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	9a a3       	std	Y+34, r25	; 0x22
    2fe4:	89 a3       	std	Y+33, r24	; 0x21
    2fe6:	0f c0       	rjmp	.+30     	; 0x3006 <LCD_displayCharacter+0x1c0>
    2fe8:	88 ec       	ldi	r24, 0xC8	; 200
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	98 a3       	std	Y+32, r25	; 0x20
    2fee:	8f 8f       	std	Y+31, r24	; 0x1f
    2ff0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ff2:	98 a1       	ldd	r25, Y+32	; 0x20
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	f1 f7       	brne	.-4      	; 0x2ff4 <LCD_displayCharacter+0x1ae>
    2ff8:	98 a3       	std	Y+32, r25	; 0x20
    2ffa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffc:	89 a1       	ldd	r24, Y+33	; 0x21
    2ffe:	9a a1       	ldd	r25, Y+34	; 0x22
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	9a a3       	std	Y+34, r25	; 0x22
    3004:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3006:	89 a1       	ldd	r24, Y+33	; 0x21
    3008:	9a a1       	ldd	r25, Y+34	; 0x22
    300a:	00 97       	sbiw	r24, 0x00	; 0
    300c:	69 f7       	brne	.-38     	; 0x2fe8 <LCD_displayCharacter+0x1a2>
    300e:	14 c0       	rjmp	.+40     	; 0x3038 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3010:	6b a1       	ldd	r22, Y+35	; 0x23
    3012:	7c a1       	ldd	r23, Y+36	; 0x24
    3014:	8d a1       	ldd	r24, Y+37	; 0x25
    3016:	9e a1       	ldd	r25, Y+38	; 0x26
    3018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	9a a3       	std	Y+34, r25	; 0x22
    3022:	89 a3       	std	Y+33, r24	; 0x21
    3024:	89 a1       	ldd	r24, Y+33	; 0x21
    3026:	9a a1       	ldd	r25, Y+34	; 0x22
    3028:	9e 8f       	std	Y+30, r25	; 0x1e
    302a:	8d 8f       	std	Y+29, r24	; 0x1d
    302c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    302e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3030:	01 97       	sbiw	r24, 0x01	; 1
    3032:	f1 f7       	brne	.-4      	; 0x3030 <LCD_displayCharacter+0x1ea>
    3034:	9e 8f       	std	Y+30, r25	; 0x1e
    3036:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	69 ad       	ldd	r22, Y+57	; 0x39
    303c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	a0 e8       	ldi	r26, 0x80	; 128
    3046:	bf e3       	ldi	r27, 0x3F	; 63
    3048:	89 8f       	std	Y+25, r24	; 0x19
    304a:	9a 8f       	std	Y+26, r25	; 0x1a
    304c:	ab 8f       	std	Y+27, r26	; 0x1b
    304e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3050:	69 8d       	ldd	r22, Y+25	; 0x19
    3052:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3054:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3056:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	4a ef       	ldi	r20, 0xFA	; 250
    305e:	54 e4       	ldi	r21, 0x44	; 68
    3060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	8d 8b       	std	Y+21, r24	; 0x15
    306a:	9e 8b       	std	Y+22, r25	; 0x16
    306c:	af 8b       	std	Y+23, r26	; 0x17
    306e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3070:	6d 89       	ldd	r22, Y+21	; 0x15
    3072:	7e 89       	ldd	r23, Y+22	; 0x16
    3074:	8f 89       	ldd	r24, Y+23	; 0x17
    3076:	98 8d       	ldd	r25, Y+24	; 0x18
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	40 e8       	ldi	r20, 0x80	; 128
    307e:	5f e3       	ldi	r21, 0x3F	; 63
    3080:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3084:	88 23       	and	r24, r24
    3086:	2c f4       	brge	.+10     	; 0x3092 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	9c 8b       	std	Y+20, r25	; 0x14
    308e:	8b 8b       	std	Y+19, r24	; 0x13
    3090:	3f c0       	rjmp	.+126    	; 0x3110 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    3092:	6d 89       	ldd	r22, Y+21	; 0x15
    3094:	7e 89       	ldd	r23, Y+22	; 0x16
    3096:	8f 89       	ldd	r24, Y+23	; 0x17
    3098:	98 8d       	ldd	r25, Y+24	; 0x18
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	3f ef       	ldi	r19, 0xFF	; 255
    309e:	4f e7       	ldi	r20, 0x7F	; 127
    30a0:	57 e4       	ldi	r21, 0x47	; 71
    30a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30a6:	18 16       	cp	r1, r24
    30a8:	4c f5       	brge	.+82     	; 0x30fc <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30aa:	69 8d       	ldd	r22, Y+25	; 0x19
    30ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	40 e2       	ldi	r20, 0x20	; 32
    30b8:	51 e4       	ldi	r21, 0x41	; 65
    30ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	bc 01       	movw	r22, r24
    30c4:	cd 01       	movw	r24, r26
    30c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	9c 8b       	std	Y+20, r25	; 0x14
    30d0:	8b 8b       	std	Y+19, r24	; 0x13
    30d2:	0f c0       	rjmp	.+30     	; 0x30f2 <LCD_displayCharacter+0x2ac>
    30d4:	88 ec       	ldi	r24, 0xC8	; 200
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	9a 8b       	std	Y+18, r25	; 0x12
    30da:	89 8b       	std	Y+17, r24	; 0x11
    30dc:	89 89       	ldd	r24, Y+17	; 0x11
    30de:	9a 89       	ldd	r25, Y+18	; 0x12
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	f1 f7       	brne	.-4      	; 0x30e0 <LCD_displayCharacter+0x29a>
    30e4:	9a 8b       	std	Y+18, r25	; 0x12
    30e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e8:	8b 89       	ldd	r24, Y+19	; 0x13
    30ea:	9c 89       	ldd	r25, Y+20	; 0x14
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	9c 8b       	std	Y+20, r25	; 0x14
    30f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f2:	8b 89       	ldd	r24, Y+19	; 0x13
    30f4:	9c 89       	ldd	r25, Y+20	; 0x14
    30f6:	00 97       	sbiw	r24, 0x00	; 0
    30f8:	69 f7       	brne	.-38     	; 0x30d4 <LCD_displayCharacter+0x28e>
    30fa:	14 c0       	rjmp	.+40     	; 0x3124 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30fc:	6d 89       	ldd	r22, Y+21	; 0x15
    30fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3100:	8f 89       	ldd	r24, Y+23	; 0x17
    3102:	98 8d       	ldd	r25, Y+24	; 0x18
    3104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	9c 8b       	std	Y+20, r25	; 0x14
    310e:	8b 8b       	std	Y+19, r24	; 0x13
    3110:	8b 89       	ldd	r24, Y+19	; 0x13
    3112:	9c 89       	ldd	r25, Y+20	; 0x14
    3114:	98 8b       	std	Y+16, r25	; 0x10
    3116:	8f 87       	std	Y+15, r24	; 0x0f
    3118:	8f 85       	ldd	r24, Y+15	; 0x0f
    311a:	98 89       	ldd	r25, Y+16	; 0x10
    311c:	01 97       	sbiw	r24, 0x01	; 1
    311e:	f1 f7       	brne	.-4      	; 0x311c <LCD_displayCharacter+0x2d6>
    3120:	98 8b       	std	Y+16, r25	; 0x10
    3122:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3124:	82 e0       	ldi	r24, 0x02	; 2
    3126:	61 e0       	ldi	r22, 0x01	; 1
    3128:	40 e0       	ldi	r20, 0x00	; 0
    312a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	a0 e8       	ldi	r26, 0x80	; 128
    3134:	bf e3       	ldi	r27, 0x3F	; 63
    3136:	8b 87       	std	Y+11, r24	; 0x0b
    3138:	9c 87       	std	Y+12, r25	; 0x0c
    313a:	ad 87       	std	Y+13, r26	; 0x0d
    313c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3140:	7c 85       	ldd	r23, Y+12	; 0x0c
    3142:	8d 85       	ldd	r24, Y+13	; 0x0d
    3144:	9e 85       	ldd	r25, Y+14	; 0x0e
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	4a ef       	ldi	r20, 0xFA	; 250
    314c:	54 e4       	ldi	r21, 0x44	; 68
    314e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3152:	dc 01       	movw	r26, r24
    3154:	cb 01       	movw	r24, r22
    3156:	8f 83       	std	Y+7, r24	; 0x07
    3158:	98 87       	std	Y+8, r25	; 0x08
    315a:	a9 87       	std	Y+9, r26	; 0x09
    315c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    315e:	6f 81       	ldd	r22, Y+7	; 0x07
    3160:	78 85       	ldd	r23, Y+8	; 0x08
    3162:	89 85       	ldd	r24, Y+9	; 0x09
    3164:	9a 85       	ldd	r25, Y+10	; 0x0a
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	40 e8       	ldi	r20, 0x80	; 128
    316c:	5f e3       	ldi	r21, 0x3F	; 63
    316e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3172:	88 23       	and	r24, r24
    3174:	2c f4       	brge	.+10     	; 0x3180 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	9e 83       	std	Y+6, r25	; 0x06
    317c:	8d 83       	std	Y+5, r24	; 0x05
    317e:	3f c0       	rjmp	.+126    	; 0x31fe <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    3180:	6f 81       	ldd	r22, Y+7	; 0x07
    3182:	78 85       	ldd	r23, Y+8	; 0x08
    3184:	89 85       	ldd	r24, Y+9	; 0x09
    3186:	9a 85       	ldd	r25, Y+10	; 0x0a
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	3f ef       	ldi	r19, 0xFF	; 255
    318c:	4f e7       	ldi	r20, 0x7F	; 127
    318e:	57 e4       	ldi	r21, 0x47	; 71
    3190:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3194:	18 16       	cp	r1, r24
    3196:	4c f5       	brge	.+82     	; 0x31ea <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3198:	6b 85       	ldd	r22, Y+11	; 0x0b
    319a:	7c 85       	ldd	r23, Y+12	; 0x0c
    319c:	8d 85       	ldd	r24, Y+13	; 0x0d
    319e:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	40 e2       	ldi	r20, 0x20	; 32
    31a6:	51 e4       	ldi	r21, 0x41	; 65
    31a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ac:	dc 01       	movw	r26, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	bc 01       	movw	r22, r24
    31b2:	cd 01       	movw	r24, r26
    31b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	9e 83       	std	Y+6, r25	; 0x06
    31be:	8d 83       	std	Y+5, r24	; 0x05
    31c0:	0f c0       	rjmp	.+30     	; 0x31e0 <LCD_displayCharacter+0x39a>
    31c2:	88 ec       	ldi	r24, 0xC8	; 200
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	9c 83       	std	Y+4, r25	; 0x04
    31c8:	8b 83       	std	Y+3, r24	; 0x03
    31ca:	8b 81       	ldd	r24, Y+3	; 0x03
    31cc:	9c 81       	ldd	r25, Y+4	; 0x04
    31ce:	01 97       	sbiw	r24, 0x01	; 1
    31d0:	f1 f7       	brne	.-4      	; 0x31ce <LCD_displayCharacter+0x388>
    31d2:	9c 83       	std	Y+4, r25	; 0x04
    31d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d6:	8d 81       	ldd	r24, Y+5	; 0x05
    31d8:	9e 81       	ldd	r25, Y+6	; 0x06
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	9e 83       	std	Y+6, r25	; 0x06
    31de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e0:	8d 81       	ldd	r24, Y+5	; 0x05
    31e2:	9e 81       	ldd	r25, Y+6	; 0x06
    31e4:	00 97       	sbiw	r24, 0x00	; 0
    31e6:	69 f7       	brne	.-38     	; 0x31c2 <LCD_displayCharacter+0x37c>
    31e8:	14 c0       	rjmp	.+40     	; 0x3212 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ea:	6f 81       	ldd	r22, Y+7	; 0x07
    31ec:	78 85       	ldd	r23, Y+8	; 0x08
    31ee:	89 85       	ldd	r24, Y+9	; 0x09
    31f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	9e 83       	std	Y+6, r25	; 0x06
    31fc:	8d 83       	std	Y+5, r24	; 0x05
    31fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3200:	9e 81       	ldd	r25, Y+6	; 0x06
    3202:	9a 83       	std	Y+2, r25	; 0x02
    3204:	89 83       	std	Y+1, r24	; 0x01
    3206:	89 81       	ldd	r24, Y+1	; 0x01
    3208:	9a 81       	ldd	r25, Y+2	; 0x02
    320a:	01 97       	sbiw	r24, 0x01	; 1
    320c:	f1 f7       	brne	.-4      	; 0x320a <LCD_displayCharacter+0x3c4>
    320e:	9a 83       	std	Y+2, r25	; 0x02
    3210:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3212:	e9 96       	adiw	r28, 0x39	; 57
    3214:	0f b6       	in	r0, 0x3f	; 63
    3216:	f8 94       	cli
    3218:	de bf       	out	0x3e, r29	; 62
    321a:	0f be       	out	0x3f, r0	; 63
    321c:	cd bf       	out	0x3d, r28	; 61
    321e:	cf 91       	pop	r28
    3220:	df 91       	pop	r29
    3222:	08 95       	ret

00003224 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3224:	df 93       	push	r29
    3226:	cf 93       	push	r28
    3228:	00 d0       	rcall	.+0      	; 0x322a <LCD_displayString+0x6>
    322a:	0f 92       	push	r0
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
    3230:	9b 83       	std	Y+3, r25	; 0x03
    3232:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3234:	19 82       	std	Y+1, r1	; 0x01
    3236:	0e c0       	rjmp	.+28     	; 0x3254 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3238:	89 81       	ldd	r24, Y+1	; 0x01
    323a:	28 2f       	mov	r18, r24
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	8a 81       	ldd	r24, Y+2	; 0x02
    3240:	9b 81       	ldd	r25, Y+3	; 0x03
    3242:	fc 01       	movw	r30, r24
    3244:	e2 0f       	add	r30, r18
    3246:	f3 1f       	adc	r31, r19
    3248:	80 81       	ld	r24, Z
    324a:	0e 94 23 17 	call	0x2e46	; 0x2e46 <LCD_displayCharacter>
		i++;
    324e:	89 81       	ldd	r24, Y+1	; 0x01
    3250:	8f 5f       	subi	r24, 0xFF	; 255
    3252:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3254:	89 81       	ldd	r24, Y+1	; 0x01
    3256:	28 2f       	mov	r18, r24
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	8a 81       	ldd	r24, Y+2	; 0x02
    325c:	9b 81       	ldd	r25, Y+3	; 0x03
    325e:	fc 01       	movw	r30, r24
    3260:	e2 0f       	add	r30, r18
    3262:	f3 1f       	adc	r31, r19
    3264:	80 81       	ld	r24, Z
    3266:	88 23       	and	r24, r24
    3268:	39 f7       	brne	.-50     	; 0x3238 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	0f 90       	pop	r0
    3270:	cf 91       	pop	r28
    3272:	df 91       	pop	r29
    3274:	08 95       	ret

00003276 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3276:	df 93       	push	r29
    3278:	cf 93       	push	r28
    327a:	00 d0       	rcall	.+0      	; 0x327c <LCD_moveCursor+0x6>
    327c:	00 d0       	rcall	.+0      	; 0x327e <LCD_moveCursor+0x8>
    327e:	0f 92       	push	r0
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62
    3284:	8a 83       	std	Y+2, r24	; 0x02
    3286:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3288:	8a 81       	ldd	r24, Y+2	; 0x02
    328a:	28 2f       	mov	r18, r24
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	3d 83       	std	Y+5, r19	; 0x05
    3290:	2c 83       	std	Y+4, r18	; 0x04
    3292:	8c 81       	ldd	r24, Y+4	; 0x04
    3294:	9d 81       	ldd	r25, Y+5	; 0x05
    3296:	81 30       	cpi	r24, 0x01	; 1
    3298:	91 05       	cpc	r25, r1
    329a:	c1 f0       	breq	.+48     	; 0x32cc <LCD_moveCursor+0x56>
    329c:	2c 81       	ldd	r18, Y+4	; 0x04
    329e:	3d 81       	ldd	r19, Y+5	; 0x05
    32a0:	22 30       	cpi	r18, 0x02	; 2
    32a2:	31 05       	cpc	r19, r1
    32a4:	2c f4       	brge	.+10     	; 0x32b0 <LCD_moveCursor+0x3a>
    32a6:	8c 81       	ldd	r24, Y+4	; 0x04
    32a8:	9d 81       	ldd	r25, Y+5	; 0x05
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	61 f0       	breq	.+24     	; 0x32c6 <LCD_moveCursor+0x50>
    32ae:	19 c0       	rjmp	.+50     	; 0x32e2 <LCD_moveCursor+0x6c>
    32b0:	2c 81       	ldd	r18, Y+4	; 0x04
    32b2:	3d 81       	ldd	r19, Y+5	; 0x05
    32b4:	22 30       	cpi	r18, 0x02	; 2
    32b6:	31 05       	cpc	r19, r1
    32b8:	69 f0       	breq	.+26     	; 0x32d4 <LCD_moveCursor+0x5e>
    32ba:	8c 81       	ldd	r24, Y+4	; 0x04
    32bc:	9d 81       	ldd	r25, Y+5	; 0x05
    32be:	83 30       	cpi	r24, 0x03	; 3
    32c0:	91 05       	cpc	r25, r1
    32c2:	61 f0       	breq	.+24     	; 0x32dc <LCD_moveCursor+0x66>
    32c4:	0e c0       	rjmp	.+28     	; 0x32e2 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    32c6:	8b 81       	ldd	r24, Y+3	; 0x03
    32c8:	89 83       	std	Y+1, r24	; 0x01
    32ca:	0b c0       	rjmp	.+22     	; 0x32e2 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    32cc:	8b 81       	ldd	r24, Y+3	; 0x03
    32ce:	80 5c       	subi	r24, 0xC0	; 192
    32d0:	89 83       	std	Y+1, r24	; 0x01
    32d2:	07 c0       	rjmp	.+14     	; 0x32e2 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    32d4:	8b 81       	ldd	r24, Y+3	; 0x03
    32d6:	80 5f       	subi	r24, 0xF0	; 240
    32d8:	89 83       	std	Y+1, r24	; 0x01
    32da:	03 c0       	rjmp	.+6      	; 0x32e2 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    32dc:	8b 81       	ldd	r24, Y+3	; 0x03
    32de:	80 5b       	subi	r24, 0xB0	; 176
    32e0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    32e2:	89 81       	ldd	r24, Y+1	; 0x01
    32e4:	80 68       	ori	r24, 0x80	; 128
    32e6:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_sendCommand>
}
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	cf 91       	pop	r28
    32f6:	df 91       	pop	r29
    32f8:	08 95       	ret

000032fa <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    32fa:	df 93       	push	r29
    32fc:	cf 93       	push	r28
    32fe:	00 d0       	rcall	.+0      	; 0x3300 <LCD_displayStringRowColumn+0x6>
    3300:	00 d0       	rcall	.+0      	; 0x3302 <LCD_displayStringRowColumn+0x8>
    3302:	cd b7       	in	r28, 0x3d	; 61
    3304:	de b7       	in	r29, 0x3e	; 62
    3306:	89 83       	std	Y+1, r24	; 0x01
    3308:	6a 83       	std	Y+2, r22	; 0x02
    330a:	5c 83       	std	Y+4, r21	; 0x04
    330c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	6a 81       	ldd	r22, Y+2	; 0x02
    3312:	0e 94 3b 19 	call	0x3276	; 0x3276 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3316:	8b 81       	ldd	r24, Y+3	; 0x03
    3318:	9c 81       	ldd	r25, Y+4	; 0x04
    331a:	0e 94 12 19 	call	0x3224	; 0x3224 <LCD_displayString>
}
    331e:	0f 90       	pop	r0
    3320:	0f 90       	pop	r0
    3322:	0f 90       	pop	r0
    3324:	0f 90       	pop	r0
    3326:	cf 91       	pop	r28
    3328:	df 91       	pop	r29
    332a:	08 95       	ret

0000332c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    332c:	df 93       	push	r29
    332e:	cf 93       	push	r28
    3330:	cd b7       	in	r28, 0x3d	; 61
    3332:	de b7       	in	r29, 0x3e	; 62
    3334:	62 97       	sbiw	r28, 0x12	; 18
    3336:	0f b6       	in	r0, 0x3f	; 63
    3338:	f8 94       	cli
    333a:	de bf       	out	0x3e, r29	; 62
    333c:	0f be       	out	0x3f, r0	; 63
    333e:	cd bf       	out	0x3d, r28	; 61
    3340:	9a 8b       	std	Y+18, r25	; 0x12
    3342:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3344:	89 89       	ldd	r24, Y+17	; 0x11
    3346:	9a 89       	ldd	r25, Y+18	; 0x12
    3348:	9e 01       	movw	r18, r28
    334a:	2f 5f       	subi	r18, 0xFF	; 255
    334c:	3f 4f       	sbci	r19, 0xFF	; 255
    334e:	b9 01       	movw	r22, r18
    3350:	4a e0       	ldi	r20, 0x0A	; 10
    3352:	50 e0       	ldi	r21, 0x00	; 0
    3354:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <itoa>
   LCD_displayString(buff); /* Display the string */
    3358:	ce 01       	movw	r24, r28
    335a:	01 96       	adiw	r24, 0x01	; 1
    335c:	0e 94 12 19 	call	0x3224	; 0x3224 <LCD_displayString>
}
    3360:	62 96       	adiw	r28, 0x12	; 18
    3362:	0f b6       	in	r0, 0x3f	; 63
    3364:	f8 94       	cli
    3366:	de bf       	out	0x3e, r29	; 62
    3368:	0f be       	out	0x3f, r0	; 63
    336a:	cd bf       	out	0x3d, r28	; 61
    336c:	cf 91       	pop	r28
    336e:	df 91       	pop	r29
    3370:	08 95       	ret

00003372 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3372:	df 93       	push	r29
    3374:	cf 93       	push	r28
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_sendCommand>
}
    3380:	cf 91       	pop	r28
    3382:	df 91       	pop	r29
    3384:	08 95       	ret

00003386 <__vector_11>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    3386:	1f 92       	push	r1
    3388:	0f 92       	push	r0
    338a:	0f b6       	in	r0, 0x3f	; 63
    338c:	0f 92       	push	r0
    338e:	11 24       	eor	r1, r1
    3390:	2f 93       	push	r18
    3392:	3f 93       	push	r19
    3394:	4f 93       	push	r20
    3396:	5f 93       	push	r21
    3398:	6f 93       	push	r22
    339a:	7f 93       	push	r23
    339c:	8f 93       	push	r24
    339e:	9f 93       	push	r25
    33a0:	af 93       	push	r26
    33a2:	bf 93       	push	r27
    33a4:	ef 93       	push	r30
    33a6:	ff 93       	push	r31
    33a8:	df 93       	push	r29
    33aa:	cf 93       	push	r28
    33ac:	cd b7       	in	r28, 0x3d	; 61
    33ae:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    33b0:	80 91 2e 01 	lds	r24, 0x012E
    33b4:	90 91 2f 01 	lds	r25, 0x012F
    33b8:	00 97       	sbiw	r24, 0x00	; 0
    33ba:	29 f0       	breq	.+10     	; 0x33c6 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application  */
		(*g_callBackPtr0)();
    33bc:	e0 91 2e 01 	lds	r30, 0x012E
    33c0:	f0 91 2f 01 	lds	r31, 0x012F
    33c4:	09 95       	icall
	}
}
    33c6:	cf 91       	pop	r28
    33c8:	df 91       	pop	r29
    33ca:	ff 91       	pop	r31
    33cc:	ef 91       	pop	r30
    33ce:	bf 91       	pop	r27
    33d0:	af 91       	pop	r26
    33d2:	9f 91       	pop	r25
    33d4:	8f 91       	pop	r24
    33d6:	7f 91       	pop	r23
    33d8:	6f 91       	pop	r22
    33da:	5f 91       	pop	r21
    33dc:	4f 91       	pop	r20
    33de:	3f 91       	pop	r19
    33e0:	2f 91       	pop	r18
    33e2:	0f 90       	pop	r0
    33e4:	0f be       	out	0x3f, r0	; 63
    33e6:	0f 90       	pop	r0
    33e8:	1f 90       	pop	r1
    33ea:	18 95       	reti

000033ec <__vector_10>:


ISR(TIMER0_COMP_vect)
{
    33ec:	1f 92       	push	r1
    33ee:	0f 92       	push	r0
    33f0:	0f b6       	in	r0, 0x3f	; 63
    33f2:	0f 92       	push	r0
    33f4:	11 24       	eor	r1, r1
    33f6:	2f 93       	push	r18
    33f8:	3f 93       	push	r19
    33fa:	4f 93       	push	r20
    33fc:	5f 93       	push	r21
    33fe:	6f 93       	push	r22
    3400:	7f 93       	push	r23
    3402:	8f 93       	push	r24
    3404:	9f 93       	push	r25
    3406:	af 93       	push	r26
    3408:	bf 93       	push	r27
    340a:	ef 93       	push	r30
    340c:	ff 93       	push	r31
    340e:	df 93       	push	r29
    3410:	cf 93       	push	r28
    3412:	cd b7       	in	r28, 0x3d	; 61
    3414:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    3416:	80 91 2e 01 	lds	r24, 0x012E
    341a:	90 91 2f 01 	lds	r25, 0x012F
    341e:	00 97       	sbiw	r24, 0x00	; 0
    3420:	29 f0       	breq	.+10     	; 0x342c <__vector_10+0x40>
	{
		/* Call the Call Back function in the application  */
		(*g_callBackPtr0)();
    3422:	e0 91 2e 01 	lds	r30, 0x012E
    3426:	f0 91 2f 01 	lds	r31, 0x012F
    342a:	09 95       	icall
	}
}
    342c:	cf 91       	pop	r28
    342e:	df 91       	pop	r29
    3430:	ff 91       	pop	r31
    3432:	ef 91       	pop	r30
    3434:	bf 91       	pop	r27
    3436:	af 91       	pop	r26
    3438:	9f 91       	pop	r25
    343a:	8f 91       	pop	r24
    343c:	7f 91       	pop	r23
    343e:	6f 91       	pop	r22
    3440:	5f 91       	pop	r21
    3442:	4f 91       	pop	r20
    3444:	3f 91       	pop	r19
    3446:	2f 91       	pop	r18
    3448:	0f 90       	pop	r0
    344a:	0f be       	out	0x3f, r0	; 63
    344c:	0f 90       	pop	r0
    344e:	1f 90       	pop	r1
    3450:	18 95       	reti

00003452 <__vector_7>:



ISR(TIMER1_COMPA_vect)
{
    3452:	1f 92       	push	r1
    3454:	0f 92       	push	r0
    3456:	0f b6       	in	r0, 0x3f	; 63
    3458:	0f 92       	push	r0
    345a:	11 24       	eor	r1, r1
    345c:	2f 93       	push	r18
    345e:	3f 93       	push	r19
    3460:	4f 93       	push	r20
    3462:	5f 93       	push	r21
    3464:	6f 93       	push	r22
    3466:	7f 93       	push	r23
    3468:	8f 93       	push	r24
    346a:	9f 93       	push	r25
    346c:	af 93       	push	r26
    346e:	bf 93       	push	r27
    3470:	ef 93       	push	r30
    3472:	ff 93       	push	r31
    3474:	df 93       	push	r29
    3476:	cf 93       	push	r28
    3478:	cd b7       	in	r28, 0x3d	; 61
    347a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    347c:	80 91 30 01 	lds	r24, 0x0130
    3480:	90 91 31 01 	lds	r25, 0x0131
    3484:	00 97       	sbiw	r24, 0x00	; 0
    3486:	29 f0       	breq	.+10     	; 0x3492 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application  */
		(*g_callBackPtr1)();
    3488:	e0 91 30 01 	lds	r30, 0x0130
    348c:	f0 91 31 01 	lds	r31, 0x0131
    3490:	09 95       	icall
	}
}
    3492:	cf 91       	pop	r28
    3494:	df 91       	pop	r29
    3496:	ff 91       	pop	r31
    3498:	ef 91       	pop	r30
    349a:	bf 91       	pop	r27
    349c:	af 91       	pop	r26
    349e:	9f 91       	pop	r25
    34a0:	8f 91       	pop	r24
    34a2:	7f 91       	pop	r23
    34a4:	6f 91       	pop	r22
    34a6:	5f 91       	pop	r21
    34a8:	4f 91       	pop	r20
    34aa:	3f 91       	pop	r19
    34ac:	2f 91       	pop	r18
    34ae:	0f 90       	pop	r0
    34b0:	0f be       	out	0x3f, r0	; 63
    34b2:	0f 90       	pop	r0
    34b4:	1f 90       	pop	r1
    34b6:	18 95       	reti

000034b8 <__vector_8>:




ISR(TIMER1_COMPB_vect)
{
    34b8:	1f 92       	push	r1
    34ba:	0f 92       	push	r0
    34bc:	0f b6       	in	r0, 0x3f	; 63
    34be:	0f 92       	push	r0
    34c0:	11 24       	eor	r1, r1
    34c2:	2f 93       	push	r18
    34c4:	3f 93       	push	r19
    34c6:	4f 93       	push	r20
    34c8:	5f 93       	push	r21
    34ca:	6f 93       	push	r22
    34cc:	7f 93       	push	r23
    34ce:	8f 93       	push	r24
    34d0:	9f 93       	push	r25
    34d2:	af 93       	push	r26
    34d4:	bf 93       	push	r27
    34d6:	ef 93       	push	r30
    34d8:	ff 93       	push	r31
    34da:	df 93       	push	r29
    34dc:	cf 93       	push	r28
    34de:	cd b7       	in	r28, 0x3d	; 61
    34e0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    34e2:	80 91 30 01 	lds	r24, 0x0130
    34e6:	90 91 31 01 	lds	r25, 0x0131
    34ea:	00 97       	sbiw	r24, 0x00	; 0
    34ec:	29 f0       	breq	.+10     	; 0x34f8 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application  */
		(*g_callBackPtr1)();
    34ee:	e0 91 30 01 	lds	r30, 0x0130
    34f2:	f0 91 31 01 	lds	r31, 0x0131
    34f6:	09 95       	icall
	}
}
    34f8:	cf 91       	pop	r28
    34fa:	df 91       	pop	r29
    34fc:	ff 91       	pop	r31
    34fe:	ef 91       	pop	r30
    3500:	bf 91       	pop	r27
    3502:	af 91       	pop	r26
    3504:	9f 91       	pop	r25
    3506:	8f 91       	pop	r24
    3508:	7f 91       	pop	r23
    350a:	6f 91       	pop	r22
    350c:	5f 91       	pop	r21
    350e:	4f 91       	pop	r20
    3510:	3f 91       	pop	r19
    3512:	2f 91       	pop	r18
    3514:	0f 90       	pop	r0
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	0f 90       	pop	r0
    351a:	1f 90       	pop	r1
    351c:	18 95       	reti

0000351e <__vector_9>:



ISR(TIMER1_OVF_vect)
{
    351e:	1f 92       	push	r1
    3520:	0f 92       	push	r0
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	0f 92       	push	r0
    3526:	11 24       	eor	r1, r1
    3528:	2f 93       	push	r18
    352a:	3f 93       	push	r19
    352c:	4f 93       	push	r20
    352e:	5f 93       	push	r21
    3530:	6f 93       	push	r22
    3532:	7f 93       	push	r23
    3534:	8f 93       	push	r24
    3536:	9f 93       	push	r25
    3538:	af 93       	push	r26
    353a:	bf 93       	push	r27
    353c:	ef 93       	push	r30
    353e:	ff 93       	push	r31
    3540:	df 93       	push	r29
    3542:	cf 93       	push	r28
    3544:	cd b7       	in	r28, 0x3d	; 61
    3546:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    3548:	80 91 30 01 	lds	r24, 0x0130
    354c:	90 91 31 01 	lds	r25, 0x0131
    3550:	00 97       	sbiw	r24, 0x00	; 0
    3552:	29 f0       	breq	.+10     	; 0x355e <__vector_9+0x40>
	{
		/* Call the Call Back function in the application  */
		(*g_callBackPtr1)();
    3554:	e0 91 30 01 	lds	r30, 0x0130
    3558:	f0 91 31 01 	lds	r31, 0x0131
    355c:	09 95       	icall
	}
}
    355e:	cf 91       	pop	r28
    3560:	df 91       	pop	r29
    3562:	ff 91       	pop	r31
    3564:	ef 91       	pop	r30
    3566:	bf 91       	pop	r27
    3568:	af 91       	pop	r26
    356a:	9f 91       	pop	r25
    356c:	8f 91       	pop	r24
    356e:	7f 91       	pop	r23
    3570:	6f 91       	pop	r22
    3572:	5f 91       	pop	r21
    3574:	4f 91       	pop	r20
    3576:	3f 91       	pop	r19
    3578:	2f 91       	pop	r18
    357a:	0f 90       	pop	r0
    357c:	0f be       	out	0x3f, r0	; 63
    357e:	0f 90       	pop	r0
    3580:	1f 90       	pop	r1
    3582:	18 95       	reti

00003584 <__vector_4>:



ISR(TIMER2_COMP_vect)
{
    3584:	1f 92       	push	r1
    3586:	0f 92       	push	r0
    3588:	0f b6       	in	r0, 0x3f	; 63
    358a:	0f 92       	push	r0
    358c:	11 24       	eor	r1, r1
    358e:	2f 93       	push	r18
    3590:	3f 93       	push	r19
    3592:	4f 93       	push	r20
    3594:	5f 93       	push	r21
    3596:	6f 93       	push	r22
    3598:	7f 93       	push	r23
    359a:	8f 93       	push	r24
    359c:	9f 93       	push	r25
    359e:	af 93       	push	r26
    35a0:	bf 93       	push	r27
    35a2:	ef 93       	push	r30
    35a4:	ff 93       	push	r31
    35a6:	df 93       	push	r29
    35a8:	cf 93       	push	r28
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    35ae:	80 91 32 01 	lds	r24, 0x0132
    35b2:	90 91 33 01 	lds	r25, 0x0133
    35b6:	00 97       	sbiw	r24, 0x00	; 0
    35b8:	29 f0       	breq	.+10     	; 0x35c4 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application  */
		(*g_callBackPtr2)();
    35ba:	e0 91 32 01 	lds	r30, 0x0132
    35be:	f0 91 33 01 	lds	r31, 0x0133
    35c2:	09 95       	icall
	}
}
    35c4:	cf 91       	pop	r28
    35c6:	df 91       	pop	r29
    35c8:	ff 91       	pop	r31
    35ca:	ef 91       	pop	r30
    35cc:	bf 91       	pop	r27
    35ce:	af 91       	pop	r26
    35d0:	9f 91       	pop	r25
    35d2:	8f 91       	pop	r24
    35d4:	7f 91       	pop	r23
    35d6:	6f 91       	pop	r22
    35d8:	5f 91       	pop	r21
    35da:	4f 91       	pop	r20
    35dc:	3f 91       	pop	r19
    35de:	2f 91       	pop	r18
    35e0:	0f 90       	pop	r0
    35e2:	0f be       	out	0x3f, r0	; 63
    35e4:	0f 90       	pop	r0
    35e6:	1f 90       	pop	r1
    35e8:	18 95       	reti

000035ea <__vector_5>:


ISR(TIMER2_OVF_vect)
{
    35ea:	1f 92       	push	r1
    35ec:	0f 92       	push	r0
    35ee:	0f b6       	in	r0, 0x3f	; 63
    35f0:	0f 92       	push	r0
    35f2:	11 24       	eor	r1, r1
    35f4:	2f 93       	push	r18
    35f6:	3f 93       	push	r19
    35f8:	4f 93       	push	r20
    35fa:	5f 93       	push	r21
    35fc:	6f 93       	push	r22
    35fe:	7f 93       	push	r23
    3600:	8f 93       	push	r24
    3602:	9f 93       	push	r25
    3604:	af 93       	push	r26
    3606:	bf 93       	push	r27
    3608:	ef 93       	push	r30
    360a:	ff 93       	push	r31
    360c:	df 93       	push	r29
    360e:	cf 93       	push	r28
    3610:	cd b7       	in	r28, 0x3d	; 61
    3612:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    3614:	80 91 32 01 	lds	r24, 0x0132
    3618:	90 91 33 01 	lds	r25, 0x0133
    361c:	00 97       	sbiw	r24, 0x00	; 0
    361e:	29 f0       	breq	.+10     	; 0x362a <__vector_5+0x40>
	{
		/* Call the Call Back function in the application  */
		(*g_callBackPtr2)();
    3620:	e0 91 32 01 	lds	r30, 0x0132
    3624:	f0 91 33 01 	lds	r31, 0x0133
    3628:	09 95       	icall
	}
}
    362a:	cf 91       	pop	r28
    362c:	df 91       	pop	r29
    362e:	ff 91       	pop	r31
    3630:	ef 91       	pop	r30
    3632:	bf 91       	pop	r27
    3634:	af 91       	pop	r26
    3636:	9f 91       	pop	r25
    3638:	8f 91       	pop	r24
    363a:	7f 91       	pop	r23
    363c:	6f 91       	pop	r22
    363e:	5f 91       	pop	r21
    3640:	4f 91       	pop	r20
    3642:	3f 91       	pop	r19
    3644:	2f 91       	pop	r18
    3646:	0f 90       	pop	r0
    3648:	0f be       	out	0x3f, r0	; 63
    364a:	0f 90       	pop	r0
    364c:	1f 90       	pop	r1
    364e:	18 95       	reti

00003650 <Timer_init>:
 * 4-choose each of intial value or compare match according to the mode type
 * Inputs: pointer to the configuration structure with type Timer_ConfigType.
 *
 */

void Timer_init(const Timer_ConfigType * Config_Ptr)  {
    3650:	df 93       	push	r29
    3652:	cf 93       	push	r28
    3654:	cd b7       	in	r28, 0x3d	; 61
    3656:	de b7       	in	r29, 0x3e	; 62
    3658:	28 97       	sbiw	r28, 0x08	; 8
    365a:	0f b6       	in	r0, 0x3f	; 63
    365c:	f8 94       	cli
    365e:	de bf       	out	0x3e, r29	; 62
    3660:	0f be       	out	0x3f, r0	; 63
    3662:	cd bf       	out	0x3d, r28	; 61
    3664:	9a 83       	std	Y+2, r25	; 0x02
    3666:	89 83       	std	Y+1, r24	; 0x01


    if ( Config_Ptr->timer_ID == TIMER0){
    3668:	e9 81       	ldd	r30, Y+1	; 0x01
    366a:	fa 81       	ldd	r31, Y+2	; 0x02
    366c:	84 81       	ldd	r24, Z+4	; 0x04
    366e:	88 23       	and	r24, r24
    3670:	09 f0       	breq	.+2      	; 0x3674 <Timer_init+0x24>
    3672:	55 c0       	rjmp	.+170    	; 0x371e <Timer_init+0xce>
    	 *2-MODE configurable
    	 * 3. clock configurable
    	 * 4-intial value
    	 */

    	TCCR0 = (1<<FOC0) ;
    3674:	e3 e5       	ldi	r30, 0x53	; 83
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	80 e8       	ldi	r24, 0x80	; 128
    367a:	80 83       	st	Z, r24
    	//TCCR0 =  (TCCR0 & 0xB7) | (((Config_Ptr->timer_mode) & (0XFD)) << 2) | (((Config_Ptr->timer_mode) & (0XFE)) << 6) ;
    	switch(Config_Ptr->timer_mode){
    367c:	e9 81       	ldd	r30, Y+1	; 0x01
    367e:	fa 81       	ldd	r31, Y+2	; 0x02
    3680:	86 81       	ldd	r24, Z+6	; 0x06
    3682:	28 2f       	mov	r18, r24
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	38 87       	std	Y+8, r19	; 0x08
    3688:	2f 83       	std	Y+7, r18	; 0x07
    368a:	8f 81       	ldd	r24, Y+7	; 0x07
    368c:	98 85       	ldd	r25, Y+8	; 0x08
    368e:	00 97       	sbiw	r24, 0x00	; 0
    3690:	31 f0       	breq	.+12     	; 0x369e <Timer_init+0x4e>
    3692:	2f 81       	ldd	r18, Y+7	; 0x07
    3694:	38 85       	ldd	r19, Y+8	; 0x08
    3696:	21 30       	cpi	r18, 0x01	; 1
    3698:	31 05       	cpc	r19, r1
    369a:	81 f0       	breq	.+32     	; 0x36bc <Timer_init+0x6c>
    369c:	2b c0       	rjmp	.+86     	; 0x36f4 <Timer_init+0xa4>

    	   case NORMAL:

    		   TCCR0 &= ~(1<< WGM01) & ~(1<<WGM00);/*WGM00=0 ,WGM01=0 */
    369e:	a3 e5       	ldi	r26, 0x53	; 83
    36a0:	b0 e0       	ldi	r27, 0x00	; 0
    36a2:	e3 e5       	ldi	r30, 0x53	; 83
    36a4:	f0 e0       	ldi	r31, 0x00	; 0
    36a6:	80 81       	ld	r24, Z
    36a8:	87 7b       	andi	r24, 0xB7	; 183
    36aa:	8c 93       	st	X, r24
       		   TIMSK |= (1<<TOIE0); // Enable Timer0 NORMAL Interrupt
    36ac:	a9 e5       	ldi	r26, 0x59	; 89
    36ae:	b0 e0       	ldi	r27, 0x00	; 0
    36b0:	e9 e5       	ldi	r30, 0x59	; 89
    36b2:	f0 e0       	ldi	r31, 0x00	; 0
    36b4:	80 81       	ld	r24, Z
    36b6:	81 60       	ori	r24, 0x01	; 1
    36b8:	8c 93       	st	X, r24
    36ba:	1c c0       	rjmp	.+56     	; 0x36f4 <Timer_init+0xa4>
    		   break;

    	   case COMPARE:

    		   TCCR0 |= (1<< WGM01) ;/*WGM00=0 ,WGM01=1 */
    36bc:	a3 e5       	ldi	r26, 0x53	; 83
    36be:	b0 e0       	ldi	r27, 0x00	; 0
    36c0:	e3 e5       	ldi	r30, 0x53	; 83
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	80 81       	ld	r24, Z
    36c6:	88 60       	ori	r24, 0x08	; 8
    36c8:	8c 93       	st	X, r24
    		   TCCR0 &= ~(1<<WGM00);
    36ca:	a3 e5       	ldi	r26, 0x53	; 83
    36cc:	b0 e0       	ldi	r27, 0x00	; 0
    36ce:	e3 e5       	ldi	r30, 0x53	; 83
    36d0:	f0 e0       	ldi	r31, 0x00	; 0
    36d2:	80 81       	ld	r24, Z
    36d4:	8f 7b       	andi	r24, 0xBF	; 191
    36d6:	8c 93       	st	X, r24

     		  /*No need for OC0 in this example so COM00=0 & COM01=0*/
     		  OCR0 = (uint8)Config_Ptr->timer_compare_MatchValue ;
    36d8:	ac e5       	ldi	r26, 0x5C	; 92
    36da:	b0 e0       	ldi	r27, 0x00	; 0
    36dc:	e9 81       	ldd	r30, Y+1	; 0x01
    36de:	fa 81       	ldd	r31, Y+2	; 0x02
    36e0:	82 81       	ldd	r24, Z+2	; 0x02
    36e2:	93 81       	ldd	r25, Z+3	; 0x03
    36e4:	8c 93       	st	X, r24
     		  TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    36e6:	a9 e5       	ldi	r26, 0x59	; 89
    36e8:	b0 e0       	ldi	r27, 0x00	; 0
    36ea:	e9 e5       	ldi	r30, 0x59	; 89
    36ec:	f0 e0       	ldi	r31, 0x00	; 0
    36ee:	80 81       	ld	r24, Z
    36f0:	82 60       	ori	r24, 0x02	; 2
    36f2:	8c 93       	st	X, r24

    		   break;

    	}

    	TCCR0 =  (TCCR0 & 0xF8) | ((Config_Ptr->timer_clock)  & (0x07) )  ;
    36f4:	a3 e5       	ldi	r26, 0x53	; 83
    36f6:	b0 e0       	ldi	r27, 0x00	; 0
    36f8:	e3 e5       	ldi	r30, 0x53	; 83
    36fa:	f0 e0       	ldi	r31, 0x00	; 0
    36fc:	80 81       	ld	r24, Z
    36fe:	98 2f       	mov	r25, r24
    3700:	98 7f       	andi	r25, 0xF8	; 248
    3702:	e9 81       	ldd	r30, Y+1	; 0x01
    3704:	fa 81       	ldd	r31, Y+2	; 0x02
    3706:	85 81       	ldd	r24, Z+5	; 0x05
    3708:	87 70       	andi	r24, 0x07	; 7
    370a:	89 2b       	or	r24, r25
    370c:	8c 93       	st	X, r24
    	TCNT0 =Config_Ptr->timer_InitialValue ;
    370e:	a2 e5       	ldi	r26, 0x52	; 82
    3710:	b0 e0       	ldi	r27, 0x00	; 0
    3712:	e9 81       	ldd	r30, Y+1	; 0x01
    3714:	fa 81       	ldd	r31, Y+2	; 0x02
    3716:	80 81       	ld	r24, Z
    3718:	91 81       	ldd	r25, Z+1	; 0x01
    371a:	8c 93       	st	X, r24
    371c:	18 c1       	rjmp	.+560    	; 0x394e <Timer_init+0x2fe>





     } else if (Config_Ptr->timer_ID == TIMER1){
    371e:	e9 81       	ldd	r30, Y+1	; 0x01
    3720:	fa 81       	ldd	r31, Y+2	; 0x02
    3722:	84 81       	ldd	r24, Z+4	; 0x04
    3724:	81 30       	cpi	r24, 0x01	; 1
    3726:	09 f0       	breq	.+2      	; 0x372a <Timer_init+0xda>
    3728:	b8 c0       	rjmp	.+368    	; 0x389a <Timer_init+0x24a>
     	 *2-MODE configurable
     	 * 3. clock configurable
     	 * 4-intial value
     	 */

    	 TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    372a:	ef e4       	ldi	r30, 0x4F	; 79
    372c:	f0 e0       	ldi	r31, 0x00	; 0
    372e:	8c e0       	ldi	r24, 0x0C	; 12
    3730:	80 83       	st	Z, r24
    	 //TCCR1A =  (TCCR1A & 0xFC) ;
    	// TCCR1B =   (TCCR1B & 0xE7) | (((Config_Ptr->timer_mode) & (0XFD)) << 2) | (((Config_Ptr->timer_mode) & (0XFE)) << 4);

     	switch(Config_Ptr->timer_mode){
    3732:	e9 81       	ldd	r30, Y+1	; 0x01
    3734:	fa 81       	ldd	r31, Y+2	; 0x02
    3736:	86 81       	ldd	r24, Z+6	; 0x06
    3738:	28 2f       	mov	r18, r24
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	3e 83       	std	Y+6, r19	; 0x06
    373e:	2d 83       	std	Y+5, r18	; 0x05
    3740:	8d 81       	ldd	r24, Y+5	; 0x05
    3742:	9e 81       	ldd	r25, Y+6	; 0x06
    3744:	81 30       	cpi	r24, 0x01	; 1
    3746:	91 05       	cpc	r25, r1
    3748:	61 f1       	breq	.+88     	; 0x37a2 <Timer_init+0x152>
    374a:	2d 81       	ldd	r18, Y+5	; 0x05
    374c:	3e 81       	ldd	r19, Y+6	; 0x06
    374e:	22 30       	cpi	r18, 0x02	; 2
    3750:	31 05       	cpc	r19, r1
    3752:	2c f4       	brge	.+10     	; 0x375e <Timer_init+0x10e>
    3754:	8d 81       	ldd	r24, Y+5	; 0x05
    3756:	9e 81       	ldd	r25, Y+6	; 0x06
    3758:	00 97       	sbiw	r24, 0x00	; 0
    375a:	69 f0       	breq	.+26     	; 0x3776 <Timer_init+0x126>
    375c:	87 c0       	rjmp	.+270    	; 0x386c <Timer_init+0x21c>
    375e:	2d 81       	ldd	r18, Y+5	; 0x05
    3760:	3e 81       	ldd	r19, Y+6	; 0x06
    3762:	24 30       	cpi	r18, 0x04	; 4
    3764:	31 05       	cpc	r19, r1
    3766:	99 f1       	breq	.+102    	; 0x37ce <Timer_init+0x17e>
    3768:	8d 81       	ldd	r24, Y+5	; 0x05
    376a:	9e 81       	ldd	r25, Y+6	; 0x06
    376c:	85 30       	cpi	r24, 0x05	; 5
    376e:	91 05       	cpc	r25, r1
    3770:	09 f4       	brne	.+2      	; 0x3774 <Timer_init+0x124>
    3772:	55 c0       	rjmp	.+170    	; 0x381e <Timer_init+0x1ce>
    3774:	7b c0       	rjmp	.+246    	; 0x386c <Timer_init+0x21c>

     	   case NORMAL:

     		  TCCR1A &= ~(1<< WGM11) & ~(1<< WGM10);/*WGM11=0 ,WGM10=0 */
    3776:	af e4       	ldi	r26, 0x4F	; 79
    3778:	b0 e0       	ldi	r27, 0x00	; 0
    377a:	ef e4       	ldi	r30, 0x4F	; 79
    377c:	f0 e0       	ldi	r31, 0x00	; 0
    377e:	80 81       	ld	r24, Z
    3780:	8c 7f       	andi	r24, 0xFC	; 252
    3782:	8c 93       	st	X, r24
     		  TCCR1B &= ~(1<<  WGM13) & ~(1<<  WGM12);/*WGM13=0 , WGM12=0 */
    3784:	ae e4       	ldi	r26, 0x4E	; 78
    3786:	b0 e0       	ldi	r27, 0x00	; 0
    3788:	ee e4       	ldi	r30, 0x4E	; 78
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	80 81       	ld	r24, Z
    378e:	87 7e       	andi	r24, 0xE7	; 231
    3790:	8c 93       	st	X, r24

              TIMSK |= (1<<TOIE1); // Enable Timer1 NORMAL Interrupt
    3792:	a9 e5       	ldi	r26, 0x59	; 89
    3794:	b0 e0       	ldi	r27, 0x00	; 0
    3796:	e9 e5       	ldi	r30, 0x59	; 89
    3798:	f0 e0       	ldi	r31, 0x00	; 0
    379a:	80 81       	ld	r24, Z
    379c:	84 60       	ori	r24, 0x04	; 4
    379e:	8c 93       	st	X, r24
    37a0:	65 c0       	rjmp	.+202    	; 0x386c <Timer_init+0x21c>

     		   break;

     	   case COMPARE:

     		  TCCR1A &= ~(1<< WGM11) & ~(1<< WGM10);/*WGM11=0 ,WGM10=0 */
    37a2:	af e4       	ldi	r26, 0x4F	; 79
    37a4:	b0 e0       	ldi	r27, 0x00	; 0
    37a6:	ef e4       	ldi	r30, 0x4F	; 79
    37a8:	f0 e0       	ldi	r31, 0x00	; 0
    37aa:	80 81       	ld	r24, Z
    37ac:	8c 7f       	andi	r24, 0xFC	; 252
    37ae:	8c 93       	st	X, r24
     		  TCCR1B &= ~(1<<  WGM13) ;/*WGM13=0 , WGM12=1*/
    37b0:	ae e4       	ldi	r26, 0x4E	; 78
    37b2:	b0 e0       	ldi	r27, 0x00	; 0
    37b4:	ee e4       	ldi	r30, 0x4E	; 78
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	80 81       	ld	r24, Z
    37ba:	8f 7e       	andi	r24, 0xEF	; 239
    37bc:	8c 93       	st	X, r24
     		  TCCR1B |= (1<<  WGM12);
    37be:	ae e4       	ldi	r26, 0x4E	; 78
    37c0:	b0 e0       	ldi	r27, 0x00	; 0
    37c2:	ee e4       	ldi	r30, 0x4E	; 78
    37c4:	f0 e0       	ldi	r31, 0x00	; 0
    37c6:	80 81       	ld	r24, Z
    37c8:	88 60       	ori	r24, 0x08	; 8
    37ca:	8c 93       	st	X, r24
    37cc:	4f c0       	rjmp	.+158    	; 0x386c <Timer_init+0x21c>

     		   break;

     	   case COMPAREA:

     		  TCCR1A &= ~(1<< WGM11) & ~(1<< WGM10);/*WGM11=0 ,WGM10=0 */
    37ce:	af e4       	ldi	r26, 0x4F	; 79
    37d0:	b0 e0       	ldi	r27, 0x00	; 0
    37d2:	ef e4       	ldi	r30, 0x4F	; 79
    37d4:	f0 e0       	ldi	r31, 0x00	; 0
    37d6:	80 81       	ld	r24, Z
    37d8:	8c 7f       	andi	r24, 0xFC	; 252
    37da:	8c 93       	st	X, r24
     		  TCCR1B &= ~(1<<  WGM13) ;/*WGM13=0 , WGM12=1*/
    37dc:	ae e4       	ldi	r26, 0x4E	; 78
    37de:	b0 e0       	ldi	r27, 0x00	; 0
    37e0:	ee e4       	ldi	r30, 0x4E	; 78
    37e2:	f0 e0       	ldi	r31, 0x00	; 0
    37e4:	80 81       	ld	r24, Z
    37e6:	8f 7e       	andi	r24, 0xEF	; 239
    37e8:	8c 93       	st	X, r24
     		  TCCR1B |= (1<<  WGM12);
    37ea:	ae e4       	ldi	r26, 0x4E	; 78
    37ec:	b0 e0       	ldi	r27, 0x00	; 0
    37ee:	ee e4       	ldi	r30, 0x4E	; 78
    37f0:	f0 e0       	ldi	r31, 0x00	; 0
    37f2:	80 81       	ld	r24, Z
    37f4:	88 60       	ori	r24, 0x08	; 8
    37f6:	8c 93       	st	X, r24
    		  /*No need for OC1A and OC1B in this example so COM1A0 and COM1B0=0 & COM1A1 and COM1B1=0*/
     		 OCR1A = (uint8)Config_Ptr->timer_compare_MatchValue ;
    37f8:	aa e4       	ldi	r26, 0x4A	; 74
    37fa:	b0 e0       	ldi	r27, 0x00	; 0
    37fc:	e9 81       	ldd	r30, Y+1	; 0x01
    37fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3800:	82 81       	ldd	r24, Z+2	; 0x02
    3802:	93 81       	ldd	r25, Z+3	; 0x03
    3804:	88 2f       	mov	r24, r24
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	11 96       	adiw	r26, 0x01	; 1
    380a:	9c 93       	st	X, r25
    380c:	8e 93       	st	-X, r24
     		TIMSK |= (1<<OCIE1A);// Enable Timer1 CompareA Interrupt
    380e:	a9 e5       	ldi	r26, 0x59	; 89
    3810:	b0 e0       	ldi	r27, 0x00	; 0
    3812:	e9 e5       	ldi	r30, 0x59	; 89
    3814:	f0 e0       	ldi	r31, 0x00	; 0
    3816:	80 81       	ld	r24, Z
    3818:	80 61       	ori	r24, 0x10	; 16
    381a:	8c 93       	st	X, r24
    381c:	27 c0       	rjmp	.+78     	; 0x386c <Timer_init+0x21c>

     		   break;

     	   case COMPAREB:

     		  TCCR1A &= ~(1<< WGM11) & ~(1<< WGM10);/*WGM11=0 ,WGM10=0 */
    381e:	af e4       	ldi	r26, 0x4F	; 79
    3820:	b0 e0       	ldi	r27, 0x00	; 0
    3822:	ef e4       	ldi	r30, 0x4F	; 79
    3824:	f0 e0       	ldi	r31, 0x00	; 0
    3826:	80 81       	ld	r24, Z
    3828:	8c 7f       	andi	r24, 0xFC	; 252
    382a:	8c 93       	st	X, r24
     		  TCCR1B &= ~(1<<  WGM13) ;/*WGM13=0 , WGM12=1*/
    382c:	ae e4       	ldi	r26, 0x4E	; 78
    382e:	b0 e0       	ldi	r27, 0x00	; 0
    3830:	ee e4       	ldi	r30, 0x4E	; 78
    3832:	f0 e0       	ldi	r31, 0x00	; 0
    3834:	80 81       	ld	r24, Z
    3836:	8f 7e       	andi	r24, 0xEF	; 239
    3838:	8c 93       	st	X, r24
     		  TCCR1B |= (1<<  WGM12);
    383a:	ae e4       	ldi	r26, 0x4E	; 78
    383c:	b0 e0       	ldi	r27, 0x00	; 0
    383e:	ee e4       	ldi	r30, 0x4E	; 78
    3840:	f0 e0       	ldi	r31, 0x00	; 0
    3842:	80 81       	ld	r24, Z
    3844:	88 60       	ori	r24, 0x08	; 8
    3846:	8c 93       	st	X, r24
     		  OCR1B = (uint8)Config_Ptr->timer_compare_MatchValue ;
    3848:	a8 e4       	ldi	r26, 0x48	; 72
    384a:	b0 e0       	ldi	r27, 0x00	; 0
    384c:	e9 81       	ldd	r30, Y+1	; 0x01
    384e:	fa 81       	ldd	r31, Y+2	; 0x02
    3850:	82 81       	ldd	r24, Z+2	; 0x02
    3852:	93 81       	ldd	r25, Z+3	; 0x03
    3854:	88 2f       	mov	r24, r24
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	11 96       	adiw	r26, 0x01	; 1
    385a:	9c 93       	st	X, r25
    385c:	8e 93       	st	-X, r24


         	  TIMSK |=  (1<<OCIE1B); // Enable Timer1 CompareB Interrupt
    385e:	a9 e5       	ldi	r26, 0x59	; 89
    3860:	b0 e0       	ldi	r27, 0x00	; 0
    3862:	e9 e5       	ldi	r30, 0x59	; 89
    3864:	f0 e0       	ldi	r31, 0x00	; 0
    3866:	80 81       	ld	r24, Z
    3868:	88 60       	ori	r24, 0x08	; 8
    386a:	8c 93       	st	X, r24
     		   break;

     	}

    	 TCCR1B =  (TCCR1B & 0xF8) | ((Config_Ptr->timer_clock)  & (0x07) )   ;
    386c:	ae e4       	ldi	r26, 0x4E	; 78
    386e:	b0 e0       	ldi	r27, 0x00	; 0
    3870:	ee e4       	ldi	r30, 0x4E	; 78
    3872:	f0 e0       	ldi	r31, 0x00	; 0
    3874:	80 81       	ld	r24, Z
    3876:	98 2f       	mov	r25, r24
    3878:	98 7f       	andi	r25, 0xF8	; 248
    387a:	e9 81       	ldd	r30, Y+1	; 0x01
    387c:	fa 81       	ldd	r31, Y+2	; 0x02
    387e:	85 81       	ldd	r24, Z+5	; 0x05
    3880:	87 70       	andi	r24, 0x07	; 7
    3882:	89 2b       	or	r24, r25
    3884:	8c 93       	st	X, r24
    	 TCNT1  =Config_Ptr->timer_InitialValue ;
    3886:	ac e4       	ldi	r26, 0x4C	; 76
    3888:	b0 e0       	ldi	r27, 0x00	; 0
    388a:	e9 81       	ldd	r30, Y+1	; 0x01
    388c:	fa 81       	ldd	r31, Y+2	; 0x02
    388e:	80 81       	ld	r24, Z
    3890:	91 81       	ldd	r25, Z+1	; 0x01
    3892:	11 96       	adiw	r26, 0x01	; 1
    3894:	9c 93       	st	X, r25
    3896:	8e 93       	st	-X, r24
    3898:	5a c0       	rjmp	.+180    	; 0x394e <Timer_init+0x2fe>





     } else if (Config_Ptr->timer_ID == TIMER2){
    389a:	e9 81       	ldd	r30, Y+1	; 0x01
    389c:	fa 81       	ldd	r31, Y+2	; 0x02
    389e:	84 81       	ldd	r24, Z+4	; 0x04
    38a0:	82 30       	cpi	r24, 0x02	; 2
    38a2:	09 f0       	breq	.+2      	; 0x38a6 <Timer_init+0x256>
    38a4:	54 c0       	rjmp	.+168    	; 0x394e <Timer_init+0x2fe>
    	   * 1. Non PWM mode FOC2=1
    	   *2-MODE configurable
    	    * 3. clock configurable
    	   * 4-intial value
    	    */
    	 TCCR2 = (1<<FOC2) ;
    38a6:	e5 e4       	ldi	r30, 0x45	; 69
    38a8:	f0 e0       	ldi	r31, 0x00	; 0
    38aa:	80 e8       	ldi	r24, 0x80	; 128
    38ac:	80 83       	st	Z, r24
    	// TCCR2 =  (TCCR0 & 0xB7) | (((Config_Ptr->timer_mode) & (0XFD)) << 2) | (((Config_Ptr->timer_mode) & (0XFE)) << 6) ;

     	switch(Config_Ptr->timer_mode){
    38ae:	e9 81       	ldd	r30, Y+1	; 0x01
    38b0:	fa 81       	ldd	r31, Y+2	; 0x02
    38b2:	86 81       	ldd	r24, Z+6	; 0x06
    38b4:	28 2f       	mov	r18, r24
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	3c 83       	std	Y+4, r19	; 0x04
    38ba:	2b 83       	std	Y+3, r18	; 0x03
    38bc:	8b 81       	ldd	r24, Y+3	; 0x03
    38be:	9c 81       	ldd	r25, Y+4	; 0x04
    38c0:	00 97       	sbiw	r24, 0x00	; 0
    38c2:	31 f0       	breq	.+12     	; 0x38d0 <Timer_init+0x280>
    38c4:	2b 81       	ldd	r18, Y+3	; 0x03
    38c6:	3c 81       	ldd	r19, Y+4	; 0x04
    38c8:	21 30       	cpi	r18, 0x01	; 1
    38ca:	31 05       	cpc	r19, r1
    38cc:	81 f0       	breq	.+32     	; 0x38ee <Timer_init+0x29e>
    38ce:	2b c0       	rjmp	.+86     	; 0x3926 <Timer_init+0x2d6>

     	   case NORMAL:

     		  TCCR2 &= ~(1<< WGM20) & ~(1<<WGM21);/*WGM20=0 ,WGM21=0 */
    38d0:	a5 e4       	ldi	r26, 0x45	; 69
    38d2:	b0 e0       	ldi	r27, 0x00	; 0
    38d4:	e5 e4       	ldi	r30, 0x45	; 69
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	80 81       	ld	r24, Z
    38da:	87 7b       	andi	r24, 0xB7	; 183
    38dc:	8c 93       	st	X, r24
       		  TIMSK |= (1<<TOIE2); // Enable Timer2 NORMAL Interrupt
    38de:	a9 e5       	ldi	r26, 0x59	; 89
    38e0:	b0 e0       	ldi	r27, 0x00	; 0
    38e2:	e9 e5       	ldi	r30, 0x59	; 89
    38e4:	f0 e0       	ldi	r31, 0x00	; 0
    38e6:	80 81       	ld	r24, Z
    38e8:	80 64       	ori	r24, 0x40	; 64
    38ea:	8c 93       	st	X, r24
    38ec:	1c c0       	rjmp	.+56     	; 0x3926 <Timer_init+0x2d6>
     		    break;

     	   case COMPARE:

      		  TCCR2 &= ~(1<< WGM20);/*WGM20=0 ,WGM21=1 */
    38ee:	a5 e4       	ldi	r26, 0x45	; 69
    38f0:	b0 e0       	ldi	r27, 0x00	; 0
    38f2:	e5 e4       	ldi	r30, 0x45	; 69
    38f4:	f0 e0       	ldi	r31, 0x00	; 0
    38f6:	80 81       	ld	r24, Z
    38f8:	8f 7b       	andi	r24, 0xBF	; 191
    38fa:	8c 93       	st	X, r24
     		  TCCR2 &= ~(1<<WGM21);
    38fc:	a5 e4       	ldi	r26, 0x45	; 69
    38fe:	b0 e0       	ldi	r27, 0x00	; 0
    3900:	e5 e4       	ldi	r30, 0x45	; 69
    3902:	f0 e0       	ldi	r31, 0x00	; 0
    3904:	80 81       	ld	r24, Z
    3906:	87 7f       	andi	r24, 0xF7	; 247
    3908:	8c 93       	st	X, r24
     		  /*No need for OC2 in this example so COM00=0 & COM01=0*/
     		 OCR2 =(uint8) Config_Ptr->timer_compare_MatchValue ;
    390a:	a3 e4       	ldi	r26, 0x43	; 67
    390c:	b0 e0       	ldi	r27, 0x00	; 0
    390e:	e9 81       	ldd	r30, Y+1	; 0x01
    3910:	fa 81       	ldd	r31, Y+2	; 0x02
    3912:	82 81       	ldd	r24, Z+2	; 0x02
    3914:	93 81       	ldd	r25, Z+3	; 0x03
    3916:	8c 93       	st	X, r24
    		 TIMSK |= (1<<OCIE2); // Enable Timer2 Compare Interrupt
    3918:	a9 e5       	ldi	r26, 0x59	; 89
    391a:	b0 e0       	ldi	r27, 0x00	; 0
    391c:	e9 e5       	ldi	r30, 0x59	; 89
    391e:	f0 e0       	ldi	r31, 0x00	; 0
    3920:	80 81       	ld	r24, Z
    3922:	80 68       	ori	r24, 0x80	; 128
    3924:	8c 93       	st	X, r24
     		   break;

     	}

    	 TCCR2 =  (TCCR0 & 0xF8) | ((Config_Ptr->timer_clock)  & (0x07) )  ;
    3926:	a5 e4       	ldi	r26, 0x45	; 69
    3928:	b0 e0       	ldi	r27, 0x00	; 0
    392a:	e3 e5       	ldi	r30, 0x53	; 83
    392c:	f0 e0       	ldi	r31, 0x00	; 0
    392e:	80 81       	ld	r24, Z
    3930:	98 2f       	mov	r25, r24
    3932:	98 7f       	andi	r25, 0xF8	; 248
    3934:	e9 81       	ldd	r30, Y+1	; 0x01
    3936:	fa 81       	ldd	r31, Y+2	; 0x02
    3938:	85 81       	ldd	r24, Z+5	; 0x05
    393a:	87 70       	andi	r24, 0x07	; 7
    393c:	89 2b       	or	r24, r25
    393e:	8c 93       	st	X, r24
    	 TCNT2 = Config_Ptr->timer_InitialValue ;
    3940:	a4 e4       	ldi	r26, 0x44	; 68
    3942:	b0 e0       	ldi	r27, 0x00	; 0
    3944:	e9 81       	ldd	r30, Y+1	; 0x01
    3946:	fa 81       	ldd	r31, Y+2	; 0x02
    3948:	80 81       	ld	r24, Z
    394a:	91 81       	ldd	r25, Z+1	; 0x01
    394c:	8c 93       	st	X, r24



     }

}
    394e:	28 96       	adiw	r28, 0x08	; 8
    3950:	0f b6       	in	r0, 0x3f	; 63
    3952:	f8 94       	cli
    3954:	de bf       	out	0x3e, r29	; 62
    3956:	0f be       	out	0x3f, r0	; 63
    3958:	cd bf       	out	0x3d, r28	; 61
    395a:	cf 91       	pop	r28
    395c:	df 91       	pop	r29
    395e:	08 95       	ret

00003960 <Timer_deInit>:
 *
 * Inputs: Timer_ID
 *
 */

void Timer_deInit(Timer_ID_Type timer_type){
    3960:	df 93       	push	r29
    3962:	cf 93       	push	r28
    3964:	0f 92       	push	r0
    3966:	cd b7       	in	r28, 0x3d	; 61
    3968:	de b7       	in	r29, 0x3e	; 62
    396a:	89 83       	std	Y+1, r24	; 0x01

	 if ( timer_type == TIMER0){
    396c:	89 81       	ldd	r24, Y+1	; 0x01
    396e:	88 23       	and	r24, r24
    3970:	a9 f4       	brne	.+42     	; 0x399c <Timer_deInit+0x3c>

		 TCCR0 &= 0xF8 ; /*Disable clock to pause the Timer0*/
    3972:	a3 e5       	ldi	r26, 0x53	; 83
    3974:	b0 e0       	ldi	r27, 0x00	; 0
    3976:	e3 e5       	ldi	r30, 0x53	; 83
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	80 81       	ld	r24, Z
    397c:	88 7f       	andi	r24, 0xF8	; 248
    397e:	8c 93       	st	X, r24
		  TIMSK &= 0xFC;  /* Disable interrupt */
    3980:	a9 e5       	ldi	r26, 0x59	; 89
    3982:	b0 e0       	ldi	r27, 0x00	; 0
    3984:	e9 e5       	ldi	r30, 0x59	; 89
    3986:	f0 e0       	ldi	r31, 0x00	; 0
    3988:	80 81       	ld	r24, Z
    398a:	8c 7f       	andi	r24, 0xFC	; 252
    398c:	8c 93       	st	X, r24
			TCNT0=0;
    398e:	e2 e5       	ldi	r30, 0x52	; 82
    3990:	f0 e0       	ldi	r31, 0x00	; 0
    3992:	10 82       	st	Z, r1
			OCR0=0;
    3994:	ec e5       	ldi	r30, 0x5C	; 92
    3996:	f0 e0       	ldi	r31, 0x00	; 0
    3998:	10 82       	st	Z, r1
    399a:	38 c0       	rjmp	.+112    	; 0x3a0c <Timer_deInit+0xac>



	 }else if (timer_type== TIMER1){
    399c:	89 81       	ldd	r24, Y+1	; 0x01
    399e:	81 30       	cpi	r24, 0x01	; 1
    39a0:	f1 f4       	brne	.+60     	; 0x39de <Timer_deInit+0x7e>

		 TCCR1B &= 0xF8 ; /*Disable clock to pause the Timer1*/
    39a2:	ae e4       	ldi	r26, 0x4E	; 78
    39a4:	b0 e0       	ldi	r27, 0x00	; 0
    39a6:	ee e4       	ldi	r30, 0x4E	; 78
    39a8:	f0 e0       	ldi	r31, 0x00	; 0
    39aa:	80 81       	ld	r24, Z
    39ac:	88 7f       	andi	r24, 0xF8	; 248
    39ae:	8c 93       	st	X, r24
		  TIMSK &= 0xE3;  /* Disable interrupt */
    39b0:	a9 e5       	ldi	r26, 0x59	; 89
    39b2:	b0 e0       	ldi	r27, 0x00	; 0
    39b4:	e9 e5       	ldi	r30, 0x59	; 89
    39b6:	f0 e0       	ldi	r31, 0x00	; 0
    39b8:	80 81       	ld	r24, Z
    39ba:	83 7e       	andi	r24, 0xE3	; 227
    39bc:	8c 93       	st	X, r24
			TCCR1A = 0;
    39be:	ef e4       	ldi	r30, 0x4F	; 79
    39c0:	f0 e0       	ldi	r31, 0x00	; 0
    39c2:	10 82       	st	Z, r1
			TCNT1 = 0;
    39c4:	ec e4       	ldi	r30, 0x4C	; 76
    39c6:	f0 e0       	ldi	r31, 0x00	; 0
    39c8:	11 82       	std	Z+1, r1	; 0x01
    39ca:	10 82       	st	Z, r1
			OCR1A = 0;
    39cc:	ea e4       	ldi	r30, 0x4A	; 74
    39ce:	f0 e0       	ldi	r31, 0x00	; 0
    39d0:	11 82       	std	Z+1, r1	; 0x01
    39d2:	10 82       	st	Z, r1
			OCR1B = 0;
    39d4:	e8 e4       	ldi	r30, 0x48	; 72
    39d6:	f0 e0       	ldi	r31, 0x00	; 0
    39d8:	11 82       	std	Z+1, r1	; 0x01
    39da:	10 82       	st	Z, r1
    39dc:	17 c0       	rjmp	.+46     	; 0x3a0c <Timer_deInit+0xac>


	 }else if (timer_type == TIMER2){
    39de:	89 81       	ldd	r24, Y+1	; 0x01
    39e0:	82 30       	cpi	r24, 0x02	; 2
    39e2:	a1 f4       	brne	.+40     	; 0x3a0c <Timer_deInit+0xac>


		 TCCR2 &= 0xF8 ; /*Disable clock to pause the Timer2*/
    39e4:	a5 e4       	ldi	r26, 0x45	; 69
    39e6:	b0 e0       	ldi	r27, 0x00	; 0
    39e8:	e5 e4       	ldi	r30, 0x45	; 69
    39ea:	f0 e0       	ldi	r31, 0x00	; 0
    39ec:	80 81       	ld	r24, Z
    39ee:	88 7f       	andi	r24, 0xF8	; 248
    39f0:	8c 93       	st	X, r24
		  TIMSK &= 0x3F;  /* Disable interrupt */
    39f2:	a9 e5       	ldi	r26, 0x59	; 89
    39f4:	b0 e0       	ldi	r27, 0x00	; 0
    39f6:	e9 e5       	ldi	r30, 0x59	; 89
    39f8:	f0 e0       	ldi	r31, 0x00	; 0
    39fa:	80 81       	ld	r24, Z
    39fc:	8f 73       	andi	r24, 0x3F	; 63
    39fe:	8c 93       	st	X, r24
			TCNT2 = 0;
    3a00:	e4 e4       	ldi	r30, 0x44	; 68
    3a02:	f0 e0       	ldi	r31, 0x00	; 0
    3a04:	10 82       	st	Z, r1
			OCR2 = 0;
    3a06:	e3 e4       	ldi	r30, 0x43	; 67
    3a08:	f0 e0       	ldi	r31, 0x00	; 0
    3a0a:	10 82       	st	Z, r1


	 }

}
    3a0c:	0f 90       	pop	r0
    3a0e:	cf 91       	pop	r28
    3a10:	df 91       	pop	r29
    3a12:	08 95       	ret

00003a14 <Timer_setCallBack>:
 * Function to set the Call Back function address to the required Timer.
 *
 * Inputs: pointer to Call Back function and Timer Id you want to set The Callback to it.
 *
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID ){
    3a14:	df 93       	push	r29
    3a16:	cf 93       	push	r28
    3a18:	00 d0       	rcall	.+0      	; 0x3a1a <Timer_setCallBack+0x6>
    3a1a:	0f 92       	push	r0
    3a1c:	cd b7       	in	r28, 0x3d	; 61
    3a1e:	de b7       	in	r29, 0x3e	; 62
    3a20:	9a 83       	std	Y+2, r25	; 0x02
    3a22:	89 83       	std	Y+1, r24	; 0x01
    3a24:	6b 83       	std	Y+3, r22	; 0x03


	if (a_timer_ID==TIMER0){
    3a26:	8b 81       	ldd	r24, Y+3	; 0x03
    3a28:	88 23       	and	r24, r24
    3a2a:	39 f4       	brne	.+14     	; 0x3a3a <Timer_setCallBack+0x26>

	/* Save the address of the Call back function in a global variable */
		g_callBackPtr0 = a_ptr;
    3a2c:	89 81       	ldd	r24, Y+1	; 0x01
    3a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a30:	90 93 2f 01 	sts	0x012F, r25
    3a34:	80 93 2e 01 	sts	0x012E, r24
    3a38:	13 c0       	rjmp	.+38     	; 0x3a60 <Timer_setCallBack+0x4c>

	} else if (a_timer_ID==TIMER1){
    3a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3c:	81 30       	cpi	r24, 0x01	; 1
    3a3e:	39 f4       	brne	.+14     	; 0x3a4e <Timer_setCallBack+0x3a>

		/* Save the address of the Call back function in a global variable */
		g_callBackPtr1 = a_ptr;
    3a40:	89 81       	ldd	r24, Y+1	; 0x01
    3a42:	9a 81       	ldd	r25, Y+2	; 0x02
    3a44:	90 93 31 01 	sts	0x0131, r25
    3a48:	80 93 30 01 	sts	0x0130, r24
    3a4c:	09 c0       	rjmp	.+18     	; 0x3a60 <Timer_setCallBack+0x4c>


	}else if (a_timer_ID==TIMER2){
    3a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a50:	82 30       	cpi	r24, 0x02	; 2
    3a52:	31 f4       	brne	.+12     	; 0x3a60 <Timer_setCallBack+0x4c>

		/* Save the address of the Call back function in a global variable */
		g_callBackPtr2 = a_ptr;
    3a54:	89 81       	ldd	r24, Y+1	; 0x01
    3a56:	9a 81       	ldd	r25, Y+2	; 0x02
    3a58:	90 93 33 01 	sts	0x0133, r25
    3a5c:	80 93 32 01 	sts	0x0132, r24

	}



}
    3a60:	0f 90       	pop	r0
    3a62:	0f 90       	pop	r0
    3a64:	0f 90       	pop	r0
    3a66:	cf 91       	pop	r28
    3a68:	df 91       	pop	r29
    3a6a:	08 95       	ret

00003a6c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3a6c:	df 93       	push	r29
    3a6e:	cf 93       	push	r28
    3a70:	00 d0       	rcall	.+0      	; 0x3a72 <UART_init+0x6>
    3a72:	00 d0       	rcall	.+0      	; 0x3a74 <UART_init+0x8>
    3a74:	00 d0       	rcall	.+0      	; 0x3a76 <UART_init+0xa>
    3a76:	cd b7       	in	r28, 0x3d	; 61
    3a78:	de b7       	in	r29, 0x3e	; 62
    3a7a:	9c 83       	std	Y+4, r25	; 0x04
    3a7c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3a7e:	1a 82       	std	Y+2, r1	; 0x02
    3a80:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3a82:	eb e2       	ldi	r30, 0x2B	; 43
    3a84:	f0 e0       	ldi	r31, 0x00	; 0
    3a86:	82 e0       	ldi	r24, 0x02	; 2
    3a88:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = configurable data bit type
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3a8a:	ea e2       	ldi	r30, 0x2A	; 42
    3a8c:	f0 e0       	ldi	r31, 0x00	; 0
    3a8e:	88 e1       	ldi	r24, 0x18	; 24
    3a90:	80 83       	st	Z, r24
	//UCSRB = (UCSRB & 0xFB) | ((Config_Ptr->bit_data) & (0x04));
	switch(Config_Ptr->bit_data){
    3a92:	eb 81       	ldd	r30, Y+3	; 0x03
    3a94:	fc 81       	ldd	r31, Y+4	; 0x04
    3a96:	80 81       	ld	r24, Z
    3a98:	28 2f       	mov	r18, r24
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	3e 83       	std	Y+6, r19	; 0x06
    3a9e:	2d 83       	std	Y+5, r18	; 0x05
    3aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa4:	82 30       	cpi	r24, 0x02	; 2
    3aa6:	91 05       	cpc	r25, r1
    3aa8:	09 f4       	brne	.+2      	; 0x3aac <UART_init+0x40>
    3aaa:	41 c0       	rjmp	.+130    	; 0x3b2e <UART_init+0xc2>
    3aac:	2d 81       	ldd	r18, Y+5	; 0x05
    3aae:	3e 81       	ldd	r19, Y+6	; 0x06
    3ab0:	23 30       	cpi	r18, 0x03	; 3
    3ab2:	31 05       	cpc	r19, r1
    3ab4:	54 f4       	brge	.+20     	; 0x3aca <UART_init+0x5e>
    3ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    3aba:	00 97       	sbiw	r24, 0x00	; 0
    3abc:	99 f0       	breq	.+38     	; 0x3ae4 <UART_init+0x78>
    3abe:	2d 81       	ldd	r18, Y+5	; 0x05
    3ac0:	3e 81       	ldd	r19, Y+6	; 0x06
    3ac2:	21 30       	cpi	r18, 0x01	; 1
    3ac4:	31 05       	cpc	r19, r1
    3ac6:	e9 f0       	breq	.+58     	; 0x3b02 <UART_init+0x96>
    3ac8:	65 c0       	rjmp	.+202    	; 0x3b94 <UART_init+0x128>
    3aca:	8d 81       	ldd	r24, Y+5	; 0x05
    3acc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ace:	83 30       	cpi	r24, 0x03	; 3
    3ad0:	91 05       	cpc	r25, r1
    3ad2:	09 f4       	brne	.+2      	; 0x3ad6 <UART_init+0x6a>
    3ad4:	42 c0       	rjmp	.+132    	; 0x3b5a <UART_init+0xee>
    3ad6:	2d 81       	ldd	r18, Y+5	; 0x05
    3ad8:	3e 81       	ldd	r19, Y+6	; 0x06
    3ada:	27 30       	cpi	r18, 0x07	; 7
    3adc:	31 05       	cpc	r19, r1
    3ade:	09 f4       	brne	.+2      	; 0x3ae2 <UART_init+0x76>
    3ae0:	4b c0       	rjmp	.+150    	; 0x3b78 <UART_init+0x10c>
    3ae2:	58 c0       	rjmp	.+176    	; 0x3b94 <UART_init+0x128>

	   case BITS_5:

		   UCSRC &= ~(1<<UCSZ1) & ~(1<<UCSZ0);/*UCSZ1:0=0 ,UCSZ2=0 */
    3ae4:	a0 e4       	ldi	r26, 0x40	; 64
    3ae6:	b0 e0       	ldi	r27, 0x00	; 0
    3ae8:	e0 e4       	ldi	r30, 0x40	; 64
    3aea:	f0 e0       	ldi	r31, 0x00	; 0
    3aec:	80 81       	ld	r24, Z
    3aee:	89 7f       	andi	r24, 0xF9	; 249
    3af0:	8c 93       	st	X, r24
		   UCSRB &= ~(1<<UCSZ2);
    3af2:	aa e2       	ldi	r26, 0x2A	; 42
    3af4:	b0 e0       	ldi	r27, 0x00	; 0
    3af6:	ea e2       	ldi	r30, 0x2A	; 42
    3af8:	f0 e0       	ldi	r31, 0x00	; 0
    3afa:	80 81       	ld	r24, Z
    3afc:	8b 7f       	andi	r24, 0xFB	; 251
    3afe:	8c 93       	st	X, r24
    3b00:	49 c0       	rjmp	.+146    	; 0x3b94 <UART_init+0x128>
		   break;

	   case BITS_6:

		   UCSRC &= ~(1<<UCSZ1) ;/*UCSZ0=1 UCSZ1=0 ,UCSZ2=0 */
    3b02:	a0 e4       	ldi	r26, 0x40	; 64
    3b04:	b0 e0       	ldi	r27, 0x00	; 0
    3b06:	e0 e4       	ldi	r30, 0x40	; 64
    3b08:	f0 e0       	ldi	r31, 0x00	; 0
    3b0a:	80 81       	ld	r24, Z
    3b0c:	8b 7f       	andi	r24, 0xFB	; 251
    3b0e:	8c 93       	st	X, r24
		   UCSRC |= (1<<UCSZ0);
    3b10:	a0 e4       	ldi	r26, 0x40	; 64
    3b12:	b0 e0       	ldi	r27, 0x00	; 0
    3b14:	e0 e4       	ldi	r30, 0x40	; 64
    3b16:	f0 e0       	ldi	r31, 0x00	; 0
    3b18:	80 81       	ld	r24, Z
    3b1a:	82 60       	ori	r24, 0x02	; 2
    3b1c:	8c 93       	st	X, r24
		   UCSRB &= ~(1<<UCSZ2);
    3b1e:	aa e2       	ldi	r26, 0x2A	; 42
    3b20:	b0 e0       	ldi	r27, 0x00	; 0
    3b22:	ea e2       	ldi	r30, 0x2A	; 42
    3b24:	f0 e0       	ldi	r31, 0x00	; 0
    3b26:	80 81       	ld	r24, Z
    3b28:	8b 7f       	andi	r24, 0xFB	; 251
    3b2a:	8c 93       	st	X, r24
    3b2c:	33 c0       	rjmp	.+102    	; 0x3b94 <UART_init+0x128>

		   break;

	   case BITS_7:

		   UCSRC &= ~(1<<UCSZ0);/*UCSZ0=0 UCSZ1=1 ,UCSZ2=0 */
    3b2e:	a0 e4       	ldi	r26, 0x40	; 64
    3b30:	b0 e0       	ldi	r27, 0x00	; 0
    3b32:	e0 e4       	ldi	r30, 0x40	; 64
    3b34:	f0 e0       	ldi	r31, 0x00	; 0
    3b36:	80 81       	ld	r24, Z
    3b38:	8d 7f       	andi	r24, 0xFD	; 253
    3b3a:	8c 93       	st	X, r24
		   UCSRC |= (1<<UCSZ1);
    3b3c:	a0 e4       	ldi	r26, 0x40	; 64
    3b3e:	b0 e0       	ldi	r27, 0x00	; 0
    3b40:	e0 e4       	ldi	r30, 0x40	; 64
    3b42:	f0 e0       	ldi	r31, 0x00	; 0
    3b44:	80 81       	ld	r24, Z
    3b46:	84 60       	ori	r24, 0x04	; 4
    3b48:	8c 93       	st	X, r24
		   UCSRB &= ~(1<<UCSZ2);
    3b4a:	aa e2       	ldi	r26, 0x2A	; 42
    3b4c:	b0 e0       	ldi	r27, 0x00	; 0
    3b4e:	ea e2       	ldi	r30, 0x2A	; 42
    3b50:	f0 e0       	ldi	r31, 0x00	; 0
    3b52:	80 81       	ld	r24, Z
    3b54:	8b 7f       	andi	r24, 0xFB	; 251
    3b56:	8c 93       	st	X, r24
    3b58:	1d c0       	rjmp	.+58     	; 0x3b94 <UART_init+0x128>

		   break;

	   case BITS_8:

		   UCSRC |= (1<<UCSZ1) | (1<<UCSZ0);/*UCSZ0=1 UCSZ1=1 ,UCSZ2=0 */
    3b5a:	a0 e4       	ldi	r26, 0x40	; 64
    3b5c:	b0 e0       	ldi	r27, 0x00	; 0
    3b5e:	e0 e4       	ldi	r30, 0x40	; 64
    3b60:	f0 e0       	ldi	r31, 0x00	; 0
    3b62:	80 81       	ld	r24, Z
    3b64:	86 60       	ori	r24, 0x06	; 6
    3b66:	8c 93       	st	X, r24
		   UCSRB &= ~(1<<UCSZ2);
    3b68:	aa e2       	ldi	r26, 0x2A	; 42
    3b6a:	b0 e0       	ldi	r27, 0x00	; 0
    3b6c:	ea e2       	ldi	r30, 0x2A	; 42
    3b6e:	f0 e0       	ldi	r31, 0x00	; 0
    3b70:	80 81       	ld	r24, Z
    3b72:	8b 7f       	andi	r24, 0xFB	; 251
    3b74:	8c 93       	st	X, r24
    3b76:	0e c0       	rjmp	.+28     	; 0x3b94 <UART_init+0x128>

		   break;

	   case BITS_9:

		   UCSRC |= (1<<UCSZ1) | (1<<UCSZ0);/*UCSZ0=1 UCSZ1=1 ,UCSZ2=1 */
    3b78:	a0 e4       	ldi	r26, 0x40	; 64
    3b7a:	b0 e0       	ldi	r27, 0x00	; 0
    3b7c:	e0 e4       	ldi	r30, 0x40	; 64
    3b7e:	f0 e0       	ldi	r31, 0x00	; 0
    3b80:	80 81       	ld	r24, Z
    3b82:	86 60       	ori	r24, 0x06	; 6
    3b84:	8c 93       	st	X, r24
		   UCSRB |= (1<<UCSZ2);
    3b86:	aa e2       	ldi	r26, 0x2A	; 42
    3b88:	b0 e0       	ldi	r27, 0x00	; 0
    3b8a:	ea e2       	ldi	r30, 0x2A	; 42
    3b8c:	f0 e0       	ldi	r31, 0x00	; 0
    3b8e:	80 81       	ld	r24, Z
    3b90:	84 60       	ori	r24, 0x04	; 4
    3b92:	8c 93       	st	X, r24
	 * UPM1:0  = configurable parity bit type
	 * USBS    = configurable stop bit type
	 * UCSZ1:0 =configurable data bit type
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL)  ;
    3b94:	e0 e4       	ldi	r30, 0x40	; 64
    3b96:	f0 e0       	ldi	r31, 0x00	; 0
    3b98:	80 e8       	ldi	r24, 0x80	; 128
    3b9a:	80 83       	st	Z, r24
	//UCSRC = (UCSRC & 0xF9) | (((Config_Ptr->bit_data) & (0x03))<<1);
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity) << UPM0);
    3b9c:	a0 e4       	ldi	r26, 0x40	; 64
    3b9e:	b0 e0       	ldi	r27, 0x00	; 0
    3ba0:	e0 e4       	ldi	r30, 0x40	; 64
    3ba2:	f0 e0       	ldi	r31, 0x00	; 0
    3ba4:	80 81       	ld	r24, Z
    3ba6:	28 2f       	mov	r18, r24
    3ba8:	2f 7c       	andi	r18, 0xCF	; 207
    3baa:	eb 81       	ldd	r30, Y+3	; 0x03
    3bac:	fc 81       	ldd	r31, Y+4	; 0x04
    3bae:	81 81       	ldd	r24, Z+1	; 0x01
    3bb0:	88 2f       	mov	r24, r24
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	82 95       	swap	r24
    3bb6:	92 95       	swap	r25
    3bb8:	90 7f       	andi	r25, 0xF0	; 240
    3bba:	98 27       	eor	r25, r24
    3bbc:	80 7f       	andi	r24, 0xF0	; 240
    3bbe:	98 27       	eor	r25, r24
    3bc0:	82 2b       	or	r24, r18
    3bc2:	8c 93       	st	X, r24


	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit) << USBS );
    3bc4:	a0 e4       	ldi	r26, 0x40	; 64
    3bc6:	b0 e0       	ldi	r27, 0x00	; 0
    3bc8:	e0 e4       	ldi	r30, 0x40	; 64
    3bca:	f0 e0       	ldi	r31, 0x00	; 0
    3bcc:	80 81       	ld	r24, Z
    3bce:	28 2f       	mov	r18, r24
    3bd0:	27 7f       	andi	r18, 0xF7	; 247
    3bd2:	eb 81       	ldd	r30, Y+3	; 0x03
    3bd4:	fc 81       	ldd	r31, Y+4	; 0x04
    3bd6:	82 81       	ldd	r24, Z+2	; 0x02
    3bd8:	88 2f       	mov	r24, r24
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	88 0f       	add	r24, r24
    3bde:	99 1f       	adc	r25, r25
    3be0:	88 0f       	add	r24, r24
    3be2:	99 1f       	adc	r25, r25
    3be4:	88 0f       	add	r24, r24
    3be6:	99 1f       	adc	r25, r25
    3be8:	82 2b       	or	r24, r18
    3bea:	8c 93       	st	X, r24
	

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    3bec:	eb 81       	ldd	r30, Y+3	; 0x03
    3bee:	fc 81       	ldd	r31, Y+4	; 0x04
    3bf0:	83 81       	ldd	r24, Z+3	; 0x03
    3bf2:	94 81       	ldd	r25, Z+4	; 0x04
    3bf4:	a5 81       	ldd	r26, Z+5	; 0x05
    3bf6:	b6 81       	ldd	r27, Z+6	; 0x06
    3bf8:	88 0f       	add	r24, r24
    3bfa:	99 1f       	adc	r25, r25
    3bfc:	aa 1f       	adc	r26, r26
    3bfe:	bb 1f       	adc	r27, r27
    3c00:	88 0f       	add	r24, r24
    3c02:	99 1f       	adc	r25, r25
    3c04:	aa 1f       	adc	r26, r26
    3c06:	bb 1f       	adc	r27, r27
    3c08:	88 0f       	add	r24, r24
    3c0a:	99 1f       	adc	r25, r25
    3c0c:	aa 1f       	adc	r26, r26
    3c0e:	bb 1f       	adc	r27, r27
    3c10:	9c 01       	movw	r18, r24
    3c12:	ad 01       	movw	r20, r26
    3c14:	80 e0       	ldi	r24, 0x00	; 0
    3c16:	92 e1       	ldi	r25, 0x12	; 18
    3c18:	aa e7       	ldi	r26, 0x7A	; 122
    3c1a:	b0 e0       	ldi	r27, 0x00	; 0
    3c1c:	bc 01       	movw	r22, r24
    3c1e:	cd 01       	movw	r24, r26
    3c20:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__udivmodsi4>
    3c24:	da 01       	movw	r26, r20
    3c26:	c9 01       	movw	r24, r18
    3c28:	01 97       	sbiw	r24, 0x01	; 1
    3c2a:	9a 83       	std	Y+2, r25	; 0x02
    3c2c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3c2e:	e0 e4       	ldi	r30, 0x40	; 64
    3c30:	f0 e0       	ldi	r31, 0x00	; 0
    3c32:	89 81       	ldd	r24, Y+1	; 0x01
    3c34:	9a 81       	ldd	r25, Y+2	; 0x02
    3c36:	89 2f       	mov	r24, r25
    3c38:	99 27       	eor	r25, r25
    3c3a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3c3c:	e9 e2       	ldi	r30, 0x29	; 41
    3c3e:	f0 e0       	ldi	r31, 0x00	; 0
    3c40:	89 81       	ldd	r24, Y+1	; 0x01
    3c42:	80 83       	st	Z, r24
}
    3c44:	26 96       	adiw	r28, 0x06	; 6
    3c46:	0f b6       	in	r0, 0x3f	; 63
    3c48:	f8 94       	cli
    3c4a:	de bf       	out	0x3e, r29	; 62
    3c4c:	0f be       	out	0x3f, r0	; 63
    3c4e:	cd bf       	out	0x3d, r28	; 61
    3c50:	cf 91       	pop	r28
    3c52:	df 91       	pop	r29
    3c54:	08 95       	ret

00003c56 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3c56:	df 93       	push	r29
    3c58:	cf 93       	push	r28
    3c5a:	0f 92       	push	r0
    3c5c:	cd b7       	in	r28, 0x3d	; 61
    3c5e:	de b7       	in	r29, 0x3e	; 62
    3c60:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3c62:	eb e2       	ldi	r30, 0x2B	; 43
    3c64:	f0 e0       	ldi	r31, 0x00	; 0
    3c66:	80 81       	ld	r24, Z
    3c68:	88 2f       	mov	r24, r24
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	80 72       	andi	r24, 0x20	; 32
    3c6e:	90 70       	andi	r25, 0x00	; 0
    3c70:	00 97       	sbiw	r24, 0x00	; 0
    3c72:	b9 f3       	breq	.-18     	; 0x3c62 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3c74:	ec e2       	ldi	r30, 0x2C	; 44
    3c76:	f0 e0       	ldi	r31, 0x00	; 0
    3c78:	89 81       	ldd	r24, Y+1	; 0x01
    3c7a:	80 83       	st	Z, r24


}
    3c7c:	0f 90       	pop	r0
    3c7e:	cf 91       	pop	r28
    3c80:	df 91       	pop	r29
    3c82:	08 95       	ret

00003c84 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3c84:	df 93       	push	r29
    3c86:	cf 93       	push	r28
    3c88:	cd b7       	in	r28, 0x3d	; 61
    3c8a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3c8c:	eb e2       	ldi	r30, 0x2B	; 43
    3c8e:	f0 e0       	ldi	r31, 0x00	; 0
    3c90:	80 81       	ld	r24, Z
    3c92:	88 23       	and	r24, r24
    3c94:	dc f7       	brge	.-10     	; 0x3c8c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3c96:	ec e2       	ldi	r30, 0x2C	; 44
    3c98:	f0 e0       	ldi	r31, 0x00	; 0
    3c9a:	80 81       	ld	r24, Z
}
    3c9c:	cf 91       	pop	r28
    3c9e:	df 91       	pop	r29
    3ca0:	08 95       	ret

00003ca2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3ca2:	df 93       	push	r29
    3ca4:	cf 93       	push	r28
    3ca6:	00 d0       	rcall	.+0      	; 0x3ca8 <UART_sendString+0x6>
    3ca8:	0f 92       	push	r0
    3caa:	cd b7       	in	r28, 0x3d	; 61
    3cac:	de b7       	in	r29, 0x3e	; 62
    3cae:	9b 83       	std	Y+3, r25	; 0x03
    3cb0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3cb2:	19 82       	std	Y+1, r1	; 0x01
    3cb4:	0e c0       	rjmp	.+28     	; 0x3cd2 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3cb6:	89 81       	ldd	r24, Y+1	; 0x01
    3cb8:	28 2f       	mov	r18, r24
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cbe:	9b 81       	ldd	r25, Y+3	; 0x03
    3cc0:	fc 01       	movw	r30, r24
    3cc2:	e2 0f       	add	r30, r18
    3cc4:	f3 1f       	adc	r31, r19
    3cc6:	80 81       	ld	r24, Z
    3cc8:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <UART_sendByte>
		i++;
    3ccc:	89 81       	ldd	r24, Y+1	; 0x01
    3cce:	8f 5f       	subi	r24, 0xFF	; 255
    3cd0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3cd2:	89 81       	ldd	r24, Y+1	; 0x01
    3cd4:	28 2f       	mov	r18, r24
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cda:	9b 81       	ldd	r25, Y+3	; 0x03
    3cdc:	fc 01       	movw	r30, r24
    3cde:	e2 0f       	add	r30, r18
    3ce0:	f3 1f       	adc	r31, r19
    3ce2:	80 81       	ld	r24, Z
    3ce4:	88 23       	and	r24, r24
    3ce6:	39 f7       	brne	.-50     	; 0x3cb6 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}

}
    3ce8:	0f 90       	pop	r0
    3cea:	0f 90       	pop	r0
    3cec:	0f 90       	pop	r0
    3cee:	cf 91       	pop	r28
    3cf0:	df 91       	pop	r29
    3cf2:	08 95       	ret

00003cf4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3cf4:	0f 93       	push	r16
    3cf6:	1f 93       	push	r17
    3cf8:	df 93       	push	r29
    3cfa:	cf 93       	push	r28
    3cfc:	00 d0       	rcall	.+0      	; 0x3cfe <UART_receiveString+0xa>
    3cfe:	0f 92       	push	r0
    3d00:	cd b7       	in	r28, 0x3d	; 61
    3d02:	de b7       	in	r29, 0x3e	; 62
    3d04:	9b 83       	std	Y+3, r25	; 0x03
    3d06:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3d08:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3d0a:	89 81       	ldd	r24, Y+1	; 0x01
    3d0c:	28 2f       	mov	r18, r24
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	8a 81       	ldd	r24, Y+2	; 0x02
    3d12:	9b 81       	ldd	r25, Y+3	; 0x03
    3d14:	8c 01       	movw	r16, r24
    3d16:	02 0f       	add	r16, r18
    3d18:	13 1f       	adc	r17, r19
    3d1a:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <UART_recieveByte>
    3d1e:	f8 01       	movw	r30, r16
    3d20:	80 83       	st	Z, r24
    3d22:	0f c0       	rjmp	.+30     	; 0x3d42 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3d24:	89 81       	ldd	r24, Y+1	; 0x01
    3d26:	8f 5f       	subi	r24, 0xFF	; 255
    3d28:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3d2a:	89 81       	ldd	r24, Y+1	; 0x01
    3d2c:	28 2f       	mov	r18, r24
    3d2e:	30 e0       	ldi	r19, 0x00	; 0
    3d30:	8a 81       	ldd	r24, Y+2	; 0x02
    3d32:	9b 81       	ldd	r25, Y+3	; 0x03
    3d34:	8c 01       	movw	r16, r24
    3d36:	02 0f       	add	r16, r18
    3d38:	13 1f       	adc	r17, r19
    3d3a:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <UART_recieveByte>
    3d3e:	f8 01       	movw	r30, r16
    3d40:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3d42:	89 81       	ldd	r24, Y+1	; 0x01
    3d44:	28 2f       	mov	r18, r24
    3d46:	30 e0       	ldi	r19, 0x00	; 0
    3d48:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d4c:	fc 01       	movw	r30, r24
    3d4e:	e2 0f       	add	r30, r18
    3d50:	f3 1f       	adc	r31, r19
    3d52:	80 81       	ld	r24, Z
    3d54:	83 32       	cpi	r24, 0x23	; 35
    3d56:	31 f7       	brne	.-52     	; 0x3d24 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3d58:	89 81       	ldd	r24, Y+1	; 0x01
    3d5a:	28 2f       	mov	r18, r24
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d60:	9b 81       	ldd	r25, Y+3	; 0x03
    3d62:	fc 01       	movw	r30, r24
    3d64:	e2 0f       	add	r30, r18
    3d66:	f3 1f       	adc	r31, r19
    3d68:	10 82       	st	Z, r1
}
    3d6a:	0f 90       	pop	r0
    3d6c:	0f 90       	pop	r0
    3d6e:	0f 90       	pop	r0
    3d70:	cf 91       	pop	r28
    3d72:	df 91       	pop	r29
    3d74:	1f 91       	pop	r17
    3d76:	0f 91       	pop	r16
    3d78:	08 95       	ret

00003d7a <__udivmodsi4>:
    3d7a:	a1 e2       	ldi	r26, 0x21	; 33
    3d7c:	1a 2e       	mov	r1, r26
    3d7e:	aa 1b       	sub	r26, r26
    3d80:	bb 1b       	sub	r27, r27
    3d82:	fd 01       	movw	r30, r26
    3d84:	0d c0       	rjmp	.+26     	; 0x3da0 <__udivmodsi4_ep>

00003d86 <__udivmodsi4_loop>:
    3d86:	aa 1f       	adc	r26, r26
    3d88:	bb 1f       	adc	r27, r27
    3d8a:	ee 1f       	adc	r30, r30
    3d8c:	ff 1f       	adc	r31, r31
    3d8e:	a2 17       	cp	r26, r18
    3d90:	b3 07       	cpc	r27, r19
    3d92:	e4 07       	cpc	r30, r20
    3d94:	f5 07       	cpc	r31, r21
    3d96:	20 f0       	brcs	.+8      	; 0x3da0 <__udivmodsi4_ep>
    3d98:	a2 1b       	sub	r26, r18
    3d9a:	b3 0b       	sbc	r27, r19
    3d9c:	e4 0b       	sbc	r30, r20
    3d9e:	f5 0b       	sbc	r31, r21

00003da0 <__udivmodsi4_ep>:
    3da0:	66 1f       	adc	r22, r22
    3da2:	77 1f       	adc	r23, r23
    3da4:	88 1f       	adc	r24, r24
    3da6:	99 1f       	adc	r25, r25
    3da8:	1a 94       	dec	r1
    3daa:	69 f7       	brne	.-38     	; 0x3d86 <__udivmodsi4_loop>
    3dac:	60 95       	com	r22
    3dae:	70 95       	com	r23
    3db0:	80 95       	com	r24
    3db2:	90 95       	com	r25
    3db4:	9b 01       	movw	r18, r22
    3db6:	ac 01       	movw	r20, r24
    3db8:	bd 01       	movw	r22, r26
    3dba:	cf 01       	movw	r24, r30
    3dbc:	08 95       	ret

00003dbe <__prologue_saves__>:
    3dbe:	2f 92       	push	r2
    3dc0:	3f 92       	push	r3
    3dc2:	4f 92       	push	r4
    3dc4:	5f 92       	push	r5
    3dc6:	6f 92       	push	r6
    3dc8:	7f 92       	push	r7
    3dca:	8f 92       	push	r8
    3dcc:	9f 92       	push	r9
    3dce:	af 92       	push	r10
    3dd0:	bf 92       	push	r11
    3dd2:	cf 92       	push	r12
    3dd4:	df 92       	push	r13
    3dd6:	ef 92       	push	r14
    3dd8:	ff 92       	push	r15
    3dda:	0f 93       	push	r16
    3ddc:	1f 93       	push	r17
    3dde:	cf 93       	push	r28
    3de0:	df 93       	push	r29
    3de2:	cd b7       	in	r28, 0x3d	; 61
    3de4:	de b7       	in	r29, 0x3e	; 62
    3de6:	ca 1b       	sub	r28, r26
    3de8:	db 0b       	sbc	r29, r27
    3dea:	0f b6       	in	r0, 0x3f	; 63
    3dec:	f8 94       	cli
    3dee:	de bf       	out	0x3e, r29	; 62
    3df0:	0f be       	out	0x3f, r0	; 63
    3df2:	cd bf       	out	0x3d, r28	; 61
    3df4:	09 94       	ijmp

00003df6 <__epilogue_restores__>:
    3df6:	2a 88       	ldd	r2, Y+18	; 0x12
    3df8:	39 88       	ldd	r3, Y+17	; 0x11
    3dfa:	48 88       	ldd	r4, Y+16	; 0x10
    3dfc:	5f 84       	ldd	r5, Y+15	; 0x0f
    3dfe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e00:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e02:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e04:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e06:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e08:	b9 84       	ldd	r11, Y+9	; 0x09
    3e0a:	c8 84       	ldd	r12, Y+8	; 0x08
    3e0c:	df 80       	ldd	r13, Y+7	; 0x07
    3e0e:	ee 80       	ldd	r14, Y+6	; 0x06
    3e10:	fd 80       	ldd	r15, Y+5	; 0x05
    3e12:	0c 81       	ldd	r16, Y+4	; 0x04
    3e14:	1b 81       	ldd	r17, Y+3	; 0x03
    3e16:	aa 81       	ldd	r26, Y+2	; 0x02
    3e18:	b9 81       	ldd	r27, Y+1	; 0x01
    3e1a:	ce 0f       	add	r28, r30
    3e1c:	d1 1d       	adc	r29, r1
    3e1e:	0f b6       	in	r0, 0x3f	; 63
    3e20:	f8 94       	cli
    3e22:	de bf       	out	0x3e, r29	; 62
    3e24:	0f be       	out	0x3f, r0	; 63
    3e26:	cd bf       	out	0x3d, r28	; 61
    3e28:	ed 01       	movw	r28, r26
    3e2a:	08 95       	ret

00003e2c <itoa>:
    3e2c:	fb 01       	movw	r30, r22
    3e2e:	9f 01       	movw	r18, r30
    3e30:	e8 94       	clt
    3e32:	42 30       	cpi	r20, 0x02	; 2
    3e34:	c4 f0       	brlt	.+48     	; 0x3e66 <itoa+0x3a>
    3e36:	45 32       	cpi	r20, 0x25	; 37
    3e38:	b4 f4       	brge	.+44     	; 0x3e66 <itoa+0x3a>
    3e3a:	4a 30       	cpi	r20, 0x0A	; 10
    3e3c:	29 f4       	brne	.+10     	; 0x3e48 <itoa+0x1c>
    3e3e:	97 fb       	bst	r25, 7
    3e40:	1e f4       	brtc	.+6      	; 0x3e48 <itoa+0x1c>
    3e42:	90 95       	com	r25
    3e44:	81 95       	neg	r24
    3e46:	9f 4f       	sbci	r25, 0xFF	; 255
    3e48:	64 2f       	mov	r22, r20
    3e4a:	77 27       	eor	r23, r23
    3e4c:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__udivmodhi4>
    3e50:	80 5d       	subi	r24, 0xD0	; 208
    3e52:	8a 33       	cpi	r24, 0x3A	; 58
    3e54:	0c f0       	brlt	.+2      	; 0x3e58 <itoa+0x2c>
    3e56:	89 5d       	subi	r24, 0xD9	; 217
    3e58:	81 93       	st	Z+, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	00 97       	sbiw	r24, 0x00	; 0
    3e5e:	a1 f7       	brne	.-24     	; 0x3e48 <itoa+0x1c>
    3e60:	16 f4       	brtc	.+4      	; 0x3e66 <itoa+0x3a>
    3e62:	5d e2       	ldi	r21, 0x2D	; 45
    3e64:	51 93       	st	Z+, r21
    3e66:	10 82       	st	Z, r1
    3e68:	c9 01       	movw	r24, r18
    3e6a:	0c 94 37 1f 	jmp	0x3e6e	; 0x3e6e <strrev>

00003e6e <strrev>:
    3e6e:	dc 01       	movw	r26, r24
    3e70:	fc 01       	movw	r30, r24
    3e72:	67 2f       	mov	r22, r23
    3e74:	71 91       	ld	r23, Z+
    3e76:	77 23       	and	r23, r23
    3e78:	e1 f7       	brne	.-8      	; 0x3e72 <strrev+0x4>
    3e7a:	32 97       	sbiw	r30, 0x02	; 2
    3e7c:	04 c0       	rjmp	.+8      	; 0x3e86 <strrev+0x18>
    3e7e:	7c 91       	ld	r23, X
    3e80:	6d 93       	st	X+, r22
    3e82:	70 83       	st	Z, r23
    3e84:	62 91       	ld	r22, -Z
    3e86:	ae 17       	cp	r26, r30
    3e88:	bf 07       	cpc	r27, r31
    3e8a:	c8 f3       	brcs	.-14     	; 0x3e7e <strrev+0x10>
    3e8c:	08 95       	ret

00003e8e <__udivmodhi4>:
    3e8e:	aa 1b       	sub	r26, r26
    3e90:	bb 1b       	sub	r27, r27
    3e92:	51 e1       	ldi	r21, 0x11	; 17
    3e94:	07 c0       	rjmp	.+14     	; 0x3ea4 <__udivmodhi4_ep>

00003e96 <__udivmodhi4_loop>:
    3e96:	aa 1f       	adc	r26, r26
    3e98:	bb 1f       	adc	r27, r27
    3e9a:	a6 17       	cp	r26, r22
    3e9c:	b7 07       	cpc	r27, r23
    3e9e:	10 f0       	brcs	.+4      	; 0x3ea4 <__udivmodhi4_ep>
    3ea0:	a6 1b       	sub	r26, r22
    3ea2:	b7 0b       	sbc	r27, r23

00003ea4 <__udivmodhi4_ep>:
    3ea4:	88 1f       	adc	r24, r24
    3ea6:	99 1f       	adc	r25, r25
    3ea8:	5a 95       	dec	r21
    3eaa:	a9 f7       	brne	.-22     	; 0x3e96 <__udivmodhi4_loop>
    3eac:	80 95       	com	r24
    3eae:	90 95       	com	r25
    3eb0:	bc 01       	movw	r22, r24
    3eb2:	cd 01       	movw	r24, r26
    3eb4:	08 95       	ret

00003eb6 <_exit>:
    3eb6:	f8 94       	cli

00003eb8 <__stop_program>:
    3eb8:	ff cf       	rjmp	.-2      	; 0x3eb8 <__stop_program>
