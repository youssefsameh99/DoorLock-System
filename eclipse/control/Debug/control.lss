
control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00002e14  00002ea8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800180  00800180  00002fc8  2**0
                  ALLOC
  3 .stab         00002e14  00000000  00000000  00002fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001481  00000000  00000000  00005ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000725d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000073fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000075ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000099fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ad80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bf58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c118  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c40e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cd7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__vector_4>
      14:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__vector_7>
      20:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__vector_8>
      24:	0c 94 ef 11 	jmp	0x23de	; 0x23de <__vector_9>
      28:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__vector_10>
      2c:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <main>
      8a:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DcMotor_Init>:
 * Description :
 * Initializes the DC motor:
 * 1. Setup the Motor pins directions by use the GPIO driver.
 * 2. Stop Motor before starting.
 */
void DcMotor_Init(void) {
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62

	/* Configure the direction for H-Bridge pins as output pins */
		GPIO_setupPinDirection(MOTOR_CHANNEL_ID,MOTOR_IN1_PIN_ID ,PIN_OUTPUT ) ;
     e36:	83 e0       	ldi	r24, 0x03	; 3
     e38:	66 e0       	ldi	r22, 0x06	; 6
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(MOTOR_CHANNEL_ID,MOTOR_IN2_PIN_ID ,PIN_OUTPUT ) ;
     e40:	83 e0       	ldi	r24, 0x03	; 3
     e42:	67 e0       	ldi	r22, 0x07	; 7
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <GPIO_setupPinDirection>


		/* Turn OFF the DC Motor on the required pins.  */
	    GPIO_writePin(MOTOR_CHANNEL_ID,MOTOR_IN1_PIN_ID ,MOTOR_OFF);
     e4a:	83 e0       	ldi	r24, 0x03	; 3
     e4c:	66 e0       	ldi	r22, 0x06	; 6
     e4e:	40 e0       	ldi	r20, 0x00	; 0
     e50:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_writePin>
		GPIO_writePin(MOTOR_CHANNEL_ID,MOTOR_IN2_PIN_ID ,MOTOR_OFF);
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	67 e0       	ldi	r22, 0x07	; 7
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_writePin>
		PWM_TIMER0_Start ( 0 );
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <PWM_TIMER0_Start>

}
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <DcMotor_Rotate>:
on the input duty cycle.
 *
 */


void DcMotor_Rotate(DcMotor_State state, uint8 speed) {
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <DcMotor_Rotate+0x6>
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	6a 83       	std	Y+2, r22	; 0x02

	PWM_TIMER0_Start ( speed );
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <PWM_TIMER0_Start>

	if ( state == STOP ){
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	59 f4       	brne	.+22     	; 0xe9a <DcMotor_Rotate+0x30>

	    GPIO_writePin(MOTOR_CHANNEL_ID,MOTOR_IN1_PIN_ID ,MOTOR_OFF);
     e84:	83 e0       	ldi	r24, 0x03	; 3
     e86:	66 e0       	ldi	r22, 0x06	; 6
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_writePin>
		GPIO_writePin(MOTOR_CHANNEL_ID,MOTOR_IN2_PIN_ID ,MOTOR_OFF);
     e8e:	83 e0       	ldi	r24, 0x03	; 3
     e90:	67 e0       	ldi	r22, 0x07	; 7
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_writePin>
     e98:	1b c0       	rjmp	.+54     	; 0xed0 <DcMotor_Rotate+0x66>



	}
	else if ( state == CW ){
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	88 23       	and	r24, r24
     e9e:	59 f4       	brne	.+22     	; 0xeb6 <DcMotor_Rotate+0x4c>

	    GPIO_writePin(MOTOR_CHANNEL_ID,MOTOR_IN1_PIN_ID ,MOTOR_OFF);
     ea0:	83 e0       	ldi	r24, 0x03	; 3
     ea2:	66 e0       	ldi	r22, 0x06	; 6
     ea4:	40 e0       	ldi	r20, 0x00	; 0
     ea6:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_writePin>
		GPIO_writePin(MOTOR_CHANNEL_ID,MOTOR_IN2_PIN_ID ,MOTOR_ON);
     eaa:	83 e0       	ldi	r24, 0x03	; 3
     eac:	67 e0       	ldi	r22, 0x07	; 7
     eae:	41 e0       	ldi	r20, 0x01	; 1
     eb0:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_writePin>
     eb4:	0d c0       	rjmp	.+26     	; 0xed0 <DcMotor_Rotate+0x66>


	}else if ( state == AW ) {
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	51 f4       	brne	.+20     	; 0xed0 <DcMotor_Rotate+0x66>

	    GPIO_writePin(MOTOR_CHANNEL_ID,MOTOR_IN1_PIN_ID ,MOTOR_ON);
     ebc:	83 e0       	ldi	r24, 0x03	; 3
     ebe:	66 e0       	ldi	r22, 0x06	; 6
     ec0:	41 e0       	ldi	r20, 0x01	; 1
     ec2:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_writePin>
		GPIO_writePin(MOTOR_CHANNEL_ID,MOTOR_IN2_PIN_ID ,MOTOR_OFF);
     ec6:	83 e0       	ldi	r24, 0x03	; 3
     ec8:	67 e0       	ldi	r22, 0x07	; 7
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_writePin>


	}


}
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <PIR_init>:
#include "PIR.h"
#include "common_macros.h"
#include "gpio.h"


void PIR_init(void){
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PIR_PORT_ID,PIR_PIN_ID,PIN_OUTPUT);
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	62 e0       	ldi	r22, 0x02	; 2
     ee6:	41 e0       	ldi	r20, 0x01	; 1
     ee8:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <GPIO_setupPinDirection>
	GPIO_writePin(PIR_PORT_ID,PIR_PIN_ID,0);
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	62 e0       	ldi	r22, 0x02	; 2
     ef0:	40 e0       	ldi	r20, 0x00	; 0
     ef2:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_writePin>

}
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <PIR_getState>:

uint8 PIR_getState(void){
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(PIR_PORT_ID,PIR_PIN_ID);
     f04:	82 e0       	ldi	r24, 0x02	; 2
     f06:	62 e0       	ldi	r22, 0x02	; 2
     f08:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <GPIO_readPin>
}
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <Buzzer_init>:
#include "common_macros.h"
#include "buzzer.h"
#include "gpio.h"


void Buzzer_init(void){
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	67 e0       	ldi	r22, 0x07	; 7
     f1e:	41 e0       	ldi	r20, 0x01	; 1
     f20:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,0);
     f24:	82 e0       	ldi	r24, 0x02	; 2
     f26:	67 e0       	ldi	r22, 0x07	; 7
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_writePin>
}
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <Buzzer_on>:





void Buzzer_on(void){
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,1);
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	67 e0       	ldi	r22, 0x07	; 7
     f40:	41 e0       	ldi	r20, 0x01	; 1
     f42:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_writePin>
}
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <Buzzer_off>:


void Buzzer_off(void){
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,0);
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	67 e0       	ldi	r22, 0x07	; 7
     f58:	40 e0       	ldi	r20, 0x00	; 0
     f5a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_writePin>
}
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <timerticker>:
uint8 timer_finish;
uint8 match;
uint8 pir;
uint8 val;

void timerticker(void) {
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
	timertick++; // Increment seconds counter
     f6c:	80 91 81 01 	lds	r24, 0x0181
     f70:	8f 5f       	subi	r24, 0xFF	; 255
     f72:	80 93 81 01 	sts	0x0181, r24
}
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <timerfunction>:

/* Function to introduce delay using Timer1, based on given seconds */
void timerfunction (uint8 seconds) {
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	2d 97       	sbiw	r28, 0x0d	; 13
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	88 87       	std	Y+8, r24	; 0x08
	/* Timer configuration structure for delay */
	Timer_ConfigType Timer_Configurations = {0, 0, TIMER1, F_CPU_64, NORMAL};
     f92:	ce 01       	movw	r24, r28
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	9a 87       	std	Y+10, r25	; 0x0a
     f98:	89 87       	std	Y+9, r24	; 0x09
     f9a:	e8 e6       	ldi	r30, 0x68	; 104
     f9c:	f1 e0       	ldi	r31, 0x01	; 1
     f9e:	fc 87       	std	Y+12, r31	; 0x0c
     fa0:	eb 87       	std	Y+11, r30	; 0x0b
     fa2:	f7 e0       	ldi	r31, 0x07	; 7
     fa4:	fd 87       	std	Y+13, r31	; 0x0d
     fa6:	eb 85       	ldd	r30, Y+11	; 0x0b
     fa8:	fc 85       	ldd	r31, Y+12	; 0x0c
     faa:	00 80       	ld	r0, Z
     fac:	8b 85       	ldd	r24, Y+11	; 0x0b
     fae:	9c 85       	ldd	r25, Y+12	; 0x0c
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	9c 87       	std	Y+12, r25	; 0x0c
     fb4:	8b 87       	std	Y+11, r24	; 0x0b
     fb6:	e9 85       	ldd	r30, Y+9	; 0x09
     fb8:	fa 85       	ldd	r31, Y+10	; 0x0a
     fba:	00 82       	st	Z, r0
     fbc:	89 85       	ldd	r24, Y+9	; 0x09
     fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	9a 87       	std	Y+10, r25	; 0x0a
     fc4:	89 87       	std	Y+9, r24	; 0x09
     fc6:	9d 85       	ldd	r25, Y+13	; 0x0d
     fc8:	91 50       	subi	r25, 0x01	; 1
     fca:	9d 87       	std	Y+13, r25	; 0x0d
     fcc:	ed 85       	ldd	r30, Y+13	; 0x0d
     fce:	ee 23       	and	r30, r30
     fd0:	51 f7       	brne	.-44     	; 0xfa6 <timerfunction+0x2a>

	/* Initialize timer with specified configurations */
	Timer_init(&Timer_Configurations);
     fd2:	ce 01       	movw	r24, r28
     fd4:	01 96       	adiw	r24, 0x01	; 1
     fd6:	0e 94 88 12 	call	0x2510	; 0x2510 <Timer_init>

	/* Set Timer callback to increment time counter */
	Timer_setCallBack(timerticker, TIMER1);
     fda:	82 eb       	ldi	r24, 0xB2	; 178
     fdc:	97 e0       	ldi	r25, 0x07	; 7
     fde:	61 e0       	ldi	r22, 0x01	; 1
     fe0:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <Timer_setCallBack>

	/* Loop until specified time is reached */
	while (timertick != ((timerovf) * (seconds))) {}
     fe4:	80 91 81 01 	lds	r24, 0x0181
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	88 85       	ldd	r24, Y+8	; 0x08
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	28 17       	cp	r18, r24
     ff8:	39 07       	cpc	r19, r25
     ffa:	a1 f7       	brne	.-24     	; 0xfe4 <timerfunction+0x68>


	Timer_deInit(TIMER1);
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	0e 94 10 14 	call	0x2820	; 0x2820 <Timer_deInit>


	timertick = 0;
    1002:	10 92 81 01 	sts	0x0181, r1


	if (timertick >= timerovf) {
    1006:	80 91 81 01 	lds	r24, 0x0181
    100a:	82 30       	cpi	r24, 0x02	; 2
    100c:	28 f0       	brcs	.+10     	; 0x1018 <timerfunction+0x9c>
		timertick = 0;
    100e:	10 92 81 01 	sts	0x0181, r1
		timer_finish = 1;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	80 93 95 01 	sts	0x0195, r24
	}
}
    1018:	2d 96       	adiw	r28, 0x0d	; 13
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <recievepass>:
void recievepass(uint8* password) {
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	61 97       	sbiw	r28, 0x11	; 17
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	99 8b       	std	Y+17, r25	; 0x11
    1044:	88 8b       	std	Y+16, r24	; 0x10
	for (uint8 i = 0; i < passwordlength; i++) {
    1046:	1f 86       	std	Y+15, r1	; 0x0f
    1048:	81 c0       	rjmp	.+258    	; 0x114c <recievepass+0x122>
		password[i] = UART_recieveByte(); // Receive each byte of password
    104a:	8f 85       	ldd	r24, Y+15	; 0x0f
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	88 89       	ldd	r24, Y+16	; 0x10
    1052:	99 89       	ldd	r25, Y+17	; 0x11
    1054:	8c 01       	movw	r16, r24
    1056:	02 0f       	add	r16, r18
    1058:	13 1f       	adc	r17, r19
    105a:	0e 94 34 16 	call	0x2c68	; 0x2c68 <UART_recieveByte>
    105e:	f8 01       	movw	r30, r16
    1060:	80 83       	st	Z, r24
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	a8 e4       	ldi	r26, 0x48	; 72
    1068:	b3 e4       	ldi	r27, 0x43	; 67
    106a:	8b 87       	std	Y+11, r24	; 0x0b
    106c:	9c 87       	std	Y+12, r25	; 0x0c
    106e:	ad 87       	std	Y+13, r26	; 0x0d
    1070:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1072:	6b 85       	ldd	r22, Y+11	; 0x0b
    1074:	7c 85       	ldd	r23, Y+12	; 0x0c
    1076:	8d 85       	ldd	r24, Y+13	; 0x0d
    1078:	9e 85       	ldd	r25, Y+14	; 0x0e
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	4a ef       	ldi	r20, 0xFA	; 250
    1080:	54 e4       	ldi	r21, 0x44	; 68
    1082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	8f 83       	std	Y+7, r24	; 0x07
    108c:	98 87       	std	Y+8, r25	; 0x08
    108e:	a9 87       	std	Y+9, r26	; 0x09
    1090:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1092:	6f 81       	ldd	r22, Y+7	; 0x07
    1094:	78 85       	ldd	r23, Y+8	; 0x08
    1096:	89 85       	ldd	r24, Y+9	; 0x09
    1098:	9a 85       	ldd	r25, Y+10	; 0x0a
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e8       	ldi	r20, 0x80	; 128
    10a0:	5f e3       	ldi	r21, 0x3F	; 63
    10a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10a6:	88 23       	and	r24, r24
    10a8:	2c f4       	brge	.+10     	; 0x10b4 <recievepass+0x8a>
		__ticks = 1;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	9e 83       	std	Y+6, r25	; 0x06
    10b0:	8d 83       	std	Y+5, r24	; 0x05
    10b2:	3f c0       	rjmp	.+126    	; 0x1132 <recievepass+0x108>
	else if (__tmp > 65535)
    10b4:	6f 81       	ldd	r22, Y+7	; 0x07
    10b6:	78 85       	ldd	r23, Y+8	; 0x08
    10b8:	89 85       	ldd	r24, Y+9	; 0x09
    10ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	3f ef       	ldi	r19, 0xFF	; 255
    10c0:	4f e7       	ldi	r20, 0x7F	; 127
    10c2:	57 e4       	ldi	r21, 0x47	; 71
    10c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10c8:	18 16       	cp	r1, r24
    10ca:	4c f5       	brge	.+82     	; 0x111e <recievepass+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e2       	ldi	r20, 0x20	; 32
    10da:	51 e4       	ldi	r21, 0x41	; 65
    10dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	bc 01       	movw	r22, r24
    10e6:	cd 01       	movw	r24, r26
    10e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	9e 83       	std	Y+6, r25	; 0x06
    10f2:	8d 83       	std	Y+5, r24	; 0x05
    10f4:	0f c0       	rjmp	.+30     	; 0x1114 <recievepass+0xea>
    10f6:	88 ec       	ldi	r24, 0xC8	; 200
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	9c 83       	std	Y+4, r25	; 0x04
    10fc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	9c 81       	ldd	r25, Y+4	; 0x04
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	f1 f7       	brne	.-4      	; 0x1102 <recievepass+0xd8>
    1106:	9c 83       	std	Y+4, r25	; 0x04
    1108:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	9e 81       	ldd	r25, Y+6	; 0x06
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	9e 83       	std	Y+6, r25	; 0x06
    1112:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1114:	8d 81       	ldd	r24, Y+5	; 0x05
    1116:	9e 81       	ldd	r25, Y+6	; 0x06
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	69 f7       	brne	.-38     	; 0x10f6 <recievepass+0xcc>
    111c:	14 c0       	rjmp	.+40     	; 0x1146 <recievepass+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    111e:	6f 81       	ldd	r22, Y+7	; 0x07
    1120:	78 85       	ldd	r23, Y+8	; 0x08
    1122:	89 85       	ldd	r24, Y+9	; 0x09
    1124:	9a 85       	ldd	r25, Y+10	; 0x0a
    1126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	9e 83       	std	Y+6, r25	; 0x06
    1130:	8d 83       	std	Y+5, r24	; 0x05
    1132:	8d 81       	ldd	r24, Y+5	; 0x05
    1134:	9e 81       	ldd	r25, Y+6	; 0x06
    1136:	9a 83       	std	Y+2, r25	; 0x02
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	9a 81       	ldd	r25, Y+2	; 0x02
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <recievepass+0x114>
    1142:	9a 83       	std	Y+2, r25	; 0x02
    1144:	89 83       	std	Y+1, r24	; 0x01
		timertick = 0;
		timer_finish = 1;
	}
}
void recievepass(uint8* password) {
	for (uint8 i = 0; i < passwordlength; i++) {
    1146:	8f 85       	ldd	r24, Y+15	; 0x0f
    1148:	8f 5f       	subi	r24, 0xFF	; 255
    114a:	8f 87       	std	Y+15, r24	; 0x0f
    114c:	8f 85       	ldd	r24, Y+15	; 0x0f
    114e:	85 30       	cpi	r24, 0x05	; 5
    1150:	08 f4       	brcc	.+2      	; 0x1154 <recievepass+0x12a>
    1152:	7b cf       	rjmp	.-266    	; 0x104a <recievepass+0x20>
		password[i] = UART_recieveByte(); // Receive each byte of password
		_delay_ms(200); // Delay for stability
	}

}
    1154:	61 96       	adiw	r28, 0x11	; 17
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	08 95       	ret

0000116a <SaveinEEPROM>:
void SaveinEEPROM(uint8* password) {
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	61 97       	sbiw	r28, 0x11	; 17
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	99 8b       	std	Y+17, r25	; 0x11
    1180:	88 8b       	std	Y+16, r24	; 0x10
	for (uint8 i = 0; i < passwordlength; i++) {
    1182:	1f 86       	std	Y+15, r1	; 0x0f
    1184:	87 c0       	rjmp	.+270    	; 0x1294 <SaveinEEPROM+0x12a>
		EEPROM_writeByte(0x01 + i, password[i]); // Write each byte to EEPROM
    1186:	8f 85       	ldd	r24, Y+15	; 0x0f
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	01 96       	adiw	r24, 0x01	; 1
    118e:	ac 01       	movw	r20, r24
    1190:	8f 85       	ldd	r24, Y+15	; 0x0f
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	88 89       	ldd	r24, Y+16	; 0x10
    1198:	99 89       	ldd	r25, Y+17	; 0x11
    119a:	fc 01       	movw	r30, r24
    119c:	e2 0f       	add	r30, r18
    119e:	f3 1f       	adc	r31, r19
    11a0:	20 81       	ld	r18, Z
    11a2:	ca 01       	movw	r24, r20
    11a4:	62 2f       	mov	r22, r18
    11a6:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <EEPROM_writeByte>
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	a0 ea       	ldi	r26, 0xA0	; 160
    11b0:	b1 e4       	ldi	r27, 0x41	; 65
    11b2:	8b 87       	std	Y+11, r24	; 0x0b
    11b4:	9c 87       	std	Y+12, r25	; 0x0c
    11b6:	ad 87       	std	Y+13, r26	; 0x0d
    11b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    11bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    11be:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	4a ef       	ldi	r20, 0xFA	; 250
    11c8:	54 e4       	ldi	r21, 0x44	; 68
    11ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	8f 83       	std	Y+7, r24	; 0x07
    11d4:	98 87       	std	Y+8, r25	; 0x08
    11d6:	a9 87       	std	Y+9, r26	; 0x09
    11d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11da:	6f 81       	ldd	r22, Y+7	; 0x07
    11dc:	78 85       	ldd	r23, Y+8	; 0x08
    11de:	89 85       	ldd	r24, Y+9	; 0x09
    11e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e8       	ldi	r20, 0x80	; 128
    11e8:	5f e3       	ldi	r21, 0x3F	; 63
    11ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11ee:	88 23       	and	r24, r24
    11f0:	2c f4       	brge	.+10     	; 0x11fc <SaveinEEPROM+0x92>
		__ticks = 1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	9e 83       	std	Y+6, r25	; 0x06
    11f8:	8d 83       	std	Y+5, r24	; 0x05
    11fa:	3f c0       	rjmp	.+126    	; 0x127a <SaveinEEPROM+0x110>
	else if (__tmp > 65535)
    11fc:	6f 81       	ldd	r22, Y+7	; 0x07
    11fe:	78 85       	ldd	r23, Y+8	; 0x08
    1200:	89 85       	ldd	r24, Y+9	; 0x09
    1202:	9a 85       	ldd	r25, Y+10	; 0x0a
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	3f ef       	ldi	r19, 0xFF	; 255
    1208:	4f e7       	ldi	r20, 0x7F	; 127
    120a:	57 e4       	ldi	r21, 0x47	; 71
    120c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1210:	18 16       	cp	r1, r24
    1212:	4c f5       	brge	.+82     	; 0x1266 <SaveinEEPROM+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1214:	6b 85       	ldd	r22, Y+11	; 0x0b
    1216:	7c 85       	ldd	r23, Y+12	; 0x0c
    1218:	8d 85       	ldd	r24, Y+13	; 0x0d
    121a:	9e 85       	ldd	r25, Y+14	; 0x0e
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e2       	ldi	r20, 0x20	; 32
    1222:	51 e4       	ldi	r21, 0x41	; 65
    1224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	bc 01       	movw	r22, r24
    122e:	cd 01       	movw	r24, r26
    1230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	9e 83       	std	Y+6, r25	; 0x06
    123a:	8d 83       	std	Y+5, r24	; 0x05
    123c:	0f c0       	rjmp	.+30     	; 0x125c <SaveinEEPROM+0xf2>
    123e:	88 ec       	ldi	r24, 0xC8	; 200
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	9c 83       	std	Y+4, r25	; 0x04
    1244:	8b 83       	std	Y+3, r24	; 0x03
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	9c 81       	ldd	r25, Y+4	; 0x04
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	f1 f7       	brne	.-4      	; 0x124a <SaveinEEPROM+0xe0>
    124e:	9c 83       	std	Y+4, r25	; 0x04
    1250:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	9e 81       	ldd	r25, Y+6	; 0x06
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	9e 83       	std	Y+6, r25	; 0x06
    125a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125c:	8d 81       	ldd	r24, Y+5	; 0x05
    125e:	9e 81       	ldd	r25, Y+6	; 0x06
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	69 f7       	brne	.-38     	; 0x123e <SaveinEEPROM+0xd4>
    1264:	14 c0       	rjmp	.+40     	; 0x128e <SaveinEEPROM+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1266:	6f 81       	ldd	r22, Y+7	; 0x07
    1268:	78 85       	ldd	r23, Y+8	; 0x08
    126a:	89 85       	ldd	r24, Y+9	; 0x09
    126c:	9a 85       	ldd	r25, Y+10	; 0x0a
    126e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	9e 83       	std	Y+6, r25	; 0x06
    1278:	8d 83       	std	Y+5, r24	; 0x05
    127a:	8d 81       	ldd	r24, Y+5	; 0x05
    127c:	9e 81       	ldd	r25, Y+6	; 0x06
    127e:	9a 83       	std	Y+2, r25	; 0x02
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	9a 81       	ldd	r25, Y+2	; 0x02
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	f1 f7       	brne	.-4      	; 0x1286 <SaveinEEPROM+0x11c>
    128a:	9a 83       	std	Y+2, r25	; 0x02
    128c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200); // Delay for stability
	}

}
void SaveinEEPROM(uint8* password) {
	for (uint8 i = 0; i < passwordlength; i++) {
    128e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1290:	8f 5f       	subi	r24, 0xFF	; 255
    1292:	8f 87       	std	Y+15, r24	; 0x0f
    1294:	8f 85       	ldd	r24, Y+15	; 0x0f
    1296:	85 30       	cpi	r24, 0x05	; 5
    1298:	08 f4       	brcc	.+2      	; 0x129c <SaveinEEPROM+0x132>
    129a:	75 cf       	rjmp	.-278    	; 0x1186 <SaveinEEPROM+0x1c>
		EEPROM_writeByte(0x01 + i, password[i]); // Write each byte to EEPROM
		_delay_ms(20); // Delay for stability
	}
}
    129c:	61 96       	adiw	r28, 0x11	; 17
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	f8 94       	cli
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <Verify_password>:
uint8 Verify_password(uint8* password) {
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	63 97       	sbiw	r28, 0x13	; 19
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	9a 8b       	std	Y+18, r25	; 0x12
    12c4:	89 8b       	std	Y+17, r24	; 0x11
	uint8 val;
	for (uint8 i = 0; i < passwordlength; i++) {
    12c6:	1f 86       	std	Y+15, r1	; 0x0f
    12c8:	8d c0       	rjmp	.+282    	; 0x13e4 <Verify_password+0x136>
		EEPROM_readByte(0x01 + i, &val); // Read byte from EEPROM
    12ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	01 96       	adiw	r24, 0x01	; 1
    12d2:	9e 01       	movw	r18, r28
    12d4:	20 5f       	subi	r18, 0xF0	; 240
    12d6:	3f 4f       	sbci	r19, 0xFF	; 255
    12d8:	b9 01       	movw	r22, r18
    12da:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <EEPROM_readByte>
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a0 ea       	ldi	r26, 0xA0	; 160
    12e4:	b1 e4       	ldi	r27, 0x41	; 65
    12e6:	8b 87       	std	Y+11, r24	; 0x0b
    12e8:	9c 87       	std	Y+12, r25	; 0x0c
    12ea:	ad 87       	std	Y+13, r26	; 0x0d
    12ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	4a ef       	ldi	r20, 0xFA	; 250
    12fc:	54 e4       	ldi	r21, 0x44	; 68
    12fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	8f 83       	std	Y+7, r24	; 0x07
    1308:	98 87       	std	Y+8, r25	; 0x08
    130a:	a9 87       	std	Y+9, r26	; 0x09
    130c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    130e:	6f 81       	ldd	r22, Y+7	; 0x07
    1310:	78 85       	ldd	r23, Y+8	; 0x08
    1312:	89 85       	ldd	r24, Y+9	; 0x09
    1314:	9a 85       	ldd	r25, Y+10	; 0x0a
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e8       	ldi	r20, 0x80	; 128
    131c:	5f e3       	ldi	r21, 0x3F	; 63
    131e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1322:	88 23       	and	r24, r24
    1324:	2c f4       	brge	.+10     	; 0x1330 <Verify_password+0x82>
		__ticks = 1;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	9e 83       	std	Y+6, r25	; 0x06
    132c:	8d 83       	std	Y+5, r24	; 0x05
    132e:	3f c0       	rjmp	.+126    	; 0x13ae <Verify_password+0x100>
	else if (__tmp > 65535)
    1330:	6f 81       	ldd	r22, Y+7	; 0x07
    1332:	78 85       	ldd	r23, Y+8	; 0x08
    1334:	89 85       	ldd	r24, Y+9	; 0x09
    1336:	9a 85       	ldd	r25, Y+10	; 0x0a
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	3f ef       	ldi	r19, 0xFF	; 255
    133c:	4f e7       	ldi	r20, 0x7F	; 127
    133e:	57 e4       	ldi	r21, 0x47	; 71
    1340:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1344:	18 16       	cp	r1, r24
    1346:	4c f5       	brge	.+82     	; 0x139a <Verify_password+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1348:	6b 85       	ldd	r22, Y+11	; 0x0b
    134a:	7c 85       	ldd	r23, Y+12	; 0x0c
    134c:	8d 85       	ldd	r24, Y+13	; 0x0d
    134e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e2       	ldi	r20, 0x20	; 32
    1356:	51 e4       	ldi	r21, 0x41	; 65
    1358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	bc 01       	movw	r22, r24
    1362:	cd 01       	movw	r24, r26
    1364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	9e 83       	std	Y+6, r25	; 0x06
    136e:	8d 83       	std	Y+5, r24	; 0x05
    1370:	0f c0       	rjmp	.+30     	; 0x1390 <Verify_password+0xe2>
    1372:	88 ec       	ldi	r24, 0xC8	; 200
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	9c 83       	std	Y+4, r25	; 0x04
    1378:	8b 83       	std	Y+3, r24	; 0x03
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	f1 f7       	brne	.-4      	; 0x137e <Verify_password+0xd0>
    1382:	9c 83       	std	Y+4, r25	; 0x04
    1384:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1386:	8d 81       	ldd	r24, Y+5	; 0x05
    1388:	9e 81       	ldd	r25, Y+6	; 0x06
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	9e 83       	std	Y+6, r25	; 0x06
    138e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	69 f7       	brne	.-38     	; 0x1372 <Verify_password+0xc4>
    1398:	14 c0       	rjmp	.+40     	; 0x13c2 <Verify_password+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    139a:	6f 81       	ldd	r22, Y+7	; 0x07
    139c:	78 85       	ldd	r23, Y+8	; 0x08
    139e:	89 85       	ldd	r24, Y+9	; 0x09
    13a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	9e 83       	std	Y+6, r25	; 0x06
    13ac:	8d 83       	std	Y+5, r24	; 0x05
    13ae:	8d 81       	ldd	r24, Y+5	; 0x05
    13b0:	9e 81       	ldd	r25, Y+6	; 0x06
    13b2:	9a 83       	std	Y+2, r25	; 0x02
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	f1 f7       	brne	.-4      	; 0x13ba <Verify_password+0x10c>
    13be:	9a 83       	std	Y+2, r25	; 0x02
    13c0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);
		if (val != password[i]) { // Compare each byte
    13c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	89 89       	ldd	r24, Y+17	; 0x11
    13ca:	9a 89       	ldd	r25, Y+18	; 0x12
    13cc:	fc 01       	movw	r30, r24
    13ce:	e2 0f       	add	r30, r18
    13d0:	f3 1f       	adc	r31, r19
    13d2:	90 81       	ld	r25, Z
    13d4:	88 89       	ldd	r24, Y+16	; 0x10
    13d6:	98 17       	cp	r25, r24
    13d8:	11 f0       	breq	.+4      	; 0x13de <Verify_password+0x130>
			return 0; // Return REJECTED if mismatch
    13da:	1b 8a       	std	Y+19, r1	; 0x13
    13dc:	09 c0       	rjmp	.+18     	; 0x13f0 <Verify_password+0x142>
		_delay_ms(20); // Delay for stability
	}
}
uint8 Verify_password(uint8* password) {
	uint8 val;
	for (uint8 i = 0; i < passwordlength; i++) {
    13de:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e0:	8f 5f       	subi	r24, 0xFF	; 255
    13e2:	8f 87       	std	Y+15, r24	; 0x0f
    13e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e6:	85 30       	cpi	r24, 0x05	; 5
    13e8:	08 f4       	brcc	.+2      	; 0x13ec <Verify_password+0x13e>
    13ea:	6f cf       	rjmp	.-290    	; 0x12ca <Verify_password+0x1c>
		_delay_ms(20);
		if (val != password[i]) { // Compare each byte
			return 0; // Return REJECTED if mismatch
		}
	}
	return 1; // Return VERIFIED if password matches
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	8b 8b       	std	Y+19, r24	; 0x13
    13f0:	8b 89       	ldd	r24, Y+19	; 0x13
}
    13f2:	63 96       	adiw	r28, 0x13	; 19
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <opendoor>:
void opendoor(void) {
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	6c 97       	sbiw	r28, 0x1c	; 28
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
	DcMotor_Rotate(CW, 100); // Rotate motor clockwise to unlock
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	64 e6       	ldi	r22, 0x64	; 100
    141c:	0e 94 35 07 	call	0xe6a	; 0xe6a <DcMotor_Rotate>

	timerfunction(15); // Delay for door opening
    1420:	8f e0       	ldi	r24, 0x0F	; 15
    1422:	0e 94 be 07 	call	0xf7c	; 0xf7c <timerfunction>

	pir = PIR_getState(); // Get PIR sensor status
    1426:	0e 94 7e 07 	call	0xefc	; 0xefc <PIR_getState>
    142a:	80 93 8d 01 	sts	0x018D, r24

	DcMotor_Rotate(STOP, 0); // Stop motor
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	0e 94 35 07 	call	0xe6a	; 0xe6a <DcMotor_Rotate>
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	aa ef       	ldi	r26, 0xFA	; 250
    143c:	b3 e4       	ldi	r27, 0x43	; 67
    143e:	89 8f       	std	Y+25, r24	; 0x19
    1440:	9a 8f       	std	Y+26, r25	; 0x1a
    1442:	ab 8f       	std	Y+27, r26	; 0x1b
    1444:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1446:	69 8d       	ldd	r22, Y+25	; 0x19
    1448:	7a 8d       	ldd	r23, Y+26	; 0x1a
    144a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    144c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	4a ef       	ldi	r20, 0xFA	; 250
    1454:	54 e4       	ldi	r21, 0x44	; 68
    1456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	8d 8b       	std	Y+21, r24	; 0x15
    1460:	9e 8b       	std	Y+22, r25	; 0x16
    1462:	af 8b       	std	Y+23, r26	; 0x17
    1464:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1466:	6d 89       	ldd	r22, Y+21	; 0x15
    1468:	7e 89       	ldd	r23, Y+22	; 0x16
    146a:	8f 89       	ldd	r24, Y+23	; 0x17
    146c:	98 8d       	ldd	r25, Y+24	; 0x18
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e8       	ldi	r20, 0x80	; 128
    1474:	5f e3       	ldi	r21, 0x3F	; 63
    1476:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    147a:	88 23       	and	r24, r24
    147c:	2c f4       	brge	.+10     	; 0x1488 <opendoor+0x84>
		__ticks = 1;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	9c 8b       	std	Y+20, r25	; 0x14
    1484:	8b 8b       	std	Y+19, r24	; 0x13
    1486:	3f c0       	rjmp	.+126    	; 0x1506 <opendoor+0x102>
	else if (__tmp > 65535)
    1488:	6d 89       	ldd	r22, Y+21	; 0x15
    148a:	7e 89       	ldd	r23, Y+22	; 0x16
    148c:	8f 89       	ldd	r24, Y+23	; 0x17
    148e:	98 8d       	ldd	r25, Y+24	; 0x18
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	3f ef       	ldi	r19, 0xFF	; 255
    1494:	4f e7       	ldi	r20, 0x7F	; 127
    1496:	57 e4       	ldi	r21, 0x47	; 71
    1498:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    149c:	18 16       	cp	r1, r24
    149e:	4c f5       	brge	.+82     	; 0x14f2 <opendoor+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a0:	69 8d       	ldd	r22, Y+25	; 0x19
    14a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e2       	ldi	r20, 0x20	; 32
    14ae:	51 e4       	ldi	r21, 0x41	; 65
    14b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	bc 01       	movw	r22, r24
    14ba:	cd 01       	movw	r24, r26
    14bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	9c 8b       	std	Y+20, r25	; 0x14
    14c6:	8b 8b       	std	Y+19, r24	; 0x13
    14c8:	0f c0       	rjmp	.+30     	; 0x14e8 <opendoor+0xe4>
    14ca:	88 ec       	ldi	r24, 0xC8	; 200
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	9a 8b       	std	Y+18, r25	; 0x12
    14d0:	89 8b       	std	Y+17, r24	; 0x11
    14d2:	89 89       	ldd	r24, Y+17	; 0x11
    14d4:	9a 89       	ldd	r25, Y+18	; 0x12
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <opendoor+0xd2>
    14da:	9a 8b       	std	Y+18, r25	; 0x12
    14dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14de:	8b 89       	ldd	r24, Y+19	; 0x13
    14e0:	9c 89       	ldd	r25, Y+20	; 0x14
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	9c 8b       	std	Y+20, r25	; 0x14
    14e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e8:	8b 89       	ldd	r24, Y+19	; 0x13
    14ea:	9c 89       	ldd	r25, Y+20	; 0x14
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	69 f7       	brne	.-38     	; 0x14ca <opendoor+0xc6>
    14f0:	8b c0       	rjmp	.+278    	; 0x1608 <opendoor+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f2:	6d 89       	ldd	r22, Y+21	; 0x15
    14f4:	7e 89       	ldd	r23, Y+22	; 0x16
    14f6:	8f 89       	ldd	r24, Y+23	; 0x17
    14f8:	98 8d       	ldd	r25, Y+24	; 0x18
    14fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	9c 8b       	std	Y+20, r25	; 0x14
    1504:	8b 8b       	std	Y+19, r24	; 0x13
    1506:	8b 89       	ldd	r24, Y+19	; 0x13
    1508:	9c 89       	ldd	r25, Y+20	; 0x14
    150a:	98 8b       	std	Y+16, r25	; 0x10
    150c:	8f 87       	std	Y+15, r24	; 0x0f
    150e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1510:	98 89       	ldd	r25, Y+16	; 0x10
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	f1 f7       	brne	.-4      	; 0x1512 <opendoor+0x10e>
    1516:	98 8b       	std	Y+16, r25	; 0x10
    1518:	8f 87       	std	Y+15, r24	; 0x0f
    151a:	76 c0       	rjmp	.+236    	; 0x1608 <opendoor+0x204>
	_delay_ms(500);

	// Wait for PIR sensor to indicate no movement before locking
	while (pir != 0) {
		pir = PIR_getState();
    151c:	0e 94 7e 07 	call	0xefc	; 0xefc <PIR_getState>
    1520:	80 93 8d 01 	sts	0x018D, r24
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	aa ef       	ldi	r26, 0xFA	; 250
    152a:	b3 e4       	ldi	r27, 0x43	; 67
    152c:	8b 87       	std	Y+11, r24	; 0x0b
    152e:	9c 87       	std	Y+12, r25	; 0x0c
    1530:	ad 87       	std	Y+13, r26	; 0x0d
    1532:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1534:	6b 85       	ldd	r22, Y+11	; 0x0b
    1536:	7c 85       	ldd	r23, Y+12	; 0x0c
    1538:	8d 85       	ldd	r24, Y+13	; 0x0d
    153a:	9e 85       	ldd	r25, Y+14	; 0x0e
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	4a ef       	ldi	r20, 0xFA	; 250
    1542:	54 e4       	ldi	r21, 0x44	; 68
    1544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	8f 83       	std	Y+7, r24	; 0x07
    154e:	98 87       	std	Y+8, r25	; 0x08
    1550:	a9 87       	std	Y+9, r26	; 0x09
    1552:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1554:	6f 81       	ldd	r22, Y+7	; 0x07
    1556:	78 85       	ldd	r23, Y+8	; 0x08
    1558:	89 85       	ldd	r24, Y+9	; 0x09
    155a:	9a 85       	ldd	r25, Y+10	; 0x0a
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	40 e8       	ldi	r20, 0x80	; 128
    1562:	5f e3       	ldi	r21, 0x3F	; 63
    1564:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1568:	88 23       	and	r24, r24
    156a:	2c f4       	brge	.+10     	; 0x1576 <opendoor+0x172>
		__ticks = 1;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	9e 83       	std	Y+6, r25	; 0x06
    1572:	8d 83       	std	Y+5, r24	; 0x05
    1574:	3f c0       	rjmp	.+126    	; 0x15f4 <opendoor+0x1f0>
	else if (__tmp > 65535)
    1576:	6f 81       	ldd	r22, Y+7	; 0x07
    1578:	78 85       	ldd	r23, Y+8	; 0x08
    157a:	89 85       	ldd	r24, Y+9	; 0x09
    157c:	9a 85       	ldd	r25, Y+10	; 0x0a
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	3f ef       	ldi	r19, 0xFF	; 255
    1582:	4f e7       	ldi	r20, 0x7F	; 127
    1584:	57 e4       	ldi	r21, 0x47	; 71
    1586:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    158a:	18 16       	cp	r1, r24
    158c:	4c f5       	brge	.+82     	; 0x15e0 <opendoor+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1590:	7c 85       	ldd	r23, Y+12	; 0x0c
    1592:	8d 85       	ldd	r24, Y+13	; 0x0d
    1594:	9e 85       	ldd	r25, Y+14	; 0x0e
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e2       	ldi	r20, 0x20	; 32
    159c:	51 e4       	ldi	r21, 0x41	; 65
    159e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	bc 01       	movw	r22, r24
    15a8:	cd 01       	movw	r24, r26
    15aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	9e 83       	std	Y+6, r25	; 0x06
    15b4:	8d 83       	std	Y+5, r24	; 0x05
    15b6:	0f c0       	rjmp	.+30     	; 0x15d6 <opendoor+0x1d2>
    15b8:	88 ec       	ldi	r24, 0xC8	; 200
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	9c 83       	std	Y+4, r25	; 0x04
    15be:	8b 83       	std	Y+3, r24	; 0x03
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	f1 f7       	brne	.-4      	; 0x15c4 <opendoor+0x1c0>
    15c8:	9c 83       	std	Y+4, r25	; 0x04
    15ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
    15ce:	9e 81       	ldd	r25, Y+6	; 0x06
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	9e 83       	std	Y+6, r25	; 0x06
    15d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
    15d8:	9e 81       	ldd	r25, Y+6	; 0x06
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	69 f7       	brne	.-38     	; 0x15b8 <opendoor+0x1b4>
    15de:	14 c0       	rjmp	.+40     	; 0x1608 <opendoor+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e0:	6f 81       	ldd	r22, Y+7	; 0x07
    15e2:	78 85       	ldd	r23, Y+8	; 0x08
    15e4:	89 85       	ldd	r24, Y+9	; 0x09
    15e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	9e 83       	std	Y+6, r25	; 0x06
    15f2:	8d 83       	std	Y+5, r24	; 0x05
    15f4:	8d 81       	ldd	r24, Y+5	; 0x05
    15f6:	9e 81       	ldd	r25, Y+6	; 0x06
    15f8:	9a 83       	std	Y+2, r25	; 0x02
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	f1 f7       	brne	.-4      	; 0x1600 <opendoor+0x1fc>
    1604:	9a 83       	std	Y+2, r25	; 0x02
    1606:	89 83       	std	Y+1, r24	; 0x01

	DcMotor_Rotate(STOP, 0); // Stop motor
	_delay_ms(500);

	// Wait for PIR sensor to indicate no movement before locking
	while (pir != 0) {
    1608:	80 91 8d 01 	lds	r24, 0x018D
    160c:	88 23       	and	r24, r24
    160e:	09 f0       	breq	.+2      	; 0x1612 <opendoor+0x20e>
    1610:	85 cf       	rjmp	.-246    	; 0x151c <opendoor+0x118>
		pir = PIR_getState();
		_delay_ms(500);
	}

	UART_sendByte(1); // Send signal to lock the door
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <UART_sendByte>

	DcMotor_Rotate(AW, 100); // Rotate motor to lock door
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	64 e6       	ldi	r22, 0x64	; 100
    161c:	0e 94 35 07 	call	0xe6a	; 0xe6a <DcMotor_Rotate>

	timerfunction(15); // Delay for door locking
    1620:	8f e0       	ldi	r24, 0x0F	; 15
    1622:	0e 94 be 07 	call	0xf7c	; 0xf7c <timerfunction>

	DcMotor_Rotate(STOP, 100); // Stop motor
    1626:	82 e0       	ldi	r24, 0x02	; 2
    1628:	64 e6       	ldi	r22, 0x64	; 100
    162a:	0e 94 35 07 	call	0xe6a	; 0xe6a <DcMotor_Rotate>

}
    162e:	6c 96       	adiw	r28, 0x1c	; 28
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <turnonbuzzer>:
void turnonbuzzer(void) {
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
	Buzzer_on(); // Activate buzzer
    1648:	0e 94 9a 07 	call	0xf34	; 0xf34 <Buzzer_on>

	/* Timer setup for buzzer duration */
	timerfunction(60); // Delay for alarm duration
    164c:	8c e3       	ldi	r24, 0x3C	; 60
    164e:	0e 94 be 07 	call	0xf7c	; 0xf7c <timerfunction>

	Buzzer_off(); // Deactivate buzzer
    1652:	0e 94 a6 07 	call	0xf4c	; 0xf4c <Buzzer_off>
}
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <check_pass>:
uint8 check_pass(void){
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	61 97       	sbiw	r28, 0x11	; 17
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	f8 94       	cli
    166a:	de bf       	out	0x3e, r29	; 62
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	cd bf       	out	0x3d, r28	; 61
	uint8 val;
		for (uint8 i = 0; i < passwordlength; i++) {
    1670:	1f 86       	std	Y+15, r1	; 0x0f
    1672:	8b c0       	rjmp	.+278    	; 0x178a <check_pass+0x12e>
			EEPROM_readByte(0x01 + i, &val); // Read byte from EEPROM
    1674:	8f 85       	ldd	r24, Y+15	; 0x0f
    1676:	88 2f       	mov	r24, r24
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	9e 01       	movw	r18, r28
    167e:	20 5f       	subi	r18, 0xF0	; 240
    1680:	3f 4f       	sbci	r19, 0xFF	; 255
    1682:	b9 01       	movw	r22, r18
    1684:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <EEPROM_readByte>
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	a0 ea       	ldi	r26, 0xA0	; 160
    168e:	b1 e4       	ldi	r27, 0x41	; 65
    1690:	8b 87       	std	Y+11, r24	; 0x0b
    1692:	9c 87       	std	Y+12, r25	; 0x0c
    1694:	ad 87       	std	Y+13, r26	; 0x0d
    1696:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1698:	6b 85       	ldd	r22, Y+11	; 0x0b
    169a:	7c 85       	ldd	r23, Y+12	; 0x0c
    169c:	8d 85       	ldd	r24, Y+13	; 0x0d
    169e:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	4a ef       	ldi	r20, 0xFA	; 250
    16a6:	54 e4       	ldi	r21, 0x44	; 68
    16a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	8f 83       	std	Y+7, r24	; 0x07
    16b2:	98 87       	std	Y+8, r25	; 0x08
    16b4:	a9 87       	std	Y+9, r26	; 0x09
    16b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ba:	78 85       	ldd	r23, Y+8	; 0x08
    16bc:	89 85       	ldd	r24, Y+9	; 0x09
    16be:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 e8       	ldi	r20, 0x80	; 128
    16c6:	5f e3       	ldi	r21, 0x3F	; 63
    16c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16cc:	88 23       	and	r24, r24
    16ce:	2c f4       	brge	.+10     	; 0x16da <check_pass+0x7e>
		__ticks = 1;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	9e 83       	std	Y+6, r25	; 0x06
    16d6:	8d 83       	std	Y+5, r24	; 0x05
    16d8:	3f c0       	rjmp	.+126    	; 0x1758 <check_pass+0xfc>
	else if (__tmp > 65535)
    16da:	6f 81       	ldd	r22, Y+7	; 0x07
    16dc:	78 85       	ldd	r23, Y+8	; 0x08
    16de:	89 85       	ldd	r24, Y+9	; 0x09
    16e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	3f ef       	ldi	r19, 0xFF	; 255
    16e6:	4f e7       	ldi	r20, 0x7F	; 127
    16e8:	57 e4       	ldi	r21, 0x47	; 71
    16ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16ee:	18 16       	cp	r1, r24
    16f0:	4c f5       	brge	.+82     	; 0x1744 <check_pass+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e2       	ldi	r20, 0x20	; 32
    1700:	51 e4       	ldi	r21, 0x41	; 65
    1702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	bc 01       	movw	r22, r24
    170c:	cd 01       	movw	r24, r26
    170e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	9e 83       	std	Y+6, r25	; 0x06
    1718:	8d 83       	std	Y+5, r24	; 0x05
    171a:	0f c0       	rjmp	.+30     	; 0x173a <check_pass+0xde>
    171c:	88 ec       	ldi	r24, 0xC8	; 200
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9c 83       	std	Y+4, r25	; 0x04
    1722:	8b 83       	std	Y+3, r24	; 0x03
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	9c 81       	ldd	r25, Y+4	; 0x04
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	f1 f7       	brne	.-4      	; 0x1728 <check_pass+0xcc>
    172c:	9c 83       	std	Y+4, r25	; 0x04
    172e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1730:	8d 81       	ldd	r24, Y+5	; 0x05
    1732:	9e 81       	ldd	r25, Y+6	; 0x06
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	9e 83       	std	Y+6, r25	; 0x06
    1738:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9e 81       	ldd	r25, Y+6	; 0x06
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	69 f7       	brne	.-38     	; 0x171c <check_pass+0xc0>
    1742:	14 c0       	rjmp	.+40     	; 0x176c <check_pass+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1744:	6f 81       	ldd	r22, Y+7	; 0x07
    1746:	78 85       	ldd	r23, Y+8	; 0x08
    1748:	89 85       	ldd	r24, Y+9	; 0x09
    174a:	9a 85       	ldd	r25, Y+10	; 0x0a
    174c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	9e 83       	std	Y+6, r25	; 0x06
    1756:	8d 83       	std	Y+5, r24	; 0x05
    1758:	8d 81       	ldd	r24, Y+5	; 0x05
    175a:	9e 81       	ldd	r25, Y+6	; 0x06
    175c:	9a 83       	std	Y+2, r25	; 0x02
    175e:	89 83       	std	Y+1, r24	; 0x01
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <check_pass+0x108>
    1768:	9a 83       	std	Y+2, r25	; 0x02
    176a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);
			if (val != password2[i]) { // Compare each byte
    176c:	8f 85       	ldd	r24, Y+15	; 0x0f
    176e:	88 2f       	mov	r24, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	fc 01       	movw	r30, r24
    1774:	e8 57       	subi	r30, 0x78	; 120
    1776:	fe 4f       	sbci	r31, 0xFE	; 254
    1778:	90 81       	ld	r25, Z
    177a:	88 89       	ldd	r24, Y+16	; 0x10
    177c:	98 17       	cp	r25, r24
    177e:	11 f0       	breq	.+4      	; 0x1784 <check_pass+0x128>
				return 0; // Return REJECTED if mismatch
    1780:	19 8a       	std	Y+17, r1	; 0x11
    1782:	09 c0       	rjmp	.+18     	; 0x1796 <check_pass+0x13a>

	Buzzer_off(); // Deactivate buzzer
}
uint8 check_pass(void){
	uint8 val;
		for (uint8 i = 0; i < passwordlength; i++) {
    1784:	8f 85       	ldd	r24, Y+15	; 0x0f
    1786:	8f 5f       	subi	r24, 0xFF	; 255
    1788:	8f 87       	std	Y+15, r24	; 0x0f
    178a:	8f 85       	ldd	r24, Y+15	; 0x0f
    178c:	85 30       	cpi	r24, 0x05	; 5
    178e:	08 f4       	brcc	.+2      	; 0x1792 <check_pass+0x136>
    1790:	71 cf       	rjmp	.-286    	; 0x1674 <check_pass+0x18>
			_delay_ms(20);
			if (val != password2[i]) { // Compare each byte
				return 0; // Return REJECTED if mismatch
			}
		}
		return 1; // Return VERIFIED if password matches
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	89 8b       	std	Y+17, r24	; 0x11
    1796:	89 89       	ldd	r24, Y+17	; 0x11





}
    1798:	61 96       	adiw	r28, 0x11	; 17
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <main>:





int main(void){
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	ac 97       	sbiw	r28, 0x2c	; 44
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7);
    17be:	af e5       	ldi	r26, 0x5F	; 95
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	ef e5       	ldi	r30, 0x5F	; 95
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	80 68       	ori	r24, 0x80	; 128
    17ca:	8c 93       	st	X, r24
	UART_ConfigType UART_Configurations = {BITS_8, DISABLED, BITS_1, 9600};
    17cc:	9e 01       	movw	r18, r28
    17ce:	20 5f       	subi	r18, 0xF0	; 240
    17d0:	3f 4f       	sbci	r19, 0xFF	; 255
    17d2:	3c a3       	std	Y+36, r19	; 0x24
    17d4:	2b a3       	std	Y+35, r18	; 0x23
    17d6:	89 e7       	ldi	r24, 0x79	; 121
    17d8:	91 e0       	ldi	r25, 0x01	; 1
    17da:	9e a3       	std	Y+38, r25	; 0x26
    17dc:	8d a3       	std	Y+37, r24	; 0x25
    17de:	97 e0       	ldi	r25, 0x07	; 7
    17e0:	9f a3       	std	Y+39, r25	; 0x27
    17e2:	ed a1       	ldd	r30, Y+37	; 0x25
    17e4:	fe a1       	ldd	r31, Y+38	; 0x26
    17e6:	00 80       	ld	r0, Z
    17e8:	2d a1       	ldd	r18, Y+37	; 0x25
    17ea:	3e a1       	ldd	r19, Y+38	; 0x26
    17ec:	2f 5f       	subi	r18, 0xFF	; 255
    17ee:	3f 4f       	sbci	r19, 0xFF	; 255
    17f0:	3e a3       	std	Y+38, r19	; 0x26
    17f2:	2d a3       	std	Y+37, r18	; 0x25
    17f4:	eb a1       	ldd	r30, Y+35	; 0x23
    17f6:	fc a1       	ldd	r31, Y+36	; 0x24
    17f8:	00 82       	st	Z, r0
    17fa:	2b a1       	ldd	r18, Y+35	; 0x23
    17fc:	3c a1       	ldd	r19, Y+36	; 0x24
    17fe:	2f 5f       	subi	r18, 0xFF	; 255
    1800:	3f 4f       	sbci	r19, 0xFF	; 255
    1802:	3c a3       	std	Y+36, r19	; 0x24
    1804:	2b a3       	std	Y+35, r18	; 0x23
    1806:	3f a1       	ldd	r19, Y+39	; 0x27
    1808:	31 50       	subi	r19, 0x01	; 1
    180a:	3f a3       	std	Y+39, r19	; 0x27
    180c:	8f a1       	ldd	r24, Y+39	; 0x27
    180e:	88 23       	and	r24, r24
    1810:	41 f7       	brne	.-48     	; 0x17e2 <main+0x38>
	TWI_ConfigType TWI_Configurations = {0,400000, 0x01};
    1812:	fe 01       	movw	r30, r28
    1814:	77 96       	adiw	r30, 0x17	; 23
    1816:	f9 a7       	std	Y+41, r31	; 0x29
    1818:	e8 a7       	std	Y+40, r30	; 0x28
    181a:	2f e6       	ldi	r18, 0x6F	; 111
    181c:	31 e0       	ldi	r19, 0x01	; 1
    181e:	3b a7       	std	Y+43, r19	; 0x2b
    1820:	2a a7       	std	Y+42, r18	; 0x2a
    1822:	3a e0       	ldi	r19, 0x0A	; 10
    1824:	3c a7       	std	Y+44, r19	; 0x2c
    1826:	ea a5       	ldd	r30, Y+42	; 0x2a
    1828:	fb a5       	ldd	r31, Y+43	; 0x2b
    182a:	00 80       	ld	r0, Z
    182c:	2a a5       	ldd	r18, Y+42	; 0x2a
    182e:	3b a5       	ldd	r19, Y+43	; 0x2b
    1830:	2f 5f       	subi	r18, 0xFF	; 255
    1832:	3f 4f       	sbci	r19, 0xFF	; 255
    1834:	3b a7       	std	Y+43, r19	; 0x2b
    1836:	2a a7       	std	Y+42, r18	; 0x2a
    1838:	e8 a5       	ldd	r30, Y+40	; 0x28
    183a:	f9 a5       	ldd	r31, Y+41	; 0x29
    183c:	00 82       	st	Z, r0
    183e:	28 a5       	ldd	r18, Y+40	; 0x28
    1840:	39 a5       	ldd	r19, Y+41	; 0x29
    1842:	2f 5f       	subi	r18, 0xFF	; 255
    1844:	3f 4f       	sbci	r19, 0xFF	; 255
    1846:	39 a7       	std	Y+41, r19	; 0x29
    1848:	28 a7       	std	Y+40, r18	; 0x28
    184a:	3c a5       	ldd	r19, Y+44	; 0x2c
    184c:	31 50       	subi	r19, 0x01	; 1
    184e:	3c a7       	std	Y+44, r19	; 0x2c
    1850:	8c a5       	ldd	r24, Y+44	; 0x2c
    1852:	88 23       	and	r24, r24
    1854:	41 f7       	brne	.-48     	; 0x1826 <main+0x7c>
	UART_init(&UART_Configurations);
    1856:	ce 01       	movw	r24, r28
    1858:	40 96       	adiw	r24, 0x10	; 16
    185a:	0e 94 28 15 	call	0x2a50	; 0x2a50 <UART_init>
	TWI_init(&TWI_Configurations);
    185e:	ce 01       	movw	r24, r28
    1860:	47 96       	adiw	r24, 0x17	; 23
    1862:	0e 94 96 14 	call	0x292c	; 0x292c <TWI_init>
	PIR_init();
    1866:	0e 94 6d 07 	call	0xeda	; 0xeda <PIR_init>
	DcMotor_Init();
    186a:	0e 94 17 07 	call	0xe2e	; 0xe2e <DcMotor_Init>
	Buzzer_init();
    186e:	0e 94 89 07 	call	0xf12	; 0xf12 <Buzzer_init>
	uint8 step=0;
    1872:	1f 86       	std	Y+15, r1	; 0x0f
//		}
//		if(UART_recieveByte()=='b'){
//					step=buzzeron;
//				}

		switch(step){
    1874:	8f 85       	ldd	r24, Y+15	; 0x0f
    1876:	e8 2f       	mov	r30, r24
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	fa a3       	std	Y+34, r31	; 0x22
    187c:	e9 a3       	std	Y+33, r30	; 0x21
    187e:	29 a1       	ldd	r18, Y+33	; 0x21
    1880:	3a a1       	ldd	r19, Y+34	; 0x22
    1882:	21 30       	cpi	r18, 0x01	; 1
    1884:	31 05       	cpc	r19, r1
    1886:	11 f1       	breq	.+68     	; 0x18cc <main+0x122>
    1888:	89 a1       	ldd	r24, Y+33	; 0x21
    188a:	9a a1       	ldd	r25, Y+34	; 0x22
    188c:	82 30       	cpi	r24, 0x02	; 2
    188e:	91 05       	cpc	r25, r1
    1890:	2c f4       	brge	.+10     	; 0x189c <main+0xf2>
    1892:	e9 a1       	ldd	r30, Y+33	; 0x21
    1894:	fa a1       	ldd	r31, Y+34	; 0x22
    1896:	30 97       	sbiw	r30, 0x00	; 0
    1898:	71 f0       	breq	.+28     	; 0x18b6 <main+0x10c>
    189a:	ec cf       	rjmp	.-40     	; 0x1874 <main+0xca>
    189c:	29 a1       	ldd	r18, Y+33	; 0x21
    189e:	3a a1       	ldd	r19, Y+34	; 0x22
    18a0:	24 36       	cpi	r18, 0x64	; 100
    18a2:	31 05       	cpc	r19, r1
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <main+0xfe>
    18a6:	a8 c0       	rjmp	.+336    	; 0x19f8 <main+0x24e>
    18a8:	89 a1       	ldd	r24, Y+33	; 0x21
    18aa:	9a a1       	ldd	r25, Y+34	; 0x22
    18ac:	8e 36       	cpi	r24, 0x6E	; 110
    18ae:	91 05       	cpc	r25, r1
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <main+0x10a>
    18b2:	9d c0       	rjmp	.+314    	; 0x19ee <main+0x244>
    18b4:	df cf       	rjmp	.-66     	; 0x1874 <main+0xca>
		case 0:
			recievepass(password1);
    18b6:	8f e8       	ldi	r24, 0x8F	; 143
    18b8:	91 e0       	ldi	r25, 0x01	; 1
    18ba:	0e 94 15 08 	call	0x102a	; 0x102a <recievepass>
			SaveinEEPROM(password1);
    18be:	8f e8       	ldi	r24, 0x8F	; 143
    18c0:	91 e0       	ldi	r25, 0x01	; 1
    18c2:	0e 94 b5 08 	call	0x116a	; 0x116a <SaveinEEPROM>
			step=1;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	8f 87       	std	Y+15, r24	; 0x0f
    18ca:	d4 cf       	rjmp	.-88     	; 0x1874 <main+0xca>
			break;
		case 1:
			recievepass(password2);
    18cc:	88 e8       	ldi	r24, 0x88	; 136
    18ce:	91 e0       	ldi	r25, 0x01	; 1
    18d0:	0e 94 15 08 	call	0x102a	; 0x102a <recievepass>
			match=check_pass();
    18d4:	0e 94 2e 0b 	call	0x165c	; 0x165c <check_pass>
    18d8:	80 93 94 01 	sts	0x0194, r24
//			UART_sendByte(180); // Send readiness signal
//			_delay_ms(200);
			UART_sendByte(match); // Send verification result
    18dc:	80 91 94 01 	lds	r24, 0x0194
    18e0:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <UART_sendByte>
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a8 e4       	ldi	r26, 0x48	; 72
    18ea:	b3 e4       	ldi	r27, 0x43	; 67
    18ec:	8b 87       	std	Y+11, r24	; 0x0b
    18ee:	9c 87       	std	Y+12, r25	; 0x0c
    18f0:	ad 87       	std	Y+13, r26	; 0x0d
    18f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	4a ef       	ldi	r20, 0xFA	; 250
    1902:	54 e4       	ldi	r21, 0x44	; 68
    1904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	8f 83       	std	Y+7, r24	; 0x07
    190e:	98 87       	std	Y+8, r25	; 0x08
    1910:	a9 87       	std	Y+9, r26	; 0x09
    1912:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1914:	6f 81       	ldd	r22, Y+7	; 0x07
    1916:	78 85       	ldd	r23, Y+8	; 0x08
    1918:	89 85       	ldd	r24, Y+9	; 0x09
    191a:	9a 85       	ldd	r25, Y+10	; 0x0a
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e8       	ldi	r20, 0x80	; 128
    1922:	5f e3       	ldi	r21, 0x3F	; 63
    1924:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1928:	88 23       	and	r24, r24
    192a:	2c f4       	brge	.+10     	; 0x1936 <main+0x18c>
		__ticks = 1;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	9e 83       	std	Y+6, r25	; 0x06
    1932:	8d 83       	std	Y+5, r24	; 0x05
    1934:	3f c0       	rjmp	.+126    	; 0x19b4 <main+0x20a>
	else if (__tmp > 65535)
    1936:	6f 81       	ldd	r22, Y+7	; 0x07
    1938:	78 85       	ldd	r23, Y+8	; 0x08
    193a:	89 85       	ldd	r24, Y+9	; 0x09
    193c:	9a 85       	ldd	r25, Y+10	; 0x0a
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	3f ef       	ldi	r19, 0xFF	; 255
    1942:	4f e7       	ldi	r20, 0x7F	; 127
    1944:	57 e4       	ldi	r21, 0x47	; 71
    1946:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    194a:	18 16       	cp	r1, r24
    194c:	4c f5       	brge	.+82     	; 0x19a0 <main+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1950:	7c 85       	ldd	r23, Y+12	; 0x0c
    1952:	8d 85       	ldd	r24, Y+13	; 0x0d
    1954:	9e 85       	ldd	r25, Y+14	; 0x0e
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	40 e2       	ldi	r20, 0x20	; 32
    195c:	51 e4       	ldi	r21, 0x41	; 65
    195e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	bc 01       	movw	r22, r24
    1968:	cd 01       	movw	r24, r26
    196a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	9e 83       	std	Y+6, r25	; 0x06
    1974:	8d 83       	std	Y+5, r24	; 0x05
    1976:	0f c0       	rjmp	.+30     	; 0x1996 <main+0x1ec>
    1978:	88 ec       	ldi	r24, 0xC8	; 200
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9c 83       	std	Y+4, r25	; 0x04
    197e:	8b 83       	std	Y+3, r24	; 0x03
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	9c 81       	ldd	r25, Y+4	; 0x04
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <main+0x1da>
    1988:	9c 83       	std	Y+4, r25	; 0x04
    198a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198c:	8d 81       	ldd	r24, Y+5	; 0x05
    198e:	9e 81       	ldd	r25, Y+6	; 0x06
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	9e 83       	std	Y+6, r25	; 0x06
    1994:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1996:	8d 81       	ldd	r24, Y+5	; 0x05
    1998:	9e 81       	ldd	r25, Y+6	; 0x06
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	69 f7       	brne	.-38     	; 0x1978 <main+0x1ce>
    199e:	14 c0       	rjmp	.+40     	; 0x19c8 <main+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a0:	6f 81       	ldd	r22, Y+7	; 0x07
    19a2:	78 85       	ldd	r23, Y+8	; 0x08
    19a4:	89 85       	ldd	r24, Y+9	; 0x09
    19a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	9e 83       	std	Y+6, r25	; 0x06
    19b2:	8d 83       	std	Y+5, r24	; 0x05
    19b4:	8d 81       	ldd	r24, Y+5	; 0x05
    19b6:	9e 81       	ldd	r25, Y+6	; 0x06
    19b8:	9a 83       	std	Y+2, r25	; 0x02
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <main+0x216>
    19c4:	9a 83       	std	Y+2, r25	; 0x02
    19c6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(200);

			val=UART_recieveByte();
    19c8:	0e 94 34 16 	call	0x2c68	; 0x2c68 <UART_recieveByte>
    19cc:	80 93 8e 01 	sts	0x018E, r24
			if(val==0){
    19d0:	80 91 8e 01 	lds	r24, 0x018E
    19d4:	88 23       	and	r24, r24
    19d6:	19 f4       	brne	.+6      	; 0x19de <main+0x234>
				step=openingdoor;
    19d8:	8e e6       	ldi	r24, 0x6E	; 110
    19da:	8f 87       	std	Y+15, r24	; 0x0f
    19dc:	4b cf       	rjmp	.-362    	; 0x1874 <main+0xca>
			}
			else if(val==8) {
    19de:	80 91 8e 01 	lds	r24, 0x018E
    19e2:	88 30       	cpi	r24, 0x08	; 8
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <main+0x23e>
    19e6:	46 cf       	rjmp	.-372    	; 0x1874 <main+0xca>
				step=buzzeron;
    19e8:	84 e6       	ldi	r24, 0x64	; 100
    19ea:	8f 87       	std	Y+15, r24	; 0x0f
    19ec:	43 cf       	rjmp	.-378    	; 0x1874 <main+0xca>
			}
			break;
		case openingdoor:
			opendoor();
    19ee:	0e 94 02 0a 	call	0x1404	; 0x1404 <opendoor>
			step=1;
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	8f 87       	std	Y+15, r24	; 0x0f
    19f6:	3e cf       	rjmp	.-388    	; 0x1874 <main+0xca>
			break;
		case buzzeron:
			turnonbuzzer();
    19f8:	0e 94 20 0b 	call	0x1640	; 0x1640 <turnonbuzzer>
			step=1;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	8f 87       	std	Y+15, r24	; 0x0f
    1a00:	39 cf       	rjmp	.-398    	; 0x1874 <main+0xca>

00001a02 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <EEPROM_writeByte+0x6>
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <EEPROM_writeByte+0x8>
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	9a 83       	std	Y+2, r25	; 0x02
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1a14:	0e 94 c1 14 	call	0x2982	; 0x2982 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1a18:	0e 94 19 15 	call	0x2a32	; 0x2a32 <TWI_getStatus>
    1a1c:	88 30       	cpi	r24, 0x08	; 8
    1a1e:	11 f0       	breq	.+4      	; 0x1a24 <EEPROM_writeByte+0x22>
        return ERROR;
    1a20:	1c 82       	std	Y+4, r1	; 0x04
    1a22:	28 c0       	rjmp	.+80     	; 0x1a74 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	9a 81       	ldd	r25, Y+2	; 0x02
    1a28:	80 70       	andi	r24, 0x00	; 0
    1a2a:	97 70       	andi	r25, 0x07	; 7
    1a2c:	88 0f       	add	r24, r24
    1a2e:	89 2f       	mov	r24, r25
    1a30:	88 1f       	adc	r24, r24
    1a32:	99 0b       	sbc	r25, r25
    1a34:	91 95       	neg	r25
    1a36:	80 6a       	ori	r24, 0xA0	; 160
    1a38:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1a3c:	0e 94 19 15 	call	0x2a32	; 0x2a32 <TWI_getStatus>
    1a40:	88 31       	cpi	r24, 0x18	; 24
    1a42:	11 f0       	breq	.+4      	; 0x1a48 <EEPROM_writeByte+0x46>
        return ERROR; 
    1a44:	1c 82       	std	Y+4, r1	; 0x04
    1a46:	16 c0       	rjmp	.+44     	; 0x1a74 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1a4e:	0e 94 19 15 	call	0x2a32	; 0x2a32 <TWI_getStatus>
    1a52:	88 32       	cpi	r24, 0x28	; 40
    1a54:	11 f0       	breq	.+4      	; 0x1a5a <EEPROM_writeByte+0x58>
        return ERROR;
    1a56:	1c 82       	std	Y+4, r1	; 0x04
    1a58:	0d c0       	rjmp	.+26     	; 0x1a74 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1a60:	0e 94 19 15 	call	0x2a32	; 0x2a32 <TWI_getStatus>
    1a64:	88 32       	cpi	r24, 0x28	; 40
    1a66:	11 f0       	breq	.+4      	; 0x1a6c <EEPROM_writeByte+0x6a>
        return ERROR;
    1a68:	1c 82       	std	Y+4, r1	; 0x04
    1a6a:	04 c0       	rjmp	.+8      	; 0x1a74 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1a6c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <TWI_stop>
	
    return SUCCESS;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	8c 83       	std	Y+4, r24	; 0x04
    1a74:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	00 d0       	rcall	.+0      	; 0x1a8a <EEPROM_readByte+0x6>
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <EEPROM_readByte+0x8>
    1a8c:	0f 92       	push	r0
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	9a 83       	std	Y+2, r25	; 0x02
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	7c 83       	std	Y+4, r23	; 0x04
    1a98:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1a9a:	0e 94 c1 14 	call	0x2982	; 0x2982 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1a9e:	0e 94 19 15 	call	0x2a32	; 0x2a32 <TWI_getStatus>
    1aa2:	88 30       	cpi	r24, 0x08	; 8
    1aa4:	11 f0       	breq	.+4      	; 0x1aaa <EEPROM_readByte+0x26>
        return ERROR;
    1aa6:	1d 82       	std	Y+5, r1	; 0x05
    1aa8:	44 c0       	rjmp	.+136    	; 0x1b32 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	80 70       	andi	r24, 0x00	; 0
    1ab0:	97 70       	andi	r25, 0x07	; 7
    1ab2:	88 0f       	add	r24, r24
    1ab4:	89 2f       	mov	r24, r25
    1ab6:	88 1f       	adc	r24, r24
    1ab8:	99 0b       	sbc	r25, r25
    1aba:	91 95       	neg	r25
    1abc:	80 6a       	ori	r24, 0xA0	; 160
    1abe:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1ac2:	0e 94 19 15 	call	0x2a32	; 0x2a32 <TWI_getStatus>
    1ac6:	88 31       	cpi	r24, 0x18	; 24
    1ac8:	11 f0       	breq	.+4      	; 0x1ace <EEPROM_readByte+0x4a>
        return ERROR;
    1aca:	1d 82       	std	Y+5, r1	; 0x05
    1acc:	32 c0       	rjmp	.+100    	; 0x1b32 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1ad4:	0e 94 19 15 	call	0x2a32	; 0x2a32 <TWI_getStatus>
    1ad8:	88 32       	cpi	r24, 0x28	; 40
    1ada:	11 f0       	breq	.+4      	; 0x1ae0 <EEPROM_readByte+0x5c>
        return ERROR;
    1adc:	1d 82       	std	Y+5, r1	; 0x05
    1ade:	29 c0       	rjmp	.+82     	; 0x1b32 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1ae0:	0e 94 c1 14 	call	0x2982	; 0x2982 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1ae4:	0e 94 19 15 	call	0x2a32	; 0x2a32 <TWI_getStatus>
    1ae8:	80 31       	cpi	r24, 0x10	; 16
    1aea:	11 f0       	breq	.+4      	; 0x1af0 <EEPROM_readByte+0x6c>
        return ERROR;
    1aec:	1d 82       	std	Y+5, r1	; 0x05
    1aee:	21 c0       	rjmp	.+66     	; 0x1b32 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	80 70       	andi	r24, 0x00	; 0
    1af6:	97 70       	andi	r25, 0x07	; 7
    1af8:	88 0f       	add	r24, r24
    1afa:	89 2f       	mov	r24, r25
    1afc:	88 1f       	adc	r24, r24
    1afe:	99 0b       	sbc	r25, r25
    1b00:	91 95       	neg	r25
    1b02:	81 6a       	ori	r24, 0xA1	; 161
    1b04:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1b08:	0e 94 19 15 	call	0x2a32	; 0x2a32 <TWI_getStatus>
    1b0c:	80 34       	cpi	r24, 0x40	; 64
    1b0e:	11 f0       	breq	.+4      	; 0x1b14 <EEPROM_readByte+0x90>
        return ERROR;
    1b10:	1d 82       	std	Y+5, r1	; 0x05
    1b12:	0f c0       	rjmp	.+30     	; 0x1b32 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1b14:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <TWI_readByteWithNACK>
    1b18:	eb 81       	ldd	r30, Y+3	; 0x03
    1b1a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b1c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1b1e:	0e 94 19 15 	call	0x2a32	; 0x2a32 <TWI_getStatus>
    1b22:	88 35       	cpi	r24, 0x58	; 88
    1b24:	11 f0       	breq	.+4      	; 0x1b2a <EEPROM_readByte+0xa6>
        return ERROR;
    1b26:	1d 82       	std	Y+5, r1	; 0x05
    1b28:	04 c0       	rjmp	.+8      	; 0x1b32 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1b2a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <TWI_stop>

    return SUCCESS;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	8d 83       	std	Y+5, r24	; 0x05
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <GPIO_setupPinDirection+0x6>
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <GPIO_setupPinDirection+0x8>
    1b4c:	0f 92       	push	r0
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	6a 83       	std	Y+2, r22	; 0x02
    1b56:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	88 30       	cpi	r24, 0x08	; 8
    1b5c:	08 f0       	brcs	.+2      	; 0x1b60 <GPIO_setupPinDirection+0x1c>
    1b5e:	d5 c0       	rjmp	.+426    	; 0x1d0a <GPIO_setupPinDirection+0x1c6>
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	84 30       	cpi	r24, 0x04	; 4
    1b64:	08 f0       	brcs	.+2      	; 0x1b68 <GPIO_setupPinDirection+0x24>
    1b66:	d1 c0       	rjmp	.+418    	; 0x1d0a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	3d 83       	std	Y+5, r19	; 0x05
    1b70:	2c 83       	std	Y+4, r18	; 0x04
    1b72:	8c 81       	ldd	r24, Y+4	; 0x04
    1b74:	9d 81       	ldd	r25, Y+5	; 0x05
    1b76:	81 30       	cpi	r24, 0x01	; 1
    1b78:	91 05       	cpc	r25, r1
    1b7a:	09 f4       	brne	.+2      	; 0x1b7e <GPIO_setupPinDirection+0x3a>
    1b7c:	43 c0       	rjmp	.+134    	; 0x1c04 <GPIO_setupPinDirection+0xc0>
    1b7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b80:	3d 81       	ldd	r19, Y+5	; 0x05
    1b82:	22 30       	cpi	r18, 0x02	; 2
    1b84:	31 05       	cpc	r19, r1
    1b86:	2c f4       	brge	.+10     	; 0x1b92 <GPIO_setupPinDirection+0x4e>
    1b88:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8c:	00 97       	sbiw	r24, 0x00	; 0
    1b8e:	71 f0       	breq	.+28     	; 0x1bac <GPIO_setupPinDirection+0x68>
    1b90:	bc c0       	rjmp	.+376    	; 0x1d0a <GPIO_setupPinDirection+0x1c6>
    1b92:	2c 81       	ldd	r18, Y+4	; 0x04
    1b94:	3d 81       	ldd	r19, Y+5	; 0x05
    1b96:	22 30       	cpi	r18, 0x02	; 2
    1b98:	31 05       	cpc	r19, r1
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <GPIO_setupPinDirection+0x5a>
    1b9c:	5f c0       	rjmp	.+190    	; 0x1c5c <GPIO_setupPinDirection+0x118>
    1b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba2:	83 30       	cpi	r24, 0x03	; 3
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	09 f4       	brne	.+2      	; 0x1baa <GPIO_setupPinDirection+0x66>
    1ba8:	85 c0       	rjmp	.+266    	; 0x1cb4 <GPIO_setupPinDirection+0x170>
    1baa:	af c0       	rjmp	.+350    	; 0x1d0a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	81 30       	cpi	r24, 0x01	; 1
    1bb0:	a1 f4       	brne	.+40     	; 0x1bda <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1bb2:	aa e3       	ldi	r26, 0x3A	; 58
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	ea e3       	ldi	r30, 0x3A	; 58
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	48 2f       	mov	r20, r24
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	02 2e       	mov	r0, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <GPIO_setupPinDirection+0x8c>
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	0a 94       	dec	r0
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <GPIO_setupPinDirection+0x88>
    1bd4:	84 2b       	or	r24, r20
    1bd6:	8c 93       	st	X, r24
    1bd8:	98 c0       	rjmp	.+304    	; 0x1d0a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1bda:	aa e3       	ldi	r26, 0x3A	; 58
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	ea e3       	ldi	r30, 0x3A	; 58
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	48 2f       	mov	r20, r24
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	02 2e       	mov	r0, r18
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <GPIO_setupPinDirection+0xb4>
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	0a 94       	dec	r0
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <GPIO_setupPinDirection+0xb0>
    1bfc:	80 95       	com	r24
    1bfe:	84 23       	and	r24, r20
    1c00:	8c 93       	st	X, r24
    1c02:	83 c0       	rjmp	.+262    	; 0x1d0a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	81 30       	cpi	r24, 0x01	; 1
    1c08:	a1 f4       	brne	.+40     	; 0x1c32 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1c0a:	a7 e3       	ldi	r26, 0x37	; 55
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e7 e3       	ldi	r30, 0x37	; 55
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	48 2f       	mov	r20, r24
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	02 2e       	mov	r0, r18
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <GPIO_setupPinDirection+0xe4>
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	0a 94       	dec	r0
    1c2a:	e2 f7       	brpl	.-8      	; 0x1c24 <GPIO_setupPinDirection+0xe0>
    1c2c:	84 2b       	or	r24, r20
    1c2e:	8c 93       	st	X, r24
    1c30:	6c c0       	rjmp	.+216    	; 0x1d0a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1c32:	a7 e3       	ldi	r26, 0x37	; 55
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e7 e3       	ldi	r30, 0x37	; 55
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	48 2f       	mov	r20, r24
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	02 2e       	mov	r0, r18
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <GPIO_setupPinDirection+0x10c>
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	0a 94       	dec	r0
    1c52:	e2 f7       	brpl	.-8      	; 0x1c4c <GPIO_setupPinDirection+0x108>
    1c54:	80 95       	com	r24
    1c56:	84 23       	and	r24, r20
    1c58:	8c 93       	st	X, r24
    1c5a:	57 c0       	rjmp	.+174    	; 0x1d0a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	a1 f4       	brne	.+40     	; 0x1c8a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1c62:	a4 e3       	ldi	r26, 0x34	; 52
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e4 e3       	ldi	r30, 0x34	; 52
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	48 2f       	mov	r20, r24
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	02 2e       	mov	r0, r18
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <GPIO_setupPinDirection+0x13c>
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	0a 94       	dec	r0
    1c82:	e2 f7       	brpl	.-8      	; 0x1c7c <GPIO_setupPinDirection+0x138>
    1c84:	84 2b       	or	r24, r20
    1c86:	8c 93       	st	X, r24
    1c88:	40 c0       	rjmp	.+128    	; 0x1d0a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1c8a:	a4 e3       	ldi	r26, 0x34	; 52
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e4 e3       	ldi	r30, 0x34	; 52
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	48 2f       	mov	r20, r24
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	02 2e       	mov	r0, r18
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <GPIO_setupPinDirection+0x164>
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	0a 94       	dec	r0
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <GPIO_setupPinDirection+0x160>
    1cac:	80 95       	com	r24
    1cae:	84 23       	and	r24, r20
    1cb0:	8c 93       	st	X, r24
    1cb2:	2b c0       	rjmp	.+86     	; 0x1d0a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	81 30       	cpi	r24, 0x01	; 1
    1cb8:	a1 f4       	brne	.+40     	; 0x1ce2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1cba:	a1 e3       	ldi	r26, 0x31	; 49
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e1 e3       	ldi	r30, 0x31	; 49
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	48 2f       	mov	r20, r24
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	02 2e       	mov	r0, r18
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <GPIO_setupPinDirection+0x194>
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	0a 94       	dec	r0
    1cda:	e2 f7       	brpl	.-8      	; 0x1cd4 <GPIO_setupPinDirection+0x190>
    1cdc:	84 2b       	or	r24, r20
    1cde:	8c 93       	st	X, r24
    1ce0:	14 c0       	rjmp	.+40     	; 0x1d0a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1ce2:	a1 e3       	ldi	r26, 0x31	; 49
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e1 e3       	ldi	r30, 0x31	; 49
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	48 2f       	mov	r20, r24
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	02 2e       	mov	r0, r18
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <GPIO_setupPinDirection+0x1bc>
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	0a 94       	dec	r0
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <GPIO_setupPinDirection+0x1b8>
    1d04:	80 95       	com	r24
    1d06:	84 23       	and	r24, r20
    1d08:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <GPIO_writePin+0x6>
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <GPIO_writePin+0x8>
    1d22:	0f 92       	push	r0
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	6a 83       	std	Y+2, r22	; 0x02
    1d2c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	88 30       	cpi	r24, 0x08	; 8
    1d32:	08 f0       	brcs	.+2      	; 0x1d36 <GPIO_writePin+0x1c>
    1d34:	d5 c0       	rjmp	.+426    	; 0x1ee0 <GPIO_writePin+0x1c6>
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	84 30       	cpi	r24, 0x04	; 4
    1d3a:	08 f0       	brcs	.+2      	; 0x1d3e <GPIO_writePin+0x24>
    1d3c:	d1 c0       	rjmp	.+418    	; 0x1ee0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	3d 83       	std	Y+5, r19	; 0x05
    1d46:	2c 83       	std	Y+4, r18	; 0x04
    1d48:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4c:	81 30       	cpi	r24, 0x01	; 1
    1d4e:	91 05       	cpc	r25, r1
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <GPIO_writePin+0x3a>
    1d52:	43 c0       	rjmp	.+134    	; 0x1dda <GPIO_writePin+0xc0>
    1d54:	2c 81       	ldd	r18, Y+4	; 0x04
    1d56:	3d 81       	ldd	r19, Y+5	; 0x05
    1d58:	22 30       	cpi	r18, 0x02	; 2
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	2c f4       	brge	.+10     	; 0x1d68 <GPIO_writePin+0x4e>
    1d5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d60:	9d 81       	ldd	r25, Y+5	; 0x05
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	71 f0       	breq	.+28     	; 0x1d82 <GPIO_writePin+0x68>
    1d66:	bc c0       	rjmp	.+376    	; 0x1ee0 <GPIO_writePin+0x1c6>
    1d68:	2c 81       	ldd	r18, Y+4	; 0x04
    1d6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d6c:	22 30       	cpi	r18, 0x02	; 2
    1d6e:	31 05       	cpc	r19, r1
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <GPIO_writePin+0x5a>
    1d72:	5f c0       	rjmp	.+190    	; 0x1e32 <GPIO_writePin+0x118>
    1d74:	8c 81       	ldd	r24, Y+4	; 0x04
    1d76:	9d 81       	ldd	r25, Y+5	; 0x05
    1d78:	83 30       	cpi	r24, 0x03	; 3
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <GPIO_writePin+0x66>
    1d7e:	85 c0       	rjmp	.+266    	; 0x1e8a <GPIO_writePin+0x170>
    1d80:	af c0       	rjmp	.+350    	; 0x1ee0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	a1 f4       	brne	.+40     	; 0x1db0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1d88:	ab e3       	ldi	r26, 0x3B	; 59
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	eb e3       	ldi	r30, 0x3B	; 59
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	48 2f       	mov	r20, r24
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	02 2e       	mov	r0, r18
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <GPIO_writePin+0x8c>
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	0a 94       	dec	r0
    1da8:	e2 f7       	brpl	.-8      	; 0x1da2 <GPIO_writePin+0x88>
    1daa:	84 2b       	or	r24, r20
    1dac:	8c 93       	st	X, r24
    1dae:	98 c0       	rjmp	.+304    	; 0x1ee0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1db0:	ab e3       	ldi	r26, 0x3B	; 59
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	eb e3       	ldi	r30, 0x3B	; 59
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	48 2f       	mov	r20, r24
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	02 2e       	mov	r0, r18
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <GPIO_writePin+0xb4>
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	0a 94       	dec	r0
    1dd0:	e2 f7       	brpl	.-8      	; 0x1dca <GPIO_writePin+0xb0>
    1dd2:	80 95       	com	r24
    1dd4:	84 23       	and	r24, r20
    1dd6:	8c 93       	st	X, r24
    1dd8:	83 c0       	rjmp	.+262    	; 0x1ee0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	a1 f4       	brne	.+40     	; 0x1e08 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1de0:	a8 e3       	ldi	r26, 0x38	; 56
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e8 e3       	ldi	r30, 0x38	; 56
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	48 2f       	mov	r20, r24
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	02 2e       	mov	r0, r18
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <GPIO_writePin+0xe4>
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	0a 94       	dec	r0
    1e00:	e2 f7       	brpl	.-8      	; 0x1dfa <GPIO_writePin+0xe0>
    1e02:	84 2b       	or	r24, r20
    1e04:	8c 93       	st	X, r24
    1e06:	6c c0       	rjmp	.+216    	; 0x1ee0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1e08:	a8 e3       	ldi	r26, 0x38	; 56
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e8 e3       	ldi	r30, 0x38	; 56
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	48 2f       	mov	r20, r24
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	02 2e       	mov	r0, r18
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <GPIO_writePin+0x10c>
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	0a 94       	dec	r0
    1e28:	e2 f7       	brpl	.-8      	; 0x1e22 <GPIO_writePin+0x108>
    1e2a:	80 95       	com	r24
    1e2c:	84 23       	and	r24, r20
    1e2e:	8c 93       	st	X, r24
    1e30:	57 c0       	rjmp	.+174    	; 0x1ee0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	81 30       	cpi	r24, 0x01	; 1
    1e36:	a1 f4       	brne	.+40     	; 0x1e60 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1e38:	a5 e3       	ldi	r26, 0x35	; 53
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e5 e3       	ldi	r30, 0x35	; 53
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	48 2f       	mov	r20, r24
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	02 2e       	mov	r0, r18
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <GPIO_writePin+0x13c>
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	0a 94       	dec	r0
    1e58:	e2 f7       	brpl	.-8      	; 0x1e52 <GPIO_writePin+0x138>
    1e5a:	84 2b       	or	r24, r20
    1e5c:	8c 93       	st	X, r24
    1e5e:	40 c0       	rjmp	.+128    	; 0x1ee0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1e60:	a5 e3       	ldi	r26, 0x35	; 53
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e5 e3       	ldi	r30, 0x35	; 53
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	48 2f       	mov	r20, r24
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	02 2e       	mov	r0, r18
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <GPIO_writePin+0x164>
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	0a 94       	dec	r0
    1e80:	e2 f7       	brpl	.-8      	; 0x1e7a <GPIO_writePin+0x160>
    1e82:	80 95       	com	r24
    1e84:	84 23       	and	r24, r20
    1e86:	8c 93       	st	X, r24
    1e88:	2b c0       	rjmp	.+86     	; 0x1ee0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	81 30       	cpi	r24, 0x01	; 1
    1e8e:	a1 f4       	brne	.+40     	; 0x1eb8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1e90:	a2 e3       	ldi	r26, 0x32	; 50
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e2 e3       	ldi	r30, 0x32	; 50
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	48 2f       	mov	r20, r24
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	02 2e       	mov	r0, r18
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <GPIO_writePin+0x194>
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	0a 94       	dec	r0
    1eb0:	e2 f7       	brpl	.-8      	; 0x1eaa <GPIO_writePin+0x190>
    1eb2:	84 2b       	or	r24, r20
    1eb4:	8c 93       	st	X, r24
    1eb6:	14 c0       	rjmp	.+40     	; 0x1ee0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1eb8:	a2 e3       	ldi	r26, 0x32	; 50
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	e2 e3       	ldi	r30, 0x32	; 50
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	48 2f       	mov	r20, r24
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	02 2e       	mov	r0, r18
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <GPIO_writePin+0x1bc>
    1ed2:	88 0f       	add	r24, r24
    1ed4:	99 1f       	adc	r25, r25
    1ed6:	0a 94       	dec	r0
    1ed8:	e2 f7       	brpl	.-8      	; 0x1ed2 <GPIO_writePin+0x1b8>
    1eda:	80 95       	com	r24
    1edc:	84 23       	and	r24, r20
    1ede:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <GPIO_readPin+0x6>
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <GPIO_readPin+0x8>
    1ef8:	0f 92       	push	r0
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	8a 83       	std	Y+2, r24	; 0x02
    1f00:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1f02:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	88 30       	cpi	r24, 0x08	; 8
    1f08:	08 f0       	brcs	.+2      	; 0x1f0c <GPIO_readPin+0x1c>
    1f0a:	84 c0       	rjmp	.+264    	; 0x2014 <GPIO_readPin+0x124>
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	84 30       	cpi	r24, 0x04	; 4
    1f10:	08 f0       	brcs	.+2      	; 0x1f14 <GPIO_readPin+0x24>
    1f12:	80 c0       	rjmp	.+256    	; 0x2014 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	3d 83       	std	Y+5, r19	; 0x05
    1f1c:	2c 83       	std	Y+4, r18	; 0x04
    1f1e:	4c 81       	ldd	r20, Y+4	; 0x04
    1f20:	5d 81       	ldd	r21, Y+5	; 0x05
    1f22:	41 30       	cpi	r20, 0x01	; 1
    1f24:	51 05       	cpc	r21, r1
    1f26:	79 f1       	breq	.+94     	; 0x1f86 <GPIO_readPin+0x96>
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2c:	82 30       	cpi	r24, 0x02	; 2
    1f2e:	91 05       	cpc	r25, r1
    1f30:	34 f4       	brge	.+12     	; 0x1f3e <GPIO_readPin+0x4e>
    1f32:	2c 81       	ldd	r18, Y+4	; 0x04
    1f34:	3d 81       	ldd	r19, Y+5	; 0x05
    1f36:	21 15       	cp	r18, r1
    1f38:	31 05       	cpc	r19, r1
    1f3a:	69 f0       	breq	.+26     	; 0x1f56 <GPIO_readPin+0x66>
    1f3c:	6b c0       	rjmp	.+214    	; 0x2014 <GPIO_readPin+0x124>
    1f3e:	4c 81       	ldd	r20, Y+4	; 0x04
    1f40:	5d 81       	ldd	r21, Y+5	; 0x05
    1f42:	42 30       	cpi	r20, 0x02	; 2
    1f44:	51 05       	cpc	r21, r1
    1f46:	b9 f1       	breq	.+110    	; 0x1fb6 <GPIO_readPin+0xc6>
    1f48:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4c:	83 30       	cpi	r24, 0x03	; 3
    1f4e:	91 05       	cpc	r25, r1
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <GPIO_readPin+0x64>
    1f52:	49 c0       	rjmp	.+146    	; 0x1fe6 <GPIO_readPin+0xf6>
    1f54:	5f c0       	rjmp	.+190    	; 0x2014 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1f56:	e9 e3       	ldi	r30, 0x39	; 57
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	8b 81       	ldd	r24, Y+3	; 0x03
    1f62:	88 2f       	mov	r24, r24
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	a9 01       	movw	r20, r18
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <GPIO_readPin+0x7e>
    1f6a:	55 95       	asr	r21
    1f6c:	47 95       	ror	r20
    1f6e:	8a 95       	dec	r24
    1f70:	e2 f7       	brpl	.-8      	; 0x1f6a <GPIO_readPin+0x7a>
    1f72:	ca 01       	movw	r24, r20
    1f74:	81 70       	andi	r24, 0x01	; 1
    1f76:	90 70       	andi	r25, 0x00	; 0
    1f78:	88 23       	and	r24, r24
    1f7a:	19 f0       	breq	.+6      	; 0x1f82 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	49 c0       	rjmp	.+146    	; 0x2014 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f82:	19 82       	std	Y+1, r1	; 0x01
    1f84:	47 c0       	rjmp	.+142    	; 0x2014 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1f86:	e6 e3       	ldi	r30, 0x36	; 54
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	88 2f       	mov	r24, r24
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	a9 01       	movw	r20, r18
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <GPIO_readPin+0xae>
    1f9a:	55 95       	asr	r21
    1f9c:	47 95       	ror	r20
    1f9e:	8a 95       	dec	r24
    1fa0:	e2 f7       	brpl	.-8      	; 0x1f9a <GPIO_readPin+0xaa>
    1fa2:	ca 01       	movw	r24, r20
    1fa4:	81 70       	andi	r24, 0x01	; 1
    1fa6:	90 70       	andi	r25, 0x00	; 0
    1fa8:	88 23       	and	r24, r24
    1faa:	19 f0       	breq	.+6      	; 0x1fb2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	89 83       	std	Y+1, r24	; 0x01
    1fb0:	31 c0       	rjmp	.+98     	; 0x2014 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1fb2:	19 82       	std	Y+1, r1	; 0x01
    1fb4:	2f c0       	rjmp	.+94     	; 0x2014 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1fb6:	e3 e3       	ldi	r30, 0x33	; 51
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	88 2f       	mov	r24, r24
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a9 01       	movw	r20, r18
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <GPIO_readPin+0xde>
    1fca:	55 95       	asr	r21
    1fcc:	47 95       	ror	r20
    1fce:	8a 95       	dec	r24
    1fd0:	e2 f7       	brpl	.-8      	; 0x1fca <GPIO_readPin+0xda>
    1fd2:	ca 01       	movw	r24, r20
    1fd4:	81 70       	andi	r24, 0x01	; 1
    1fd6:	90 70       	andi	r25, 0x00	; 0
    1fd8:	88 23       	and	r24, r24
    1fda:	19 f0       	breq	.+6      	; 0x1fe2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	89 83       	std	Y+1, r24	; 0x01
    1fe0:	19 c0       	rjmp	.+50     	; 0x2014 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1fe2:	19 82       	std	Y+1, r1	; 0x01
    1fe4:	17 c0       	rjmp	.+46     	; 0x2014 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1fe6:	e0 e3       	ldi	r30, 0x30	; 48
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	28 2f       	mov	r18, r24
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	88 2f       	mov	r24, r24
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	a9 01       	movw	r20, r18
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <GPIO_readPin+0x10e>
    1ffa:	55 95       	asr	r21
    1ffc:	47 95       	ror	r20
    1ffe:	8a 95       	dec	r24
    2000:	e2 f7       	brpl	.-8      	; 0x1ffa <GPIO_readPin+0x10a>
    2002:	ca 01       	movw	r24, r20
    2004:	81 70       	andi	r24, 0x01	; 1
    2006:	90 70       	andi	r25, 0x00	; 0
    2008:	88 23       	and	r24, r24
    200a:	19 f0       	breq	.+6      	; 0x2012 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	89 83       	std	Y+1, r24	; 0x01
    2010:	01 c0       	rjmp	.+2      	; 0x2014 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2012:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2014:	89 81       	ldd	r24, Y+1	; 0x01
}
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	00 d0       	rcall	.+0      	; 0x202c <GPIO_setupPortDirection+0x6>
    202c:	00 d0       	rcall	.+0      	; 0x202e <GPIO_setupPortDirection+0x8>
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	84 30       	cpi	r24, 0x04	; 4
    203a:	90 f5       	brcc	.+100    	; 0x20a0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	3c 83       	std	Y+4, r19	; 0x04
    2044:	2b 83       	std	Y+3, r18	; 0x03
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	9c 81       	ldd	r25, Y+4	; 0x04
    204a:	81 30       	cpi	r24, 0x01	; 1
    204c:	91 05       	cpc	r25, r1
    204e:	d1 f0       	breq	.+52     	; 0x2084 <GPIO_setupPortDirection+0x5e>
    2050:	2b 81       	ldd	r18, Y+3	; 0x03
    2052:	3c 81       	ldd	r19, Y+4	; 0x04
    2054:	22 30       	cpi	r18, 0x02	; 2
    2056:	31 05       	cpc	r19, r1
    2058:	2c f4       	brge	.+10     	; 0x2064 <GPIO_setupPortDirection+0x3e>
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	9c 81       	ldd	r25, Y+4	; 0x04
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	61 f0       	breq	.+24     	; 0x207a <GPIO_setupPortDirection+0x54>
    2062:	1e c0       	rjmp	.+60     	; 0x20a0 <GPIO_setupPortDirection+0x7a>
    2064:	2b 81       	ldd	r18, Y+3	; 0x03
    2066:	3c 81       	ldd	r19, Y+4	; 0x04
    2068:	22 30       	cpi	r18, 0x02	; 2
    206a:	31 05       	cpc	r19, r1
    206c:	81 f0       	breq	.+32     	; 0x208e <GPIO_setupPortDirection+0x68>
    206e:	8b 81       	ldd	r24, Y+3	; 0x03
    2070:	9c 81       	ldd	r25, Y+4	; 0x04
    2072:	83 30       	cpi	r24, 0x03	; 3
    2074:	91 05       	cpc	r25, r1
    2076:	81 f0       	breq	.+32     	; 0x2098 <GPIO_setupPortDirection+0x72>
    2078:	13 c0       	rjmp	.+38     	; 0x20a0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    207a:	ea e3       	ldi	r30, 0x3A	; 58
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	80 83       	st	Z, r24
    2082:	0e c0       	rjmp	.+28     	; 0x20a0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2084:	e7 e3       	ldi	r30, 0x37	; 55
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	80 83       	st	Z, r24
    208c:	09 c0       	rjmp	.+18     	; 0x20a0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    208e:	e4 e3       	ldi	r30, 0x34	; 52
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	80 83       	st	Z, r24
    2096:	04 c0       	rjmp	.+8      	; 0x20a0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2098:	e1 e3       	ldi	r30, 0x31	; 49
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	80 83       	st	Z, r24
			break;
		}
	}
}
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <GPIO_writePort+0x6>
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <GPIO_writePort+0x8>
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	84 30       	cpi	r24, 0x04	; 4
    20c2:	90 f5       	brcc	.+100    	; 0x2128 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	28 2f       	mov	r18, r24
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	3c 83       	std	Y+4, r19	; 0x04
    20cc:	2b 83       	std	Y+3, r18	; 0x03
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	9c 81       	ldd	r25, Y+4	; 0x04
    20d2:	81 30       	cpi	r24, 0x01	; 1
    20d4:	91 05       	cpc	r25, r1
    20d6:	d1 f0       	breq	.+52     	; 0x210c <GPIO_writePort+0x5e>
    20d8:	2b 81       	ldd	r18, Y+3	; 0x03
    20da:	3c 81       	ldd	r19, Y+4	; 0x04
    20dc:	22 30       	cpi	r18, 0x02	; 2
    20de:	31 05       	cpc	r19, r1
    20e0:	2c f4       	brge	.+10     	; 0x20ec <GPIO_writePort+0x3e>
    20e2:	8b 81       	ldd	r24, Y+3	; 0x03
    20e4:	9c 81       	ldd	r25, Y+4	; 0x04
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	61 f0       	breq	.+24     	; 0x2102 <GPIO_writePort+0x54>
    20ea:	1e c0       	rjmp	.+60     	; 0x2128 <GPIO_writePort+0x7a>
    20ec:	2b 81       	ldd	r18, Y+3	; 0x03
    20ee:	3c 81       	ldd	r19, Y+4	; 0x04
    20f0:	22 30       	cpi	r18, 0x02	; 2
    20f2:	31 05       	cpc	r19, r1
    20f4:	81 f0       	breq	.+32     	; 0x2116 <GPIO_writePort+0x68>
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	9c 81       	ldd	r25, Y+4	; 0x04
    20fa:	83 30       	cpi	r24, 0x03	; 3
    20fc:	91 05       	cpc	r25, r1
    20fe:	81 f0       	breq	.+32     	; 0x2120 <GPIO_writePort+0x72>
    2100:	13 c0       	rjmp	.+38     	; 0x2128 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2102:	eb e3       	ldi	r30, 0x3B	; 59
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	8a 81       	ldd	r24, Y+2	; 0x02
    2108:	80 83       	st	Z, r24
    210a:	0e c0       	rjmp	.+28     	; 0x2128 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    210c:	e8 e3       	ldi	r30, 0x38	; 56
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	8a 81       	ldd	r24, Y+2	; 0x02
    2112:	80 83       	st	Z, r24
    2114:	09 c0       	rjmp	.+18     	; 0x2128 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2116:	e5 e3       	ldi	r30, 0x35	; 53
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	80 83       	st	Z, r24
    211e:	04 c0       	rjmp	.+8      	; 0x2128 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2120:	e2 e3       	ldi	r30, 0x32	; 50
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	80 83       	st	Z, r24
			break;
		}
	}
}
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	00 d0       	rcall	.+0      	; 0x213c <GPIO_readPort+0x6>
    213c:	00 d0       	rcall	.+0      	; 0x213e <GPIO_readPort+0x8>
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2144:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	84 30       	cpi	r24, 0x04	; 4
    214a:	90 f5       	brcc	.+100    	; 0x21b0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    214c:	8a 81       	ldd	r24, Y+2	; 0x02
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	3c 83       	std	Y+4, r19	; 0x04
    2154:	2b 83       	std	Y+3, r18	; 0x03
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	9c 81       	ldd	r25, Y+4	; 0x04
    215a:	81 30       	cpi	r24, 0x01	; 1
    215c:	91 05       	cpc	r25, r1
    215e:	d1 f0       	breq	.+52     	; 0x2194 <GPIO_readPort+0x5e>
    2160:	2b 81       	ldd	r18, Y+3	; 0x03
    2162:	3c 81       	ldd	r19, Y+4	; 0x04
    2164:	22 30       	cpi	r18, 0x02	; 2
    2166:	31 05       	cpc	r19, r1
    2168:	2c f4       	brge	.+10     	; 0x2174 <GPIO_readPort+0x3e>
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	9c 81       	ldd	r25, Y+4	; 0x04
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	61 f0       	breq	.+24     	; 0x218a <GPIO_readPort+0x54>
    2172:	1e c0       	rjmp	.+60     	; 0x21b0 <GPIO_readPort+0x7a>
    2174:	2b 81       	ldd	r18, Y+3	; 0x03
    2176:	3c 81       	ldd	r19, Y+4	; 0x04
    2178:	22 30       	cpi	r18, 0x02	; 2
    217a:	31 05       	cpc	r19, r1
    217c:	81 f0       	breq	.+32     	; 0x219e <GPIO_readPort+0x68>
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	9c 81       	ldd	r25, Y+4	; 0x04
    2182:	83 30       	cpi	r24, 0x03	; 3
    2184:	91 05       	cpc	r25, r1
    2186:	81 f0       	breq	.+32     	; 0x21a8 <GPIO_readPort+0x72>
    2188:	13 c0       	rjmp	.+38     	; 0x21b0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    218a:	e9 e3       	ldi	r30, 0x39	; 57
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	0e c0       	rjmp	.+28     	; 0x21b0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2194:	e6 e3       	ldi	r30, 0x36	; 54
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	89 83       	std	Y+1, r24	; 0x01
    219c:	09 c0       	rjmp	.+18     	; 0x21b0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    219e:	e3 e3       	ldi	r30, 0x33	; 51
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	89 83       	std	Y+1, r24	; 0x01
    21a6:	04 c0       	rjmp	.+8      	; 0x21b0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    21a8:	e0 e3       	ldi	r30, 0x30	; 48
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <PWM_TIMER0_Start>:
 * - Configures OC0 as the output pin.
 *
 * Parameters:
 *   - duty_cycle: Percentage (0 to 100%) representing the PWM duty cycle
 */
void PWM_TIMER0_Start(uint8 duty_cycle) {
    21c0:	0f 93       	push	r16
    21c2:	1f 93       	push	r17
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	0f 92       	push	r0
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	89 83       	std	Y+1, r24	; 0x01
    /* Calculate the compare value based on the duty cycle (0-100% mapped to 0-255) */
    OCR0 = (uint8)(((float)duty_cycle / 100.0) * 255);
    21d0:	0c e5       	ldi	r16, 0x5C	; 92
    21d2:	10 e0       	ldi	r17, 0x00	; 0
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	88 2f       	mov	r24, r24
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	a0 e0       	ldi	r26, 0x00	; 0
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	bc 01       	movw	r22, r24
    21e0:	cd 01       	movw	r24, r26
    21e2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	bc 01       	movw	r22, r24
    21ec:	cd 01       	movw	r24, r26
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	48 ec       	ldi	r20, 0xC8	; 200
    21f4:	52 e4       	ldi	r21, 0x42	; 66
    21f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	4f e7       	ldi	r20, 0x7F	; 127
    2208:	53 e4       	ldi	r21, 0x43	; 67
    220a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	bc 01       	movw	r22, r24
    2214:	cd 01       	movw	r24, r26
    2216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	f8 01       	movw	r30, r16
    2220:	80 83       	st	Z, r24
    /* Configure TIMER0:
     * - Fast PWM mode (WGM01 and WGM00 set)
     * - Non-inverting mode (COM01 set)
     * - Prescaler of F_CPU/64 (CS01 and CS00 set)
     */
    TCCR0 = (1 << WGM01) | (1 << WGM00) | (1 << COM01) | (1 << CS01) | (1 << CS00);
    2222:	e3 e5       	ldi	r30, 0x53	; 83
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	8b e6       	ldi	r24, 0x6B	; 107
    2228:	80 83       	st	Z, r24

    /* Configure OC0 (PWM output pin) as output */
    GPIO_setupPinDirection(PWM_OUTPUT_COMPARE_PORT_ID, PWM_OUTPUT_COMPARE_PIN_ID, PIN_OUTPUT);
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	63 e0       	ldi	r22, 0x03	; 3
    222e:	41 e0       	ldi	r20, 0x01	; 1
    2230:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <GPIO_setupPinDirection>

    /* Initialize Timer0 counter */
    TCNT0 = 0;
    2234:	e2 e5       	ldi	r30, 0x52	; 82
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	10 82       	st	Z, r1
}
    223a:	0f 90       	pop	r0
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	1f 91       	pop	r17
    2242:	0f 91       	pop	r16
    2244:	08 95       	ret

00002246 <__vector_11>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    2246:	1f 92       	push	r1
    2248:	0f 92       	push	r0
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	0f 92       	push	r0
    224e:	11 24       	eor	r1, r1
    2250:	2f 93       	push	r18
    2252:	3f 93       	push	r19
    2254:	4f 93       	push	r20
    2256:	5f 93       	push	r21
    2258:	6f 93       	push	r22
    225a:	7f 93       	push	r23
    225c:	8f 93       	push	r24
    225e:	9f 93       	push	r25
    2260:	af 93       	push	r26
    2262:	bf 93       	push	r27
    2264:	ef 93       	push	r30
    2266:	ff 93       	push	r31
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    2270:	80 91 82 01 	lds	r24, 0x0182
    2274:	90 91 83 01 	lds	r25, 0x0183
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	29 f0       	breq	.+10     	; 0x2286 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application  */
		(*g_callBackPtr0)();
    227c:	e0 91 82 01 	lds	r30, 0x0182
    2280:	f0 91 83 01 	lds	r31, 0x0183
    2284:	09 95       	icall
	}
}
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	ff 91       	pop	r31
    228c:	ef 91       	pop	r30
    228e:	bf 91       	pop	r27
    2290:	af 91       	pop	r26
    2292:	9f 91       	pop	r25
    2294:	8f 91       	pop	r24
    2296:	7f 91       	pop	r23
    2298:	6f 91       	pop	r22
    229a:	5f 91       	pop	r21
    229c:	4f 91       	pop	r20
    229e:	3f 91       	pop	r19
    22a0:	2f 91       	pop	r18
    22a2:	0f 90       	pop	r0
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	0f 90       	pop	r0
    22a8:	1f 90       	pop	r1
    22aa:	18 95       	reti

000022ac <__vector_10>:


ISR(TIMER0_COMP_vect)
{
    22ac:	1f 92       	push	r1
    22ae:	0f 92       	push	r0
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	0f 92       	push	r0
    22b4:	11 24       	eor	r1, r1
    22b6:	2f 93       	push	r18
    22b8:	3f 93       	push	r19
    22ba:	4f 93       	push	r20
    22bc:	5f 93       	push	r21
    22be:	6f 93       	push	r22
    22c0:	7f 93       	push	r23
    22c2:	8f 93       	push	r24
    22c4:	9f 93       	push	r25
    22c6:	af 93       	push	r26
    22c8:	bf 93       	push	r27
    22ca:	ef 93       	push	r30
    22cc:	ff 93       	push	r31
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    22d6:	80 91 82 01 	lds	r24, 0x0182
    22da:	90 91 83 01 	lds	r25, 0x0183
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	29 f0       	breq	.+10     	; 0x22ec <__vector_10+0x40>
	{
		/* Call the Call Back function in the application  */
		(*g_callBackPtr0)();
    22e2:	e0 91 82 01 	lds	r30, 0x0182
    22e6:	f0 91 83 01 	lds	r31, 0x0183
    22ea:	09 95       	icall
	}
}
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	ff 91       	pop	r31
    22f2:	ef 91       	pop	r30
    22f4:	bf 91       	pop	r27
    22f6:	af 91       	pop	r26
    22f8:	9f 91       	pop	r25
    22fa:	8f 91       	pop	r24
    22fc:	7f 91       	pop	r23
    22fe:	6f 91       	pop	r22
    2300:	5f 91       	pop	r21
    2302:	4f 91       	pop	r20
    2304:	3f 91       	pop	r19
    2306:	2f 91       	pop	r18
    2308:	0f 90       	pop	r0
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	0f 90       	pop	r0
    230e:	1f 90       	pop	r1
    2310:	18 95       	reti

00002312 <__vector_7>:



ISR(TIMER1_COMPA_vect)
{
    2312:	1f 92       	push	r1
    2314:	0f 92       	push	r0
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	0f 92       	push	r0
    231a:	11 24       	eor	r1, r1
    231c:	2f 93       	push	r18
    231e:	3f 93       	push	r19
    2320:	4f 93       	push	r20
    2322:	5f 93       	push	r21
    2324:	6f 93       	push	r22
    2326:	7f 93       	push	r23
    2328:	8f 93       	push	r24
    232a:	9f 93       	push	r25
    232c:	af 93       	push	r26
    232e:	bf 93       	push	r27
    2330:	ef 93       	push	r30
    2332:	ff 93       	push	r31
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    233c:	80 91 84 01 	lds	r24, 0x0184
    2340:	90 91 85 01 	lds	r25, 0x0185
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	29 f0       	breq	.+10     	; 0x2352 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application  */
		(*g_callBackPtr1)();
    2348:	e0 91 84 01 	lds	r30, 0x0184
    234c:	f0 91 85 01 	lds	r31, 0x0185
    2350:	09 95       	icall
	}
}
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	ff 91       	pop	r31
    2358:	ef 91       	pop	r30
    235a:	bf 91       	pop	r27
    235c:	af 91       	pop	r26
    235e:	9f 91       	pop	r25
    2360:	8f 91       	pop	r24
    2362:	7f 91       	pop	r23
    2364:	6f 91       	pop	r22
    2366:	5f 91       	pop	r21
    2368:	4f 91       	pop	r20
    236a:	3f 91       	pop	r19
    236c:	2f 91       	pop	r18
    236e:	0f 90       	pop	r0
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	0f 90       	pop	r0
    2374:	1f 90       	pop	r1
    2376:	18 95       	reti

00002378 <__vector_8>:




ISR(TIMER1_COMPB_vect)
{
    2378:	1f 92       	push	r1
    237a:	0f 92       	push	r0
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	0f 92       	push	r0
    2380:	11 24       	eor	r1, r1
    2382:	2f 93       	push	r18
    2384:	3f 93       	push	r19
    2386:	4f 93       	push	r20
    2388:	5f 93       	push	r21
    238a:	6f 93       	push	r22
    238c:	7f 93       	push	r23
    238e:	8f 93       	push	r24
    2390:	9f 93       	push	r25
    2392:	af 93       	push	r26
    2394:	bf 93       	push	r27
    2396:	ef 93       	push	r30
    2398:	ff 93       	push	r31
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    23a2:	80 91 84 01 	lds	r24, 0x0184
    23a6:	90 91 85 01 	lds	r25, 0x0185
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	29 f0       	breq	.+10     	; 0x23b8 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application  */
		(*g_callBackPtr1)();
    23ae:	e0 91 84 01 	lds	r30, 0x0184
    23b2:	f0 91 85 01 	lds	r31, 0x0185
    23b6:	09 95       	icall
	}
}
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	ff 91       	pop	r31
    23be:	ef 91       	pop	r30
    23c0:	bf 91       	pop	r27
    23c2:	af 91       	pop	r26
    23c4:	9f 91       	pop	r25
    23c6:	8f 91       	pop	r24
    23c8:	7f 91       	pop	r23
    23ca:	6f 91       	pop	r22
    23cc:	5f 91       	pop	r21
    23ce:	4f 91       	pop	r20
    23d0:	3f 91       	pop	r19
    23d2:	2f 91       	pop	r18
    23d4:	0f 90       	pop	r0
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	0f 90       	pop	r0
    23da:	1f 90       	pop	r1
    23dc:	18 95       	reti

000023de <__vector_9>:



ISR(TIMER1_OVF_vect)
{
    23de:	1f 92       	push	r1
    23e0:	0f 92       	push	r0
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	0f 92       	push	r0
    23e6:	11 24       	eor	r1, r1
    23e8:	2f 93       	push	r18
    23ea:	3f 93       	push	r19
    23ec:	4f 93       	push	r20
    23ee:	5f 93       	push	r21
    23f0:	6f 93       	push	r22
    23f2:	7f 93       	push	r23
    23f4:	8f 93       	push	r24
    23f6:	9f 93       	push	r25
    23f8:	af 93       	push	r26
    23fa:	bf 93       	push	r27
    23fc:	ef 93       	push	r30
    23fe:	ff 93       	push	r31
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    2408:	80 91 84 01 	lds	r24, 0x0184
    240c:	90 91 85 01 	lds	r25, 0x0185
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	29 f0       	breq	.+10     	; 0x241e <__vector_9+0x40>
	{
		/* Call the Call Back function in the application  */
		(*g_callBackPtr1)();
    2414:	e0 91 84 01 	lds	r30, 0x0184
    2418:	f0 91 85 01 	lds	r31, 0x0185
    241c:	09 95       	icall
	}
}
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	ff 91       	pop	r31
    2424:	ef 91       	pop	r30
    2426:	bf 91       	pop	r27
    2428:	af 91       	pop	r26
    242a:	9f 91       	pop	r25
    242c:	8f 91       	pop	r24
    242e:	7f 91       	pop	r23
    2430:	6f 91       	pop	r22
    2432:	5f 91       	pop	r21
    2434:	4f 91       	pop	r20
    2436:	3f 91       	pop	r19
    2438:	2f 91       	pop	r18
    243a:	0f 90       	pop	r0
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	0f 90       	pop	r0
    2440:	1f 90       	pop	r1
    2442:	18 95       	reti

00002444 <__vector_4>:



ISR(TIMER2_COMP_vect)
{
    2444:	1f 92       	push	r1
    2446:	0f 92       	push	r0
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	0f 92       	push	r0
    244c:	11 24       	eor	r1, r1
    244e:	2f 93       	push	r18
    2450:	3f 93       	push	r19
    2452:	4f 93       	push	r20
    2454:	5f 93       	push	r21
    2456:	6f 93       	push	r22
    2458:	7f 93       	push	r23
    245a:	8f 93       	push	r24
    245c:	9f 93       	push	r25
    245e:	af 93       	push	r26
    2460:	bf 93       	push	r27
    2462:	ef 93       	push	r30
    2464:	ff 93       	push	r31
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    246e:	80 91 86 01 	lds	r24, 0x0186
    2472:	90 91 87 01 	lds	r25, 0x0187
    2476:	00 97       	sbiw	r24, 0x00	; 0
    2478:	29 f0       	breq	.+10     	; 0x2484 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application  */
		(*g_callBackPtr2)();
    247a:	e0 91 86 01 	lds	r30, 0x0186
    247e:	f0 91 87 01 	lds	r31, 0x0187
    2482:	09 95       	icall
	}
}
    2484:	cf 91       	pop	r28
    2486:	df 91       	pop	r29
    2488:	ff 91       	pop	r31
    248a:	ef 91       	pop	r30
    248c:	bf 91       	pop	r27
    248e:	af 91       	pop	r26
    2490:	9f 91       	pop	r25
    2492:	8f 91       	pop	r24
    2494:	7f 91       	pop	r23
    2496:	6f 91       	pop	r22
    2498:	5f 91       	pop	r21
    249a:	4f 91       	pop	r20
    249c:	3f 91       	pop	r19
    249e:	2f 91       	pop	r18
    24a0:	0f 90       	pop	r0
    24a2:	0f be       	out	0x3f, r0	; 63
    24a4:	0f 90       	pop	r0
    24a6:	1f 90       	pop	r1
    24a8:	18 95       	reti

000024aa <__vector_5>:


ISR(TIMER2_OVF_vect)
{
    24aa:	1f 92       	push	r1
    24ac:	0f 92       	push	r0
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	0f 92       	push	r0
    24b2:	11 24       	eor	r1, r1
    24b4:	2f 93       	push	r18
    24b6:	3f 93       	push	r19
    24b8:	4f 93       	push	r20
    24ba:	5f 93       	push	r21
    24bc:	6f 93       	push	r22
    24be:	7f 93       	push	r23
    24c0:	8f 93       	push	r24
    24c2:	9f 93       	push	r25
    24c4:	af 93       	push	r26
    24c6:	bf 93       	push	r27
    24c8:	ef 93       	push	r30
    24ca:	ff 93       	push	r31
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    24d4:	80 91 86 01 	lds	r24, 0x0186
    24d8:	90 91 87 01 	lds	r25, 0x0187
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	29 f0       	breq	.+10     	; 0x24ea <__vector_5+0x40>
	{
		/* Call the Call Back function in the application  */
		(*g_callBackPtr2)();
    24e0:	e0 91 86 01 	lds	r30, 0x0186
    24e4:	f0 91 87 01 	lds	r31, 0x0187
    24e8:	09 95       	icall
	}
}
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	ff 91       	pop	r31
    24f0:	ef 91       	pop	r30
    24f2:	bf 91       	pop	r27
    24f4:	af 91       	pop	r26
    24f6:	9f 91       	pop	r25
    24f8:	8f 91       	pop	r24
    24fa:	7f 91       	pop	r23
    24fc:	6f 91       	pop	r22
    24fe:	5f 91       	pop	r21
    2500:	4f 91       	pop	r20
    2502:	3f 91       	pop	r19
    2504:	2f 91       	pop	r18
    2506:	0f 90       	pop	r0
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	0f 90       	pop	r0
    250c:	1f 90       	pop	r1
    250e:	18 95       	reti

00002510 <Timer_init>:
 * 4-choose each of intial value or compare match according to the mode type
 * Inputs: pointer to the configuration structure with type Timer_ConfigType.
 *
 */

void Timer_init(const Timer_ConfigType * Config_Ptr)  {
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	28 97       	sbiw	r28, 0x08	; 8
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	cd bf       	out	0x3d, r28	; 61
    2524:	9a 83       	std	Y+2, r25	; 0x02
    2526:	89 83       	std	Y+1, r24	; 0x01


    if ( Config_Ptr->timer_ID == TIMER0){
    2528:	e9 81       	ldd	r30, Y+1	; 0x01
    252a:	fa 81       	ldd	r31, Y+2	; 0x02
    252c:	84 81       	ldd	r24, Z+4	; 0x04
    252e:	88 23       	and	r24, r24
    2530:	09 f0       	breq	.+2      	; 0x2534 <Timer_init+0x24>
    2532:	55 c0       	rjmp	.+170    	; 0x25de <Timer_init+0xce>
    	 *2-MODE configurable
    	 * 3. clock configurable
    	 * 4-intial value
    	 */

    	TCCR0 = (1<<FOC0) ;
    2534:	e3 e5       	ldi	r30, 0x53	; 83
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 e8       	ldi	r24, 0x80	; 128
    253a:	80 83       	st	Z, r24
    	//TCCR0 =  (TCCR0 & 0xB7) | (((Config_Ptr->timer_mode) & (0XFD)) << 2) | (((Config_Ptr->timer_mode) & (0XFE)) << 6) ;
    	switch(Config_Ptr->timer_mode){
    253c:	e9 81       	ldd	r30, Y+1	; 0x01
    253e:	fa 81       	ldd	r31, Y+2	; 0x02
    2540:	86 81       	ldd	r24, Z+6	; 0x06
    2542:	28 2f       	mov	r18, r24
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	38 87       	std	Y+8, r19	; 0x08
    2548:	2f 83       	std	Y+7, r18	; 0x07
    254a:	8f 81       	ldd	r24, Y+7	; 0x07
    254c:	98 85       	ldd	r25, Y+8	; 0x08
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	31 f0       	breq	.+12     	; 0x255e <Timer_init+0x4e>
    2552:	2f 81       	ldd	r18, Y+7	; 0x07
    2554:	38 85       	ldd	r19, Y+8	; 0x08
    2556:	21 30       	cpi	r18, 0x01	; 1
    2558:	31 05       	cpc	r19, r1
    255a:	81 f0       	breq	.+32     	; 0x257c <Timer_init+0x6c>
    255c:	2b c0       	rjmp	.+86     	; 0x25b4 <Timer_init+0xa4>

    	   case NORMAL:

    		   TCCR0 &= ~(1<< WGM01) & ~(1<<WGM00);/*WGM00=0 ,WGM01=0 */
    255e:	a3 e5       	ldi	r26, 0x53	; 83
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	e3 e5       	ldi	r30, 0x53	; 83
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	87 7b       	andi	r24, 0xB7	; 183
    256a:	8c 93       	st	X, r24
       		   TIMSK |= (1<<TOIE0); // Enable Timer0 NORMAL Interrupt
    256c:	a9 e5       	ldi	r26, 0x59	; 89
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	e9 e5       	ldi	r30, 0x59	; 89
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	81 60       	ori	r24, 0x01	; 1
    2578:	8c 93       	st	X, r24
    257a:	1c c0       	rjmp	.+56     	; 0x25b4 <Timer_init+0xa4>
    		   break;

    	   case COMPARE:

    		   TCCR0 |= (1<< WGM01) ;/*WGM00=0 ,WGM01=1 */
    257c:	a3 e5       	ldi	r26, 0x53	; 83
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	e3 e5       	ldi	r30, 0x53	; 83
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	88 60       	ori	r24, 0x08	; 8
    2588:	8c 93       	st	X, r24
    		   TCCR0 &= ~(1<<WGM00);
    258a:	a3 e5       	ldi	r26, 0x53	; 83
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	e3 e5       	ldi	r30, 0x53	; 83
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	8f 7b       	andi	r24, 0xBF	; 191
    2596:	8c 93       	st	X, r24

     		  /*No need for OC0 in this example so COM00=0 & COM01=0*/
     		  OCR0 = (uint8)Config_Ptr->timer_compare_MatchValue ;
    2598:	ac e5       	ldi	r26, 0x5C	; 92
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e9 81       	ldd	r30, Y+1	; 0x01
    259e:	fa 81       	ldd	r31, Y+2	; 0x02
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	93 81       	ldd	r25, Z+3	; 0x03
    25a4:	8c 93       	st	X, r24
     		  TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    25a6:	a9 e5       	ldi	r26, 0x59	; 89
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	e9 e5       	ldi	r30, 0x59	; 89
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	82 60       	ori	r24, 0x02	; 2
    25b2:	8c 93       	st	X, r24

    		   break;

    	}

    	TCCR0 =  (TCCR0 & 0xF8) | ((Config_Ptr->timer_clock)  & (0x07) )  ;
    25b4:	a3 e5       	ldi	r26, 0x53	; 83
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e3 e5       	ldi	r30, 0x53	; 83
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	98 2f       	mov	r25, r24
    25c0:	98 7f       	andi	r25, 0xF8	; 248
    25c2:	e9 81       	ldd	r30, Y+1	; 0x01
    25c4:	fa 81       	ldd	r31, Y+2	; 0x02
    25c6:	85 81       	ldd	r24, Z+5	; 0x05
    25c8:	87 70       	andi	r24, 0x07	; 7
    25ca:	89 2b       	or	r24, r25
    25cc:	8c 93       	st	X, r24
    	TCNT0 =Config_Ptr->timer_InitialValue ;
    25ce:	a2 e5       	ldi	r26, 0x52	; 82
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	e9 81       	ldd	r30, Y+1	; 0x01
    25d4:	fa 81       	ldd	r31, Y+2	; 0x02
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	8c 93       	st	X, r24
    25dc:	18 c1       	rjmp	.+560    	; 0x280e <Timer_init+0x2fe>





     } else if (Config_Ptr->timer_ID == TIMER1){
    25de:	e9 81       	ldd	r30, Y+1	; 0x01
    25e0:	fa 81       	ldd	r31, Y+2	; 0x02
    25e2:	84 81       	ldd	r24, Z+4	; 0x04
    25e4:	81 30       	cpi	r24, 0x01	; 1
    25e6:	09 f0       	breq	.+2      	; 0x25ea <Timer_init+0xda>
    25e8:	b8 c0       	rjmp	.+368    	; 0x275a <Timer_init+0x24a>
     	 *2-MODE configurable
     	 * 3. clock configurable
     	 * 4-intial value
     	 */

    	 TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    25ea:	ef e4       	ldi	r30, 0x4F	; 79
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	8c e0       	ldi	r24, 0x0C	; 12
    25f0:	80 83       	st	Z, r24
    	 //TCCR1A =  (TCCR1A & 0xFC) ;
    	// TCCR1B =   (TCCR1B & 0xE7) | (((Config_Ptr->timer_mode) & (0XFD)) << 2) | (((Config_Ptr->timer_mode) & (0XFE)) << 4);

     	switch(Config_Ptr->timer_mode){
    25f2:	e9 81       	ldd	r30, Y+1	; 0x01
    25f4:	fa 81       	ldd	r31, Y+2	; 0x02
    25f6:	86 81       	ldd	r24, Z+6	; 0x06
    25f8:	28 2f       	mov	r18, r24
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	3e 83       	std	Y+6, r19	; 0x06
    25fe:	2d 83       	std	Y+5, r18	; 0x05
    2600:	8d 81       	ldd	r24, Y+5	; 0x05
    2602:	9e 81       	ldd	r25, Y+6	; 0x06
    2604:	81 30       	cpi	r24, 0x01	; 1
    2606:	91 05       	cpc	r25, r1
    2608:	61 f1       	breq	.+88     	; 0x2662 <Timer_init+0x152>
    260a:	2d 81       	ldd	r18, Y+5	; 0x05
    260c:	3e 81       	ldd	r19, Y+6	; 0x06
    260e:	22 30       	cpi	r18, 0x02	; 2
    2610:	31 05       	cpc	r19, r1
    2612:	2c f4       	brge	.+10     	; 0x261e <Timer_init+0x10e>
    2614:	8d 81       	ldd	r24, Y+5	; 0x05
    2616:	9e 81       	ldd	r25, Y+6	; 0x06
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	69 f0       	breq	.+26     	; 0x2636 <Timer_init+0x126>
    261c:	87 c0       	rjmp	.+270    	; 0x272c <Timer_init+0x21c>
    261e:	2d 81       	ldd	r18, Y+5	; 0x05
    2620:	3e 81       	ldd	r19, Y+6	; 0x06
    2622:	24 30       	cpi	r18, 0x04	; 4
    2624:	31 05       	cpc	r19, r1
    2626:	99 f1       	breq	.+102    	; 0x268e <Timer_init+0x17e>
    2628:	8d 81       	ldd	r24, Y+5	; 0x05
    262a:	9e 81       	ldd	r25, Y+6	; 0x06
    262c:	85 30       	cpi	r24, 0x05	; 5
    262e:	91 05       	cpc	r25, r1
    2630:	09 f4       	brne	.+2      	; 0x2634 <Timer_init+0x124>
    2632:	55 c0       	rjmp	.+170    	; 0x26de <Timer_init+0x1ce>
    2634:	7b c0       	rjmp	.+246    	; 0x272c <Timer_init+0x21c>

     	   case NORMAL:

     		  TCCR1A &= ~(1<< WGM11) & ~(1<< WGM10);/*WGM11=0 ,WGM10=0 */
    2636:	af e4       	ldi	r26, 0x4F	; 79
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	ef e4       	ldi	r30, 0x4F	; 79
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	8c 7f       	andi	r24, 0xFC	; 252
    2642:	8c 93       	st	X, r24
     		  TCCR1B &= ~(1<<  WGM13) & ~(1<<  WGM12);/*WGM13=0 , WGM12=0 */
    2644:	ae e4       	ldi	r26, 0x4E	; 78
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	ee e4       	ldi	r30, 0x4E	; 78
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	87 7e       	andi	r24, 0xE7	; 231
    2650:	8c 93       	st	X, r24

              TIMSK |= (1<<TOIE1); // Enable Timer1 NORMAL Interrupt
    2652:	a9 e5       	ldi	r26, 0x59	; 89
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	e9 e5       	ldi	r30, 0x59	; 89
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	84 60       	ori	r24, 0x04	; 4
    265e:	8c 93       	st	X, r24
    2660:	65 c0       	rjmp	.+202    	; 0x272c <Timer_init+0x21c>

     		   break;

     	   case COMPARE:

     		  TCCR1A &= ~(1<< WGM11) & ~(1<< WGM10);/*WGM11=0 ,WGM10=0 */
    2662:	af e4       	ldi	r26, 0x4F	; 79
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	ef e4       	ldi	r30, 0x4F	; 79
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	8c 7f       	andi	r24, 0xFC	; 252
    266e:	8c 93       	st	X, r24
     		  TCCR1B &= ~(1<<  WGM13) ;/*WGM13=0 , WGM12=1*/
    2670:	ae e4       	ldi	r26, 0x4E	; 78
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	ee e4       	ldi	r30, 0x4E	; 78
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	8f 7e       	andi	r24, 0xEF	; 239
    267c:	8c 93       	st	X, r24
     		  TCCR1B |= (1<<  WGM12);
    267e:	ae e4       	ldi	r26, 0x4E	; 78
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	ee e4       	ldi	r30, 0x4E	; 78
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	88 60       	ori	r24, 0x08	; 8
    268a:	8c 93       	st	X, r24
    268c:	4f c0       	rjmp	.+158    	; 0x272c <Timer_init+0x21c>

     		   break;

     	   case COMPAREA:

     		  TCCR1A &= ~(1<< WGM11) & ~(1<< WGM10);/*WGM11=0 ,WGM10=0 */
    268e:	af e4       	ldi	r26, 0x4F	; 79
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	ef e4       	ldi	r30, 0x4F	; 79
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	8c 7f       	andi	r24, 0xFC	; 252
    269a:	8c 93       	st	X, r24
     		  TCCR1B &= ~(1<<  WGM13) ;/*WGM13=0 , WGM12=1*/
    269c:	ae e4       	ldi	r26, 0x4E	; 78
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	ee e4       	ldi	r30, 0x4E	; 78
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	8f 7e       	andi	r24, 0xEF	; 239
    26a8:	8c 93       	st	X, r24
     		  TCCR1B |= (1<<  WGM12);
    26aa:	ae e4       	ldi	r26, 0x4E	; 78
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	ee e4       	ldi	r30, 0x4E	; 78
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	88 60       	ori	r24, 0x08	; 8
    26b6:	8c 93       	st	X, r24
    		  /*No need for OC1A and OC1B in this example so COM1A0 and COM1B0=0 & COM1A1 and COM1B1=0*/
     		 OCR1A = (uint8)Config_Ptr->timer_compare_MatchValue ;
    26b8:	aa e4       	ldi	r26, 0x4A	; 74
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e9 81       	ldd	r30, Y+1	; 0x01
    26be:	fa 81       	ldd	r31, Y+2	; 0x02
    26c0:	82 81       	ldd	r24, Z+2	; 0x02
    26c2:	93 81       	ldd	r25, Z+3	; 0x03
    26c4:	88 2f       	mov	r24, r24
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	11 96       	adiw	r26, 0x01	; 1
    26ca:	9c 93       	st	X, r25
    26cc:	8e 93       	st	-X, r24
     		TIMSK |= (1<<OCIE1A);// Enable Timer1 CompareA Interrupt
    26ce:	a9 e5       	ldi	r26, 0x59	; 89
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	e9 e5       	ldi	r30, 0x59	; 89
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	80 61       	ori	r24, 0x10	; 16
    26da:	8c 93       	st	X, r24
    26dc:	27 c0       	rjmp	.+78     	; 0x272c <Timer_init+0x21c>

     		   break;

     	   case COMPAREB:

     		  TCCR1A &= ~(1<< WGM11) & ~(1<< WGM10);/*WGM11=0 ,WGM10=0 */
    26de:	af e4       	ldi	r26, 0x4F	; 79
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	ef e4       	ldi	r30, 0x4F	; 79
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	8c 7f       	andi	r24, 0xFC	; 252
    26ea:	8c 93       	st	X, r24
     		  TCCR1B &= ~(1<<  WGM13) ;/*WGM13=0 , WGM12=1*/
    26ec:	ae e4       	ldi	r26, 0x4E	; 78
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	ee e4       	ldi	r30, 0x4E	; 78
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	8f 7e       	andi	r24, 0xEF	; 239
    26f8:	8c 93       	st	X, r24
     		  TCCR1B |= (1<<  WGM12);
    26fa:	ae e4       	ldi	r26, 0x4E	; 78
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	ee e4       	ldi	r30, 0x4E	; 78
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	88 60       	ori	r24, 0x08	; 8
    2706:	8c 93       	st	X, r24
     		  OCR1B = (uint8)Config_Ptr->timer_compare_MatchValue ;
    2708:	a8 e4       	ldi	r26, 0x48	; 72
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	e9 81       	ldd	r30, Y+1	; 0x01
    270e:	fa 81       	ldd	r31, Y+2	; 0x02
    2710:	82 81       	ldd	r24, Z+2	; 0x02
    2712:	93 81       	ldd	r25, Z+3	; 0x03
    2714:	88 2f       	mov	r24, r24
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	11 96       	adiw	r26, 0x01	; 1
    271a:	9c 93       	st	X, r25
    271c:	8e 93       	st	-X, r24


         	  TIMSK |=  (1<<OCIE1B); // Enable Timer1 CompareB Interrupt
    271e:	a9 e5       	ldi	r26, 0x59	; 89
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	e9 e5       	ldi	r30, 0x59	; 89
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	88 60       	ori	r24, 0x08	; 8
    272a:	8c 93       	st	X, r24
     		   break;

     	}

    	 TCCR1B =  (TCCR1B & 0xF8) | ((Config_Ptr->timer_clock)  & (0x07) )   ;
    272c:	ae e4       	ldi	r26, 0x4E	; 78
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	ee e4       	ldi	r30, 0x4E	; 78
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	98 2f       	mov	r25, r24
    2738:	98 7f       	andi	r25, 0xF8	; 248
    273a:	e9 81       	ldd	r30, Y+1	; 0x01
    273c:	fa 81       	ldd	r31, Y+2	; 0x02
    273e:	85 81       	ldd	r24, Z+5	; 0x05
    2740:	87 70       	andi	r24, 0x07	; 7
    2742:	89 2b       	or	r24, r25
    2744:	8c 93       	st	X, r24
    	 TCNT1  =Config_Ptr->timer_InitialValue ;
    2746:	ac e4       	ldi	r26, 0x4C	; 76
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	e9 81       	ldd	r30, Y+1	; 0x01
    274c:	fa 81       	ldd	r31, Y+2	; 0x02
    274e:	80 81       	ld	r24, Z
    2750:	91 81       	ldd	r25, Z+1	; 0x01
    2752:	11 96       	adiw	r26, 0x01	; 1
    2754:	9c 93       	st	X, r25
    2756:	8e 93       	st	-X, r24
    2758:	5a c0       	rjmp	.+180    	; 0x280e <Timer_init+0x2fe>





     } else if (Config_Ptr->timer_ID == TIMER2){
    275a:	e9 81       	ldd	r30, Y+1	; 0x01
    275c:	fa 81       	ldd	r31, Y+2	; 0x02
    275e:	84 81       	ldd	r24, Z+4	; 0x04
    2760:	82 30       	cpi	r24, 0x02	; 2
    2762:	09 f0       	breq	.+2      	; 0x2766 <Timer_init+0x256>
    2764:	54 c0       	rjmp	.+168    	; 0x280e <Timer_init+0x2fe>
    	   * 1. Non PWM mode FOC2=1
    	   *2-MODE configurable
    	    * 3. clock configurable
    	   * 4-intial value
    	    */
    	 TCCR2 = (1<<FOC2) ;
    2766:	e5 e4       	ldi	r30, 0x45	; 69
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 e8       	ldi	r24, 0x80	; 128
    276c:	80 83       	st	Z, r24
    	// TCCR2 =  (TCCR0 & 0xB7) | (((Config_Ptr->timer_mode) & (0XFD)) << 2) | (((Config_Ptr->timer_mode) & (0XFE)) << 6) ;

     	switch(Config_Ptr->timer_mode){
    276e:	e9 81       	ldd	r30, Y+1	; 0x01
    2770:	fa 81       	ldd	r31, Y+2	; 0x02
    2772:	86 81       	ldd	r24, Z+6	; 0x06
    2774:	28 2f       	mov	r18, r24
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	3c 83       	std	Y+4, r19	; 0x04
    277a:	2b 83       	std	Y+3, r18	; 0x03
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	9c 81       	ldd	r25, Y+4	; 0x04
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	31 f0       	breq	.+12     	; 0x2790 <Timer_init+0x280>
    2784:	2b 81       	ldd	r18, Y+3	; 0x03
    2786:	3c 81       	ldd	r19, Y+4	; 0x04
    2788:	21 30       	cpi	r18, 0x01	; 1
    278a:	31 05       	cpc	r19, r1
    278c:	81 f0       	breq	.+32     	; 0x27ae <Timer_init+0x29e>
    278e:	2b c0       	rjmp	.+86     	; 0x27e6 <Timer_init+0x2d6>

     	   case NORMAL:

     		  TCCR2 &= ~(1<< WGM20) & ~(1<<WGM21);/*WGM20=0 ,WGM21=0 */
    2790:	a5 e4       	ldi	r26, 0x45	; 69
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	e5 e4       	ldi	r30, 0x45	; 69
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	87 7b       	andi	r24, 0xB7	; 183
    279c:	8c 93       	st	X, r24
       		  TIMSK |= (1<<TOIE2); // Enable Timer2 NORMAL Interrupt
    279e:	a9 e5       	ldi	r26, 0x59	; 89
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	e9 e5       	ldi	r30, 0x59	; 89
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	80 64       	ori	r24, 0x40	; 64
    27aa:	8c 93       	st	X, r24
    27ac:	1c c0       	rjmp	.+56     	; 0x27e6 <Timer_init+0x2d6>
     		    break;

     	   case COMPARE:

      		  TCCR2 &= ~(1<< WGM20);/*WGM20=0 ,WGM21=1 */
    27ae:	a5 e4       	ldi	r26, 0x45	; 69
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e5 e4       	ldi	r30, 0x45	; 69
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	8f 7b       	andi	r24, 0xBF	; 191
    27ba:	8c 93       	st	X, r24
     		  TCCR2 &= ~(1<<WGM21);
    27bc:	a5 e4       	ldi	r26, 0x45	; 69
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e5 e4       	ldi	r30, 0x45	; 69
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	87 7f       	andi	r24, 0xF7	; 247
    27c8:	8c 93       	st	X, r24
     		  /*No need for OC2 in this example so COM00=0 & COM01=0*/
     		 OCR2 =(uint8) Config_Ptr->timer_compare_MatchValue ;
    27ca:	a3 e4       	ldi	r26, 0x43	; 67
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	e9 81       	ldd	r30, Y+1	; 0x01
    27d0:	fa 81       	ldd	r31, Y+2	; 0x02
    27d2:	82 81       	ldd	r24, Z+2	; 0x02
    27d4:	93 81       	ldd	r25, Z+3	; 0x03
    27d6:	8c 93       	st	X, r24
    		 TIMSK |= (1<<OCIE2); // Enable Timer2 Compare Interrupt
    27d8:	a9 e5       	ldi	r26, 0x59	; 89
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	e9 e5       	ldi	r30, 0x59	; 89
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
    27e2:	80 68       	ori	r24, 0x80	; 128
    27e4:	8c 93       	st	X, r24
     		   break;

     	}

    	 TCCR2 =  (TCCR0 & 0xF8) | ((Config_Ptr->timer_clock)  & (0x07) )  ;
    27e6:	a5 e4       	ldi	r26, 0x45	; 69
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	e3 e5       	ldi	r30, 0x53	; 83
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	98 2f       	mov	r25, r24
    27f2:	98 7f       	andi	r25, 0xF8	; 248
    27f4:	e9 81       	ldd	r30, Y+1	; 0x01
    27f6:	fa 81       	ldd	r31, Y+2	; 0x02
    27f8:	85 81       	ldd	r24, Z+5	; 0x05
    27fa:	87 70       	andi	r24, 0x07	; 7
    27fc:	89 2b       	or	r24, r25
    27fe:	8c 93       	st	X, r24
    	 TCNT2 = Config_Ptr->timer_InitialValue ;
    2800:	a4 e4       	ldi	r26, 0x44	; 68
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	e9 81       	ldd	r30, Y+1	; 0x01
    2806:	fa 81       	ldd	r31, Y+2	; 0x02
    2808:	80 81       	ld	r24, Z
    280a:	91 81       	ldd	r25, Z+1	; 0x01
    280c:	8c 93       	st	X, r24



     }

}
    280e:	28 96       	adiw	r28, 0x08	; 8
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	de bf       	out	0x3e, r29	; 62
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	cd bf       	out	0x3d, r28	; 61
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <Timer_deInit>:
 *
 * Inputs: Timer_ID
 *
 */

void Timer_deInit(Timer_ID_Type timer_type){
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	0f 92       	push	r0
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	89 83       	std	Y+1, r24	; 0x01

	 if ( timer_type == TIMER0){
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	88 23       	and	r24, r24
    2830:	a9 f4       	brne	.+42     	; 0x285c <Timer_deInit+0x3c>

		 TCCR0 &= 0xF8 ; /*Disable clock to pause the Timer0*/
    2832:	a3 e5       	ldi	r26, 0x53	; 83
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	e3 e5       	ldi	r30, 0x53	; 83
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	88 7f       	andi	r24, 0xF8	; 248
    283e:	8c 93       	st	X, r24
		  TIMSK &= 0xFC;  /* Disable interrupt */
    2840:	a9 e5       	ldi	r26, 0x59	; 89
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	e9 e5       	ldi	r30, 0x59	; 89
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	8c 7f       	andi	r24, 0xFC	; 252
    284c:	8c 93       	st	X, r24
			TCNT0=0;
    284e:	e2 e5       	ldi	r30, 0x52	; 82
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	10 82       	st	Z, r1
			OCR0=0;
    2854:	ec e5       	ldi	r30, 0x5C	; 92
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	10 82       	st	Z, r1
    285a:	38 c0       	rjmp	.+112    	; 0x28cc <Timer_deInit+0xac>



	 }else if (timer_type== TIMER1){
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	81 30       	cpi	r24, 0x01	; 1
    2860:	f1 f4       	brne	.+60     	; 0x289e <Timer_deInit+0x7e>

		 TCCR1B &= 0xF8 ; /*Disable clock to pause the Timer1*/
    2862:	ae e4       	ldi	r26, 0x4E	; 78
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	ee e4       	ldi	r30, 0x4E	; 78
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	88 7f       	andi	r24, 0xF8	; 248
    286e:	8c 93       	st	X, r24
		  TIMSK &= 0xE3;  /* Disable interrupt */
    2870:	a9 e5       	ldi	r26, 0x59	; 89
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	e9 e5       	ldi	r30, 0x59	; 89
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	83 7e       	andi	r24, 0xE3	; 227
    287c:	8c 93       	st	X, r24
			TCCR1A = 0;
    287e:	ef e4       	ldi	r30, 0x4F	; 79
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	10 82       	st	Z, r1
			TCNT1 = 0;
    2884:	ec e4       	ldi	r30, 0x4C	; 76
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	11 82       	std	Z+1, r1	; 0x01
    288a:	10 82       	st	Z, r1
			OCR1A = 0;
    288c:	ea e4       	ldi	r30, 0x4A	; 74
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	11 82       	std	Z+1, r1	; 0x01
    2892:	10 82       	st	Z, r1
			OCR1B = 0;
    2894:	e8 e4       	ldi	r30, 0x48	; 72
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	11 82       	std	Z+1, r1	; 0x01
    289a:	10 82       	st	Z, r1
    289c:	17 c0       	rjmp	.+46     	; 0x28cc <Timer_deInit+0xac>


	 }else if (timer_type == TIMER2){
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	82 30       	cpi	r24, 0x02	; 2
    28a2:	a1 f4       	brne	.+40     	; 0x28cc <Timer_deInit+0xac>


		 TCCR2 &= 0xF8 ; /*Disable clock to pause the Timer2*/
    28a4:	a5 e4       	ldi	r26, 0x45	; 69
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e5 e4       	ldi	r30, 0x45	; 69
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	88 7f       	andi	r24, 0xF8	; 248
    28b0:	8c 93       	st	X, r24
		  TIMSK &= 0x3F;  /* Disable interrupt */
    28b2:	a9 e5       	ldi	r26, 0x59	; 89
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	e9 e5       	ldi	r30, 0x59	; 89
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
    28bc:	8f 73       	andi	r24, 0x3F	; 63
    28be:	8c 93       	st	X, r24
			TCNT2 = 0;
    28c0:	e4 e4       	ldi	r30, 0x44	; 68
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	10 82       	st	Z, r1
			OCR2 = 0;
    28c6:	e3 e4       	ldi	r30, 0x43	; 67
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	10 82       	st	Z, r1


	 }

}
    28cc:	0f 90       	pop	r0
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	08 95       	ret

000028d4 <Timer_setCallBack>:
 * Function to set the Call Back function address to the required Timer.
 *
 * Inputs: pointer to Call Back function and Timer Id you want to set The Callback to it.
 *
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID ){
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	00 d0       	rcall	.+0      	; 0x28da <Timer_setCallBack+0x6>
    28da:	0f 92       	push	r0
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
    28e0:	9a 83       	std	Y+2, r25	; 0x02
    28e2:	89 83       	std	Y+1, r24	; 0x01
    28e4:	6b 83       	std	Y+3, r22	; 0x03


	if (a_timer_ID==TIMER0){
    28e6:	8b 81       	ldd	r24, Y+3	; 0x03
    28e8:	88 23       	and	r24, r24
    28ea:	39 f4       	brne	.+14     	; 0x28fa <Timer_setCallBack+0x26>

	/* Save the address of the Call back function in a global variable */
		g_callBackPtr0 = a_ptr;
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	9a 81       	ldd	r25, Y+2	; 0x02
    28f0:	90 93 83 01 	sts	0x0183, r25
    28f4:	80 93 82 01 	sts	0x0182, r24
    28f8:	13 c0       	rjmp	.+38     	; 0x2920 <Timer_setCallBack+0x4c>

	} else if (a_timer_ID==TIMER1){
    28fa:	8b 81       	ldd	r24, Y+3	; 0x03
    28fc:	81 30       	cpi	r24, 0x01	; 1
    28fe:	39 f4       	brne	.+14     	; 0x290e <Timer_setCallBack+0x3a>

		/* Save the address of the Call back function in a global variable */
		g_callBackPtr1 = a_ptr;
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	90 93 85 01 	sts	0x0185, r25
    2908:	80 93 84 01 	sts	0x0184, r24
    290c:	09 c0       	rjmp	.+18     	; 0x2920 <Timer_setCallBack+0x4c>


	}else if (a_timer_ID==TIMER2){
    290e:	8b 81       	ldd	r24, Y+3	; 0x03
    2910:	82 30       	cpi	r24, 0x02	; 2
    2912:	31 f4       	brne	.+12     	; 0x2920 <Timer_setCallBack+0x4c>

		/* Save the address of the Call back function in a global variable */
		g_callBackPtr2 = a_ptr;
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	9a 81       	ldd	r25, Y+2	; 0x02
    2918:	90 93 87 01 	sts	0x0187, r25
    291c:	80 93 86 01 	sts	0x0186, r24

	}



}
    2920:	0f 90       	pop	r0
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	08 95       	ret

0000292c <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    292c:	df 93       	push	r29
    292e:	cf 93       	push	r28
    2930:	00 d0       	rcall	.+0      	; 0x2932 <TWI_init+0x6>
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
    2936:	9a 83       	std	Y+2, r25	; 0x02
    2938:	89 83       	std	Y+1, r24	; 0x01
    TWBR = Config_Ptr->bitrate;
    293a:	a0 e2       	ldi	r26, 0x20	; 32
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	e9 81       	ldd	r30, Y+1	; 0x01
    2940:	fa 81       	ldd	r31, Y+2	; 0x02
    2942:	21 81       	ldd	r18, Z+1	; 0x01
    2944:	32 81       	ldd	r19, Z+2	; 0x02
    2946:	43 81       	ldd	r20, Z+3	; 0x03
    2948:	54 81       	ldd	r21, Z+4	; 0x04
    294a:	65 81       	ldd	r22, Z+5	; 0x05
    294c:	76 81       	ldd	r23, Z+6	; 0x06
    294e:	87 81       	ldd	r24, Z+7	; 0x07
    2950:	90 85       	ldd	r25, Z+8	; 0x08
    2952:	82 2f       	mov	r24, r18
    2954:	8c 93       	st	X, r24
	TWSR = (GET_BIT(Config_Ptr->prescalar,0)<<TWPS0)|(GET_BIT(Config_Ptr->prescalar,1)<<TWPS1);
    2956:	a1 e2       	ldi	r26, 0x21	; 33
    2958:	b0 e0       	ldi	r27, 0x00	; 0
    295a:	e9 81       	ldd	r30, Y+1	; 0x01
    295c:	fa 81       	ldd	r31, Y+2	; 0x02
    295e:	80 81       	ld	r24, Z
    2960:	83 70       	andi	r24, 0x03	; 3
    2962:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address;
    2964:	a2 e2       	ldi	r26, 0x22	; 34
    2966:	b0 e0       	ldi	r27, 0x00	; 0
    2968:	e9 81       	ldd	r30, Y+1	; 0x01
    296a:	fa 81       	ldd	r31, Y+2	; 0x02
    296c:	81 85       	ldd	r24, Z+9	; 0x09
    296e:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2970:	e6 e5       	ldi	r30, 0x56	; 86
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	84 e0       	ldi	r24, 0x04	; 4
    2976:	80 83       	st	Z, r24
}
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
    297c:	cf 91       	pop	r28
    297e:	df 91       	pop	r29
    2980:	08 95       	ret

00002982 <TWI_start>:

void TWI_start(void)
{
    2982:	df 93       	push	r29
    2984:	cf 93       	push	r28
    2986:	cd b7       	in	r28, 0x3d	; 61
    2988:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    298a:	e6 e5       	ldi	r30, 0x56	; 86
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	84 ea       	ldi	r24, 0xA4	; 164
    2990:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2992:	e6 e5       	ldi	r30, 0x56	; 86
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	88 23       	and	r24, r24
    299a:	dc f7       	brge	.-10     	; 0x2992 <TWI_start+0x10>
}
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret

000029a2 <TWI_stop>:

void TWI_stop(void)
{
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    29aa:	e6 e5       	ldi	r30, 0x56	; 86
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	84 e9       	ldi	r24, 0x94	; 148
    29b0:	80 83       	st	Z, r24
}
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	08 95       	ret

000029b8 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    29b8:	df 93       	push	r29
    29ba:	cf 93       	push	r28
    29bc:	0f 92       	push	r0
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    29c4:	e3 e2       	ldi	r30, 0x23	; 35
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    29cc:	e6 e5       	ldi	r30, 0x56	; 86
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	84 e8       	ldi	r24, 0x84	; 132
    29d2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    29d4:	e6 e5       	ldi	r30, 0x56	; 86
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	88 23       	and	r24, r24
    29dc:	dc f7       	brge	.-10     	; 0x29d4 <TWI_writeByte+0x1c>
}
    29de:	0f 90       	pop	r0
    29e0:	cf 91       	pop	r28
    29e2:	df 91       	pop	r29
    29e4:	08 95       	ret

000029e6 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    29e6:	df 93       	push	r29
    29e8:	cf 93       	push	r28
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    29ee:	e6 e5       	ldi	r30, 0x56	; 86
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	84 ec       	ldi	r24, 0xC4	; 196
    29f4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    29f6:	e6 e5       	ldi	r30, 0x56	; 86
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	80 81       	ld	r24, Z
    29fc:	88 23       	and	r24, r24
    29fe:	dc f7       	brge	.-10     	; 0x29f6 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2a00:	e3 e2       	ldi	r30, 0x23	; 35
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
}
    2a06:	cf 91       	pop	r28
    2a08:	df 91       	pop	r29
    2a0a:	08 95       	ret

00002a0c <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2a0c:	df 93       	push	r29
    2a0e:	cf 93       	push	r28
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2a14:	e6 e5       	ldi	r30, 0x56	; 86
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	84 e8       	ldi	r24, 0x84	; 132
    2a1a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2a1c:	e6 e5       	ldi	r30, 0x56	; 86
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	88 23       	and	r24, r24
    2a24:	dc f7       	brge	.-10     	; 0x2a1c <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2a26:	e3 e2       	ldi	r30, 0x23	; 35
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
}
    2a2c:	cf 91       	pop	r28
    2a2e:	df 91       	pop	r29
    2a30:	08 95       	ret

00002a32 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2a32:	df 93       	push	r29
    2a34:	cf 93       	push	r28
    2a36:	0f 92       	push	r0
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2a3c:	e1 e2       	ldi	r30, 0x21	; 33
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	80 81       	ld	r24, Z
    2a42:	88 7f       	andi	r24, 0xF8	; 248
    2a44:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a48:	0f 90       	pop	r0
    2a4a:	cf 91       	pop	r28
    2a4c:	df 91       	pop	r29
    2a4e:	08 95       	ret

00002a50 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2a50:	df 93       	push	r29
    2a52:	cf 93       	push	r28
    2a54:	00 d0       	rcall	.+0      	; 0x2a56 <UART_init+0x6>
    2a56:	00 d0       	rcall	.+0      	; 0x2a58 <UART_init+0x8>
    2a58:	00 d0       	rcall	.+0      	; 0x2a5a <UART_init+0xa>
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
    2a5e:	9c 83       	std	Y+4, r25	; 0x04
    2a60:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2a62:	1a 82       	std	Y+2, r1	; 0x02
    2a64:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2a66:	eb e2       	ldi	r30, 0x2B	; 43
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	82 e0       	ldi	r24, 0x02	; 2
    2a6c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = configurable data bit type
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2a6e:	ea e2       	ldi	r30, 0x2A	; 42
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	88 e1       	ldi	r24, 0x18	; 24
    2a74:	80 83       	st	Z, r24
	//UCSRB = (UCSRB & 0xFB) | ((Config_Ptr->bit_data) & (0x04));
	switch(Config_Ptr->bit_data){
    2a76:	eb 81       	ldd	r30, Y+3	; 0x03
    2a78:	fc 81       	ldd	r31, Y+4	; 0x04
    2a7a:	80 81       	ld	r24, Z
    2a7c:	28 2f       	mov	r18, r24
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	3e 83       	std	Y+6, r19	; 0x06
    2a82:	2d 83       	std	Y+5, r18	; 0x05
    2a84:	8d 81       	ldd	r24, Y+5	; 0x05
    2a86:	9e 81       	ldd	r25, Y+6	; 0x06
    2a88:	82 30       	cpi	r24, 0x02	; 2
    2a8a:	91 05       	cpc	r25, r1
    2a8c:	09 f4       	brne	.+2      	; 0x2a90 <UART_init+0x40>
    2a8e:	41 c0       	rjmp	.+130    	; 0x2b12 <UART_init+0xc2>
    2a90:	2d 81       	ldd	r18, Y+5	; 0x05
    2a92:	3e 81       	ldd	r19, Y+6	; 0x06
    2a94:	23 30       	cpi	r18, 0x03	; 3
    2a96:	31 05       	cpc	r19, r1
    2a98:	54 f4       	brge	.+20     	; 0x2aae <UART_init+0x5e>
    2a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9e:	00 97       	sbiw	r24, 0x00	; 0
    2aa0:	99 f0       	breq	.+38     	; 0x2ac8 <UART_init+0x78>
    2aa2:	2d 81       	ldd	r18, Y+5	; 0x05
    2aa4:	3e 81       	ldd	r19, Y+6	; 0x06
    2aa6:	21 30       	cpi	r18, 0x01	; 1
    2aa8:	31 05       	cpc	r19, r1
    2aaa:	e9 f0       	breq	.+58     	; 0x2ae6 <UART_init+0x96>
    2aac:	65 c0       	rjmp	.+202    	; 0x2b78 <UART_init+0x128>
    2aae:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab2:	83 30       	cpi	r24, 0x03	; 3
    2ab4:	91 05       	cpc	r25, r1
    2ab6:	09 f4       	brne	.+2      	; 0x2aba <UART_init+0x6a>
    2ab8:	42 c0       	rjmp	.+132    	; 0x2b3e <UART_init+0xee>
    2aba:	2d 81       	ldd	r18, Y+5	; 0x05
    2abc:	3e 81       	ldd	r19, Y+6	; 0x06
    2abe:	27 30       	cpi	r18, 0x07	; 7
    2ac0:	31 05       	cpc	r19, r1
    2ac2:	09 f4       	brne	.+2      	; 0x2ac6 <UART_init+0x76>
    2ac4:	4b c0       	rjmp	.+150    	; 0x2b5c <UART_init+0x10c>
    2ac6:	58 c0       	rjmp	.+176    	; 0x2b78 <UART_init+0x128>

	   case BITS_5:

		   UCSRC &= ~(1<<UCSZ1) & ~(1<<UCSZ0);/*UCSZ1:0=0 ,UCSZ2=0 */
    2ac8:	a0 e4       	ldi	r26, 0x40	; 64
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	e0 e4       	ldi	r30, 0x40	; 64
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	89 7f       	andi	r24, 0xF9	; 249
    2ad4:	8c 93       	st	X, r24
		   UCSRB &= ~(1<<UCSZ2);
    2ad6:	aa e2       	ldi	r26, 0x2A	; 42
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	ea e2       	ldi	r30, 0x2A	; 42
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	8b 7f       	andi	r24, 0xFB	; 251
    2ae2:	8c 93       	st	X, r24
    2ae4:	49 c0       	rjmp	.+146    	; 0x2b78 <UART_init+0x128>
		   break;

	   case BITS_6:

		   UCSRC &= ~(1<<UCSZ1) ;/*UCSZ0=1 UCSZ1=0 ,UCSZ2=0 */
    2ae6:	a0 e4       	ldi	r26, 0x40	; 64
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	e0 e4       	ldi	r30, 0x40	; 64
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	8b 7f       	andi	r24, 0xFB	; 251
    2af2:	8c 93       	st	X, r24
		   UCSRC |= (1<<UCSZ0);
    2af4:	a0 e4       	ldi	r26, 0x40	; 64
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	e0 e4       	ldi	r30, 0x40	; 64
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	82 60       	ori	r24, 0x02	; 2
    2b00:	8c 93       	st	X, r24
		   UCSRB &= ~(1<<UCSZ2);
    2b02:	aa e2       	ldi	r26, 0x2A	; 42
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	ea e2       	ldi	r30, 0x2A	; 42
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	8b 7f       	andi	r24, 0xFB	; 251
    2b0e:	8c 93       	st	X, r24
    2b10:	33 c0       	rjmp	.+102    	; 0x2b78 <UART_init+0x128>

		   break;

	   case BITS_7:

		   UCSRC &= ~(1<<UCSZ0);/*UCSZ0=0 UCSZ1=1 ,UCSZ2=0 */
    2b12:	a0 e4       	ldi	r26, 0x40	; 64
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	e0 e4       	ldi	r30, 0x40	; 64
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	80 81       	ld	r24, Z
    2b1c:	8d 7f       	andi	r24, 0xFD	; 253
    2b1e:	8c 93       	st	X, r24
		   UCSRC |= (1<<UCSZ1);
    2b20:	a0 e4       	ldi	r26, 0x40	; 64
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
    2b24:	e0 e4       	ldi	r30, 0x40	; 64
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	80 81       	ld	r24, Z
    2b2a:	84 60       	ori	r24, 0x04	; 4
    2b2c:	8c 93       	st	X, r24
		   UCSRB &= ~(1<<UCSZ2);
    2b2e:	aa e2       	ldi	r26, 0x2A	; 42
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	ea e2       	ldi	r30, 0x2A	; 42
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	8b 7f       	andi	r24, 0xFB	; 251
    2b3a:	8c 93       	st	X, r24
    2b3c:	1d c0       	rjmp	.+58     	; 0x2b78 <UART_init+0x128>

		   break;

	   case BITS_8:

		   UCSRC |= (1<<UCSZ1) | (1<<UCSZ0);/*UCSZ0=1 UCSZ1=1 ,UCSZ2=0 */
    2b3e:	a0 e4       	ldi	r26, 0x40	; 64
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	e0 e4       	ldi	r30, 0x40	; 64
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	86 60       	ori	r24, 0x06	; 6
    2b4a:	8c 93       	st	X, r24
		   UCSRB &= ~(1<<UCSZ2);
    2b4c:	aa e2       	ldi	r26, 0x2A	; 42
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	ea e2       	ldi	r30, 0x2A	; 42
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	8b 7f       	andi	r24, 0xFB	; 251
    2b58:	8c 93       	st	X, r24
    2b5a:	0e c0       	rjmp	.+28     	; 0x2b78 <UART_init+0x128>

		   break;

	   case BITS_9:

		   UCSRC |= (1<<UCSZ1) | (1<<UCSZ0);/*UCSZ0=1 UCSZ1=1 ,UCSZ2=1 */
    2b5c:	a0 e4       	ldi	r26, 0x40	; 64
    2b5e:	b0 e0       	ldi	r27, 0x00	; 0
    2b60:	e0 e4       	ldi	r30, 0x40	; 64
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	86 60       	ori	r24, 0x06	; 6
    2b68:	8c 93       	st	X, r24
		   UCSRB |= (1<<UCSZ2);
    2b6a:	aa e2       	ldi	r26, 0x2A	; 42
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	ea e2       	ldi	r30, 0x2A	; 42
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	84 60       	ori	r24, 0x04	; 4
    2b76:	8c 93       	st	X, r24
	 * UPM1:0  = configurable parity bit type
	 * USBS    = configurable stop bit type
	 * UCSZ1:0 =configurable data bit type
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL)  ;
    2b78:	e0 e4       	ldi	r30, 0x40	; 64
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 e8       	ldi	r24, 0x80	; 128
    2b7e:	80 83       	st	Z, r24
	//UCSRC = (UCSRC & 0xF9) | (((Config_Ptr->bit_data) & (0x03))<<1);
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity) << UPM0);
    2b80:	a0 e4       	ldi	r26, 0x40	; 64
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	e0 e4       	ldi	r30, 0x40	; 64
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	80 81       	ld	r24, Z
    2b8a:	28 2f       	mov	r18, r24
    2b8c:	2f 7c       	andi	r18, 0xCF	; 207
    2b8e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b90:	fc 81       	ldd	r31, Y+4	; 0x04
    2b92:	81 81       	ldd	r24, Z+1	; 0x01
    2b94:	88 2f       	mov	r24, r24
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	82 95       	swap	r24
    2b9a:	92 95       	swap	r25
    2b9c:	90 7f       	andi	r25, 0xF0	; 240
    2b9e:	98 27       	eor	r25, r24
    2ba0:	80 7f       	andi	r24, 0xF0	; 240
    2ba2:	98 27       	eor	r25, r24
    2ba4:	82 2b       	or	r24, r18
    2ba6:	8c 93       	st	X, r24


	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit) << USBS );
    2ba8:	a0 e4       	ldi	r26, 0x40	; 64
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	e0 e4       	ldi	r30, 0x40	; 64
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
    2bb2:	28 2f       	mov	r18, r24
    2bb4:	27 7f       	andi	r18, 0xF7	; 247
    2bb6:	eb 81       	ldd	r30, Y+3	; 0x03
    2bb8:	fc 81       	ldd	r31, Y+4	; 0x04
    2bba:	82 81       	ldd	r24, Z+2	; 0x02
    2bbc:	88 2f       	mov	r24, r24
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	88 0f       	add	r24, r24
    2bc2:	99 1f       	adc	r25, r25
    2bc4:	88 0f       	add	r24, r24
    2bc6:	99 1f       	adc	r25, r25
    2bc8:	88 0f       	add	r24, r24
    2bca:	99 1f       	adc	r25, r25
    2bcc:	82 2b       	or	r24, r18
    2bce:	8c 93       	st	X, r24
	

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2bd0:	eb 81       	ldd	r30, Y+3	; 0x03
    2bd2:	fc 81       	ldd	r31, Y+4	; 0x04
    2bd4:	83 81       	ldd	r24, Z+3	; 0x03
    2bd6:	94 81       	ldd	r25, Z+4	; 0x04
    2bd8:	a5 81       	ldd	r26, Z+5	; 0x05
    2bda:	b6 81       	ldd	r27, Z+6	; 0x06
    2bdc:	88 0f       	add	r24, r24
    2bde:	99 1f       	adc	r25, r25
    2be0:	aa 1f       	adc	r26, r26
    2be2:	bb 1f       	adc	r27, r27
    2be4:	88 0f       	add	r24, r24
    2be6:	99 1f       	adc	r25, r25
    2be8:	aa 1f       	adc	r26, r26
    2bea:	bb 1f       	adc	r27, r27
    2bec:	88 0f       	add	r24, r24
    2bee:	99 1f       	adc	r25, r25
    2bf0:	aa 1f       	adc	r26, r26
    2bf2:	bb 1f       	adc	r27, r27
    2bf4:	9c 01       	movw	r18, r24
    2bf6:	ad 01       	movw	r20, r26
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	92 e1       	ldi	r25, 0x12	; 18
    2bfc:	aa e7       	ldi	r26, 0x7A	; 122
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	bc 01       	movw	r22, r24
    2c02:	cd 01       	movw	r24, r26
    2c04:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__udivmodsi4>
    2c08:	da 01       	movw	r26, r20
    2c0a:	c9 01       	movw	r24, r18
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	9a 83       	std	Y+2, r25	; 0x02
    2c10:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2c12:	e0 e4       	ldi	r30, 0x40	; 64
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	89 81       	ldd	r24, Y+1	; 0x01
    2c18:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1a:	89 2f       	mov	r24, r25
    2c1c:	99 27       	eor	r25, r25
    2c1e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2c20:	e9 e2       	ldi	r30, 0x29	; 41
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	80 83       	st	Z, r24
}
    2c28:	26 96       	adiw	r28, 0x06	; 6
    2c2a:	0f b6       	in	r0, 0x3f	; 63
    2c2c:	f8 94       	cli
    2c2e:	de bf       	out	0x3e, r29	; 62
    2c30:	0f be       	out	0x3f, r0	; 63
    2c32:	cd bf       	out	0x3d, r28	; 61
    2c34:	cf 91       	pop	r28
    2c36:	df 91       	pop	r29
    2c38:	08 95       	ret

00002c3a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2c3a:	df 93       	push	r29
    2c3c:	cf 93       	push	r28
    2c3e:	0f 92       	push	r0
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    2c44:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2c46:	eb e2       	ldi	r30, 0x2B	; 43
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	88 2f       	mov	r24, r24
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	80 72       	andi	r24, 0x20	; 32
    2c52:	90 70       	andi	r25, 0x00	; 0
    2c54:	00 97       	sbiw	r24, 0x00	; 0
    2c56:	b9 f3       	breq	.-18     	; 0x2c46 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2c58:	ec e2       	ldi	r30, 0x2C	; 44
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	80 83       	st	Z, r24


}
    2c60:	0f 90       	pop	r0
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	08 95       	ret

00002c68 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2c70:	eb e2       	ldi	r30, 0x2B	; 43
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 81       	ld	r24, Z
    2c76:	88 23       	and	r24, r24
    2c78:	dc f7       	brge	.-10     	; 0x2c70 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2c7a:	ec e2       	ldi	r30, 0x2C	; 44
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	80 81       	ld	r24, Z
}
    2c80:	cf 91       	pop	r28
    2c82:	df 91       	pop	r29
    2c84:	08 95       	ret

00002c86 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2c86:	df 93       	push	r29
    2c88:	cf 93       	push	r28
    2c8a:	00 d0       	rcall	.+0      	; 0x2c8c <UART_sendString+0x6>
    2c8c:	0f 92       	push	r0
    2c8e:	cd b7       	in	r28, 0x3d	; 61
    2c90:	de b7       	in	r29, 0x3e	; 62
    2c92:	9b 83       	std	Y+3, r25	; 0x03
    2c94:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c96:	19 82       	std	Y+1, r1	; 0x01
    2c98:	0e c0       	rjmp	.+28     	; 0x2cb6 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	28 2f       	mov	r18, r24
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	e2 0f       	add	r30, r18
    2ca8:	f3 1f       	adc	r31, r19
    2caa:	80 81       	ld	r24, Z
    2cac:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <UART_sendByte>
		i++;
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	8f 5f       	subi	r24, 0xFF	; 255
    2cb4:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	28 2f       	mov	r18, r24
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	e2 0f       	add	r30, r18
    2cc4:	f3 1f       	adc	r31, r19
    2cc6:	80 81       	ld	r24, Z
    2cc8:	88 23       	and	r24, r24
    2cca:	39 f7       	brne	.-50     	; 0x2c9a <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}

}
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	cf 91       	pop	r28
    2cd4:	df 91       	pop	r29
    2cd6:	08 95       	ret

00002cd8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2cd8:	0f 93       	push	r16
    2cda:	1f 93       	push	r17
    2cdc:	df 93       	push	r29
    2cde:	cf 93       	push	r28
    2ce0:	00 d0       	rcall	.+0      	; 0x2ce2 <UART_receiveString+0xa>
    2ce2:	0f 92       	push	r0
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	9b 83       	std	Y+3, r25	; 0x03
    2cea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2cec:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	28 2f       	mov	r18, r24
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf8:	8c 01       	movw	r16, r24
    2cfa:	02 0f       	add	r16, r18
    2cfc:	13 1f       	adc	r17, r19
    2cfe:	0e 94 34 16 	call	0x2c68	; 0x2c68 <UART_recieveByte>
    2d02:	f8 01       	movw	r30, r16
    2d04:	80 83       	st	Z, r24
    2d06:	0f c0       	rjmp	.+30     	; 0x2d26 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	8f 5f       	subi	r24, 0xFF	; 255
    2d0c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	28 2f       	mov	r18, r24
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	8a 81       	ldd	r24, Y+2	; 0x02
    2d16:	9b 81       	ldd	r25, Y+3	; 0x03
    2d18:	8c 01       	movw	r16, r24
    2d1a:	02 0f       	add	r16, r18
    2d1c:	13 1f       	adc	r17, r19
    2d1e:	0e 94 34 16 	call	0x2c68	; 0x2c68 <UART_recieveByte>
    2d22:	f8 01       	movw	r30, r16
    2d24:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	28 2f       	mov	r18, r24
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d30:	fc 01       	movw	r30, r24
    2d32:	e2 0f       	add	r30, r18
    2d34:	f3 1f       	adc	r31, r19
    2d36:	80 81       	ld	r24, Z
    2d38:	83 32       	cpi	r24, 0x23	; 35
    2d3a:	31 f7       	brne	.-52     	; 0x2d08 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	28 2f       	mov	r18, r24
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	8a 81       	ldd	r24, Y+2	; 0x02
    2d44:	9b 81       	ldd	r25, Y+3	; 0x03
    2d46:	fc 01       	movw	r30, r24
    2d48:	e2 0f       	add	r30, r18
    2d4a:	f3 1f       	adc	r31, r19
    2d4c:	10 82       	st	Z, r1
}
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	cf 91       	pop	r28
    2d56:	df 91       	pop	r29
    2d58:	1f 91       	pop	r17
    2d5a:	0f 91       	pop	r16
    2d5c:	08 95       	ret

00002d5e <__udivmodsi4>:
    2d5e:	a1 e2       	ldi	r26, 0x21	; 33
    2d60:	1a 2e       	mov	r1, r26
    2d62:	aa 1b       	sub	r26, r26
    2d64:	bb 1b       	sub	r27, r27
    2d66:	fd 01       	movw	r30, r26
    2d68:	0d c0       	rjmp	.+26     	; 0x2d84 <__udivmodsi4_ep>

00002d6a <__udivmodsi4_loop>:
    2d6a:	aa 1f       	adc	r26, r26
    2d6c:	bb 1f       	adc	r27, r27
    2d6e:	ee 1f       	adc	r30, r30
    2d70:	ff 1f       	adc	r31, r31
    2d72:	a2 17       	cp	r26, r18
    2d74:	b3 07       	cpc	r27, r19
    2d76:	e4 07       	cpc	r30, r20
    2d78:	f5 07       	cpc	r31, r21
    2d7a:	20 f0       	brcs	.+8      	; 0x2d84 <__udivmodsi4_ep>
    2d7c:	a2 1b       	sub	r26, r18
    2d7e:	b3 0b       	sbc	r27, r19
    2d80:	e4 0b       	sbc	r30, r20
    2d82:	f5 0b       	sbc	r31, r21

00002d84 <__udivmodsi4_ep>:
    2d84:	66 1f       	adc	r22, r22
    2d86:	77 1f       	adc	r23, r23
    2d88:	88 1f       	adc	r24, r24
    2d8a:	99 1f       	adc	r25, r25
    2d8c:	1a 94       	dec	r1
    2d8e:	69 f7       	brne	.-38     	; 0x2d6a <__udivmodsi4_loop>
    2d90:	60 95       	com	r22
    2d92:	70 95       	com	r23
    2d94:	80 95       	com	r24
    2d96:	90 95       	com	r25
    2d98:	9b 01       	movw	r18, r22
    2d9a:	ac 01       	movw	r20, r24
    2d9c:	bd 01       	movw	r22, r26
    2d9e:	cf 01       	movw	r24, r30
    2da0:	08 95       	ret

00002da2 <__prologue_saves__>:
    2da2:	2f 92       	push	r2
    2da4:	3f 92       	push	r3
    2da6:	4f 92       	push	r4
    2da8:	5f 92       	push	r5
    2daa:	6f 92       	push	r6
    2dac:	7f 92       	push	r7
    2dae:	8f 92       	push	r8
    2db0:	9f 92       	push	r9
    2db2:	af 92       	push	r10
    2db4:	bf 92       	push	r11
    2db6:	cf 92       	push	r12
    2db8:	df 92       	push	r13
    2dba:	ef 92       	push	r14
    2dbc:	ff 92       	push	r15
    2dbe:	0f 93       	push	r16
    2dc0:	1f 93       	push	r17
    2dc2:	cf 93       	push	r28
    2dc4:	df 93       	push	r29
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	ca 1b       	sub	r28, r26
    2dcc:	db 0b       	sbc	r29, r27
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	f8 94       	cli
    2dd2:	de bf       	out	0x3e, r29	; 62
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	cd bf       	out	0x3d, r28	; 61
    2dd8:	09 94       	ijmp

00002dda <__epilogue_restores__>:
    2dda:	2a 88       	ldd	r2, Y+18	; 0x12
    2ddc:	39 88       	ldd	r3, Y+17	; 0x11
    2dde:	48 88       	ldd	r4, Y+16	; 0x10
    2de0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2de2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2de4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2de6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2de8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dea:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dec:	b9 84       	ldd	r11, Y+9	; 0x09
    2dee:	c8 84       	ldd	r12, Y+8	; 0x08
    2df0:	df 80       	ldd	r13, Y+7	; 0x07
    2df2:	ee 80       	ldd	r14, Y+6	; 0x06
    2df4:	fd 80       	ldd	r15, Y+5	; 0x05
    2df6:	0c 81       	ldd	r16, Y+4	; 0x04
    2df8:	1b 81       	ldd	r17, Y+3	; 0x03
    2dfa:	aa 81       	ldd	r26, Y+2	; 0x02
    2dfc:	b9 81       	ldd	r27, Y+1	; 0x01
    2dfe:	ce 0f       	add	r28, r30
    2e00:	d1 1d       	adc	r29, r1
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	cd bf       	out	0x3d, r28	; 61
    2e0c:	ed 01       	movw	r28, r26
    2e0e:	08 95       	ret

00002e10 <_exit>:
    2e10:	f8 94       	cli

00002e12 <__stop_program>:
    2e12:	ff cf       	rjmp	.-2      	; 0x2e12 <__stop_program>
